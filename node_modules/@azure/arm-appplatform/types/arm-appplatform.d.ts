import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export declare type ActionType = string;

/** Object that includes an array of Deployment resource name and set them as active. */
export declare interface ActiveDeploymentCollection {
    /** Collection of Deployment name. */
    activeDeploymentNames?: string[];
}

/** The properties of custom domain for API portal */
export declare interface ApiPortalCustomDomainProperties {
    /** The thumbprint of bound certificate. */
    thumbprint?: string;
}

/** Custom domain of the API portal */
export declare interface ApiPortalCustomDomainResource extends ProxyResource {
    /** The properties of custom domain for API portal */
    properties?: ApiPortalCustomDomainProperties;
}

/** Object that includes an array of API portal custom domain resources and a possible link for next set */
export declare interface ApiPortalCustomDomainResourceCollection {
    /** Collection of API portal custom domain resources */
    value?: ApiPortalCustomDomainResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Interface representing a ApiPortalCustomDomains. */
export declare interface ApiPortalCustomDomains {
    /**
     * Handle requests to list all API portal custom domains.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, apiPortalName: string, options?: ApiPortalCustomDomainsListOptionalParams): PagedAsyncIterableIterator<ApiPortalCustomDomainResource>;
    /**
     * Get the API portal custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param domainName The name of the API portal custom domain.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiPortalName: string, domainName: string, options?: ApiPortalCustomDomainsGetOptionalParams): Promise<ApiPortalCustomDomainsGetResponse>;
    /**
     * Create or update the API portal custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param domainName The name of the API portal custom domain.
     * @param apiPortalCustomDomainResource The API portal custom domain for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, apiPortalName: string, domainName: string, apiPortalCustomDomainResource: ApiPortalCustomDomainResource, options?: ApiPortalCustomDomainsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ApiPortalCustomDomainsCreateOrUpdateResponse>, ApiPortalCustomDomainsCreateOrUpdateResponse>>;
    /**
     * Create or update the API portal custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param domainName The name of the API portal custom domain.
     * @param apiPortalCustomDomainResource The API portal custom domain for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, apiPortalName: string, domainName: string, apiPortalCustomDomainResource: ApiPortalCustomDomainResource, options?: ApiPortalCustomDomainsCreateOrUpdateOptionalParams): Promise<ApiPortalCustomDomainsCreateOrUpdateResponse>;
    /**
     * Delete the API portal custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param domainName The name of the API portal custom domain.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, apiPortalName: string, domainName: string, options?: ApiPortalCustomDomainsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete the API portal custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param domainName The name of the API portal custom domain.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, apiPortalName: string, domainName: string, options?: ApiPortalCustomDomainsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ApiPortalCustomDomainsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiPortalCustomDomainsCreateOrUpdateResponse = ApiPortalCustomDomainResource;

/** Optional parameters. */
export declare interface ApiPortalCustomDomainsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ApiPortalCustomDomainsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiPortalCustomDomainsGetResponse = ApiPortalCustomDomainResource;

/** Optional parameters. */
export declare interface ApiPortalCustomDomainsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ApiPortalCustomDomainsListNextResponse = ApiPortalCustomDomainResourceCollection;

/** Optional parameters. */
export declare interface ApiPortalCustomDomainsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ApiPortalCustomDomainsListResponse = ApiPortalCustomDomainResourceCollection;

/** Collection of instances belong to the API portal */
export declare interface ApiPortalInstance {
    /**
     * Name of the API portal instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Status of the API portal instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** API portal properties payload */
export declare interface ApiPortalProperties {
    /**
     * State of the API portal.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ApiPortalProvisioningState;
    /** Indicates whether the API portal exposes endpoint. */
    public?: boolean;
    /**
     * URL of the API portal, exposed when 'public' is true.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly url?: string;
    /** Indicate if only https is allowed. */
    httpsOnly?: boolean;
    /** The array of resource Ids of gateway to integrate with API portal. */
    gatewayIds?: string[];
    /** Collection of OpenAPI source URL locations. */
    sourceUrls?: string[];
    /** Single sign-on related configuration */
    ssoProperties?: SsoProperties;
    /**
     * The requested resource quantity for required CPU and Memory.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceRequests?: ApiPortalResourceRequests;
    /**
     * Collection of instances belong to API portal.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instances?: ApiPortalInstance[];
}

/**
 * Defines values for ApiPortalProvisioningState. \
 * {@link KnownApiPortalProvisioningState} can be used interchangeably with ApiPortalProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export declare type ApiPortalProvisioningState = string;

/** API portal resource */
export declare interface ApiPortalResource extends ProxyResource {
    /** API portal properties payload */
    properties?: ApiPortalProperties;
    /** Sku of the API portal resource */
    sku?: Sku;
}

/** Object that includes an array of API portal resources and a possible link for next set */
export declare interface ApiPortalResourceCollection {
    /** Collection of API portal resources */
    value?: ApiPortalResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Resource requests of the API portal */
export declare interface ApiPortalResourceRequests {
    /**
     * Cpu allocated to each API portal instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cpu?: string;
    /**
     * Memory allocated to each API portal instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly memory?: string;
}

/** Interface representing a ApiPortals. */
export declare interface ApiPortals {
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, options?: ApiPortalsListOptionalParams): PagedAsyncIterableIterator<ApiPortalResource>;
    /**
     * Get the API portal and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiPortalName: string, options?: ApiPortalsGetOptionalParams): Promise<ApiPortalsGetResponse>;
    /**
     * Create the default API portal or update the existing API portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param apiPortalResource The API portal for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, apiPortalName: string, apiPortalResource: ApiPortalResource, options?: ApiPortalsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ApiPortalsCreateOrUpdateResponse>, ApiPortalsCreateOrUpdateResponse>>;
    /**
     * Create the default API portal or update the existing API portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param apiPortalResource The API portal for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, apiPortalName: string, apiPortalResource: ApiPortalResource, options?: ApiPortalsCreateOrUpdateOptionalParams): Promise<ApiPortalsCreateOrUpdateResponse>;
    /**
     * Delete the default API portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, apiPortalName: string, options?: ApiPortalsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete the default API portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, apiPortalName: string, options?: ApiPortalsDeleteOptionalParams): Promise<void>;
    /**
     * Check the domains are valid as well as not in use.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param validatePayload Custom domain payload to be validated
     * @param options The options parameters.
     */
    validateDomain(resourceGroupName: string, serviceName: string, apiPortalName: string, validatePayload: CustomDomainValidatePayload, options?: ApiPortalsValidateDomainOptionalParams): Promise<ApiPortalsValidateDomainResponse>;
}

/** Optional parameters. */
export declare interface ApiPortalsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApiPortalsCreateOrUpdateResponse = ApiPortalResource;

/** Optional parameters. */
export declare interface ApiPortalsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ApiPortalsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApiPortalsGetResponse = ApiPortalResource;

/** Optional parameters. */
export declare interface ApiPortalsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ApiPortalsListNextResponse = ApiPortalResourceCollection;

/** Optional parameters. */
export declare interface ApiPortalsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ApiPortalsListResponse = ApiPortalResourceCollection;

/** Optional parameters. */
export declare interface ApiPortalsValidateDomainOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the validateDomain operation. */
export declare type ApiPortalsValidateDomainResponse = CustomDomainValidateResult;

/** Application Insights agent versions properties payload */
export declare interface ApplicationInsightsAgentVersions {
    /**
     * Indicates the version of application insight java agent
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly java?: string;
}

export declare class AppPlatformManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AppPlatformManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Gets subscription ID which uniquely identify the Microsoft Azure subscription.
     *                       The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AppPlatformManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    services: Services;
    configServers: ConfigServers;
    configurationServices: ConfigurationServices;
    serviceRegistries: ServiceRegistries;
    buildServiceOperations: BuildServiceOperations;
    buildpackBinding: BuildpackBinding;
    buildServiceBuilder: BuildServiceBuilder;
    buildServiceAgentPool: BuildServiceAgentPool;
    monitoringSettings: MonitoringSettings;
    apps: Apps;
    bindings: Bindings;
    storages: Storages;
    certificates: Certificates;
    customDomains: CustomDomains;
    deployments: Deployments;
    operations: Operations;
    runtimeVersions: RuntimeVersions;
    skus: Skus;
    gateways: Gateways;
    gatewayRouteConfigs: GatewayRouteConfigs;
    gatewayCustomDomains: GatewayCustomDomains;
    apiPortals: ApiPortals;
    apiPortalCustomDomains: ApiPortalCustomDomains;
}

/** Optional parameters. */
export declare interface AppPlatformManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** App resource payload */
export declare interface AppResource extends ProxyResource {
    /** Properties of the App resource */
    properties?: AppResourceProperties;
    /** The Managed Identity type of the app resource */
    identity?: ManagedIdentityProperties;
    /** The GEO location of the application, always the same with its parent resource */
    location?: string;
}

/** Object that includes an array of App resources and a possible link for next set */
export declare interface AppResourceCollection {
    /** Collection of App resources */
    value?: AppResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** App resource properties payload */
export declare interface AppResourceProperties {
    /** Indicates whether the App exposes public endpoint */
    public?: boolean;
    /**
     * URL of the App
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly url?: string;
    /** Collection of addons */
    addonConfigs?: {
        [propertyName: string]: {
            [propertyName: string]: Record<string, unknown>;
        };
    };
    /**
     * Provisioning state of the App
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: AppResourceProvisioningState;
    /**
     * Fully qualified dns Name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fqdn?: string;
    /** Indicate if only https is allowed. */
    httpsOnly?: boolean;
    /** Temporary disk settings */
    temporaryDisk?: TemporaryDisk;
    /** Persistent disk settings */
    persistentDisk?: PersistentDisk;
    /** List of custom persistent disks */
    customPersistentDisks?: CustomPersistentDiskResource[];
    /** Indicate if end to end TLS is enabled. */
    enableEndToEndTLS?: boolean;
    /** Collection of loaded certificates */
    loadedCertificates?: LoadedCertificate[];
    /** Additional App settings in vnet injection instance */
    vnetAddons?: AppVNetAddons;
    /** App ingress settings payload. */
    ingressSettings?: IngressSettings;
}

/**
 * Defines values for AppResourceProvisioningState. \
 * {@link KnownAppResourceProvisioningState} can be used interchangeably with AppResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Creating** \
 * **Updating** \
 * **Deleting**
 */
export declare type AppResourceProvisioningState = string;

/** Interface representing a Apps. */
export declare interface Apps {
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, options?: AppsListOptionalParams): PagedAsyncIterableIterator<AppResource>;
    /**
     * Get an App and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, appName: string, options?: AppsGetOptionalParams): Promise<AppsGetResponse>;
    /**
     * Create a new App or update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, appName: string, appResource: AppResource, options?: AppsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<AppsCreateOrUpdateResponse>, AppsCreateOrUpdateResponse>>;
    /**
     * Create a new App or update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, appName: string, appResource: AppResource, options?: AppsCreateOrUpdateOptionalParams): Promise<AppsCreateOrUpdateResponse>;
    /**
     * Operation to delete an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, appName: string, options?: AppsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Operation to delete an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, appName: string, options?: AppsDeleteOptionalParams): Promise<void>;
    /**
     * Operation to update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serviceName: string, appName: string, appResource: AppResource, options?: AppsUpdateOptionalParams): Promise<PollerLike<PollOperationState<AppsUpdateResponse>, AppsUpdateResponse>>;
    /**
     * Operation to update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serviceName: string, appName: string, appResource: AppResource, options?: AppsUpdateOptionalParams): Promise<AppsUpdateResponse>;
    /**
     * Get an resource upload URL for an App, which may be artifacts or source archive.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    getResourceUploadUrl(resourceGroupName: string, serviceName: string, appName: string, options?: AppsGetResourceUploadUrlOptionalParams): Promise<AppsGetResourceUploadUrlResponse>;
    /**
     * Set existing Deployment under the app as active
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param activeDeploymentCollection A list of Deployment name to be active.
     * @param options The options parameters.
     */
    beginSetActiveDeployments(resourceGroupName: string, serviceName: string, appName: string, activeDeploymentCollection: ActiveDeploymentCollection, options?: AppsSetActiveDeploymentsOptionalParams): Promise<PollerLike<PollOperationState<AppsSetActiveDeploymentsResponse>, AppsSetActiveDeploymentsResponse>>;
    /**
     * Set existing Deployment under the app as active
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param activeDeploymentCollection A list of Deployment name to be active.
     * @param options The options parameters.
     */
    beginSetActiveDeploymentsAndWait(resourceGroupName: string, serviceName: string, appName: string, activeDeploymentCollection: ActiveDeploymentCollection, options?: AppsSetActiveDeploymentsOptionalParams): Promise<AppsSetActiveDeploymentsResponse>;
    /**
     * Check the resource name is valid as well as not in use.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param validatePayload Custom domain payload to be validated
     * @param options The options parameters.
     */
    validateDomain(resourceGroupName: string, serviceName: string, appName: string, validatePayload: CustomDomainValidatePayload, options?: AppsValidateDomainOptionalParams): Promise<AppsValidateDomainResponse>;
}

/** Optional parameters. */
export declare interface AppsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type AppsCreateOrUpdateResponse = AppResource;

/** Optional parameters. */
export declare interface AppsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AppsGetOptionalParams extends coreClient.OperationOptions {
    /** Indicates whether sync status */
    syncStatus?: string;
}

/** Optional parameters. */
export declare interface AppsGetResourceUploadUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getResourceUploadUrl operation. */
export declare type AppsGetResourceUploadUrlResponse = ResourceUploadDefinition;

/** Contains response data for the get operation. */
export declare type AppsGetResponse = AppResource;

/** Optional parameters. */
export declare interface AppsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AppsListNextResponse = AppResourceCollection;

/** Optional parameters. */
export declare interface AppsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AppsListResponse = AppResourceCollection;

/** Optional parameters. */
export declare interface AppsSetActiveDeploymentsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the setActiveDeployments operation. */
export declare type AppsSetActiveDeploymentsResponse = AppResource;

/** Optional parameters. */
export declare interface AppsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type AppsUpdateResponse = AppResource;

/** Optional parameters. */
export declare interface AppsValidateDomainOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the validateDomain operation. */
export declare type AppsValidateDomainResponse = CustomDomainValidateResult;

/** Additional App settings in vnet injection instance */
export declare interface AppVNetAddons {
    /** Indicates whether the App in vnet injection instance exposes endpoint which could be accessed from internet. */
    publicEndpoint?: boolean;
    /**
     * URL of the App in vnet injection instance which could be accessed from internet
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicEndpointUrl?: string;
}

/** Available operations of the service */
export declare interface AvailableOperations {
    /** Collection of available operation details */
    value?: OperationDetail[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

export declare interface AvailableRuntimeVersions {
    /**
     * A list of all supported runtime versions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SupportedRuntimeVersion[];
}

/** The properties of the Azure File volume. Azure File shares are mounted as volumes. */
export declare interface AzureFileVolume extends CustomPersistentDiskProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureFileVolume";
    /** The share name of the Azure File share. */
    shareName: string;
}

/**
 * Defines values for BackendProtocol. \
 * {@link KnownBackendProtocol} can be used interchangeably with BackendProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GRPC** \
 * **Default**
 */
export declare type BackendProtocol = string;

/** Binding resource payload */
export declare interface BindingResource extends ProxyResource {
    /** Properties of the Binding resource */
    properties?: BindingResourceProperties;
}

/** Object that includes an array of Binding resources and a possible link for next set */
export declare interface BindingResourceCollection {
    /** Collection of Binding resources */
    value?: BindingResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Binding resource properties payload */
export declare interface BindingResourceProperties {
    /**
     * The name of the bound resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceName?: string;
    /**
     * The standard Azure resource type of the bound resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceType?: string;
    /** The Azure resource id of the bound resource */
    resourceId?: string;
    /** The key of the bound resource */
    key?: string;
    /** Binding parameters of the Binding resource */
    bindingParameters?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /**
     * The generated Spring Boot property file for this binding. The secret will be deducted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly generatedProperties?: string;
    /**
     * Creation time of the Binding resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAt?: string;
    /**
     * Update time of the Binding resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedAt?: string;
}

/** Interface representing a Bindings. */
export declare interface Bindings {
    /**
     * Handles requests to list all resources in an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, appName: string, options?: BindingsListOptionalParams): PagedAsyncIterableIterator<BindingResource>;
    /**
     * Get a Binding and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, options?: BindingsGetOptionalParams): Promise<BindingsGetResponse>;
    /**
     * Create a new Binding or update an exiting Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param bindingResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, bindingResource: BindingResource, options?: BindingsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<BindingsCreateOrUpdateResponse>, BindingsCreateOrUpdateResponse>>;
    /**
     * Create a new Binding or update an exiting Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param bindingResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, bindingResource: BindingResource, options?: BindingsCreateOrUpdateOptionalParams): Promise<BindingsCreateOrUpdateResponse>;
    /**
     * Operation to delete a Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, options?: BindingsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Operation to delete a Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, options?: BindingsDeleteOptionalParams): Promise<void>;
    /**
     * Operation to update an exiting Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param bindingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, bindingResource: BindingResource, options?: BindingsUpdateOptionalParams): Promise<PollerLike<PollOperationState<BindingsUpdateResponse>, BindingsUpdateResponse>>;
    /**
     * Operation to update an exiting Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param bindingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serviceName: string, appName: string, bindingName: string, bindingResource: BindingResource, options?: BindingsUpdateOptionalParams): Promise<BindingsUpdateResponse>;
}

/** Optional parameters. */
export declare interface BindingsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type BindingsCreateOrUpdateResponse = BindingResource;

/** Optional parameters. */
export declare interface BindingsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface BindingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BindingsGetResponse = BindingResource;

/** Optional parameters. */
export declare interface BindingsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type BindingsListNextResponse = BindingResourceCollection;

/** Optional parameters. */
export declare interface BindingsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type BindingsListResponse = BindingResourceCollection;

/** Optional parameters. */
export declare interface BindingsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type BindingsUpdateResponse = BindingResource;

/**
 * Defines values for BindingType. \
 * {@link KnownBindingType} can be used interchangeably with BindingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ApplicationInsights** \
 * **ApacheSkyWalking** \
 * **AppDynamics** \
 * **Dynatrace** \
 * **NewRelic** \
 * **ElasticAPM**
 */
export declare type BindingType = string;

/** Build resource payload */
export declare interface Build extends ProxyResource {
    /** Properties of the build resource */
    properties?: BuildProperties;
}

/** Object that includes an array of Build resources and a possible link for next set */
export declare interface BuildCollection {
    /** Collection of Build resources */
    value?: Build[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** KPack Builder properties payload */
export declare interface BuilderProperties {
    /**
     * Builder provision status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: BuilderProvisioningState;
    /** Builder cluster stack property. */
    stack?: StackProperties;
    /** Builder buildpack groups. */
    buildpackGroups?: BuildpacksGroupProperties[];
}

/**
 * Defines values for BuilderProvisioningState. \
 * {@link KnownBuilderProvisioningState} can be used interchangeably with BuilderProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export declare type BuilderProvisioningState = string;

/** KPack Builder resource */
export declare interface BuilderResource extends ProxyResource {
    /** Property of the Builder resource. */
    properties?: BuilderProperties;
}

/** Object that includes an array of Builder resources and a possible link for next set */
export declare interface BuilderResourceCollection {
    /** Collection of Builder resources */
    value?: BuilderResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Interface representing a BuildpackBinding. */
export declare interface BuildpackBinding {
    /**
     * Handles requests to list all buildpack bindings in a builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, buildServiceName: string, builderName: string, options?: BuildpackBindingListOptionalParams): PagedAsyncIterableIterator<BuildpackBindingResource>;
    /**
     * Get a buildpack binding by name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, buildServiceName: string, builderName: string, buildpackBindingName: string, options?: BuildpackBindingGetOptionalParams): Promise<BuildpackBindingGetResponse>;
    /**
     * Create or update a buildpack binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param buildpackBinding The target buildpack binding for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, buildServiceName: string, builderName: string, buildpackBindingName: string, buildpackBinding: BuildpackBindingResource, options?: BuildpackBindingCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<BuildpackBindingCreateOrUpdateResponse>, BuildpackBindingCreateOrUpdateResponse>>;
    /**
     * Create or update a buildpack binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param buildpackBinding The target buildpack binding for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, buildServiceName: string, builderName: string, buildpackBindingName: string, buildpackBinding: BuildpackBindingResource, options?: BuildpackBindingCreateOrUpdateOptionalParams): Promise<BuildpackBindingCreateOrUpdateResponse>;
    /**
     * Operation to delete a Buildpack Binding
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, buildServiceName: string, builderName: string, buildpackBindingName: string, options?: BuildpackBindingDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Operation to delete a Buildpack Binding
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, buildServiceName: string, builderName: string, buildpackBindingName: string, options?: BuildpackBindingDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface BuildpackBindingCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type BuildpackBindingCreateOrUpdateResponse = BuildpackBindingResource;

/** Optional parameters. */
export declare interface BuildpackBindingDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface BuildpackBindingGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BuildpackBindingGetResponse = BuildpackBindingResource;

/** Buildpack Binding Launch Properties */
export declare interface BuildpackBindingLaunchProperties {
    /** Non-sensitive properties for launchProperties */
    properties?: {
        [propertyName: string]: string;
    };
    /** Sensitive properties for launchProperties */
    secrets?: {
        [propertyName: string]: string;
    };
}

/** Optional parameters. */
export declare interface BuildpackBindingListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type BuildpackBindingListNextResponse = BuildpackBindingResourceCollection;

/** Optional parameters. */
export declare interface BuildpackBindingListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type BuildpackBindingListResponse = BuildpackBindingResourceCollection;

/** Properties of a buildpack binding */
export declare interface BuildpackBindingProperties {
    /** Buildpack Binding Type */
    bindingType?: BindingType;
    /**
     * State of the Buildpack Binding.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: BuildpackBindingProvisioningState;
    /** The object describes the buildpack binding launch properties */
    launchProperties?: BuildpackBindingLaunchProperties;
}

/**
 * Defines values for BuildpackBindingProvisioningState. \
 * {@link KnownBuildpackBindingProvisioningState} can be used interchangeably with BuildpackBindingProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export declare type BuildpackBindingProvisioningState = string;

/** Buildpack Binding Resource object */
export declare interface BuildpackBindingResource extends ProxyResource {
    /** Properties of a buildpack binding */
    properties?: BuildpackBindingProperties;
}

/** Object that includes an array of BuildpackBinding resources and a possible link for next set */
export declare interface BuildpackBindingResourceCollection {
    /** Collection of BuildpackBinding resources */
    value?: BuildpackBindingResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Buildpack properties payload */
export declare interface BuildpackProperties {
    /** Id of the buildpack */
    id?: string;
}

/** Buildpack group properties of the Builder */
export declare interface BuildpacksGroupProperties {
    /** Buildpack group name */
    name?: string;
    /** Buildpacks in the buildpack group */
    buildpacks?: BuildpackProperties[];
}

/** Build resource properties payload */
export declare interface BuildProperties {
    /** The relative path of source code */
    relativePath?: string;
    /** The resource id of builder to build the source code */
    builder?: string;
    /** The resource id of agent pool */
    agentPool?: string;
    /**
     * Provisioning state of the KPack build result
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: BuildProvisioningState;
    /** The environment variables for this build */
    env?: {
        [propertyName: string]: string;
    };
    /**
     *  The build result triggered by this build
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly triggeredBuildResult?: TriggeredBuildResult;
    /** The customized build resource for this build */
    resourceRequests?: BuildResourceRequests;
}

/**
 * Defines values for BuildProvisioningState. \
 * {@link KnownBuildProvisioningState} can be used interchangeably with BuildProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export declare type BuildProvisioningState = string;

/** Resource request payload of Build Resource. */
export declare interface BuildResourceRequests {
    /**
     * Optional Cpu allocated to the build resource. 1 core can be represented by 1 or 1000m.
     * The default value is 1, this should not exceed build service agent pool cpu size.
     */
    cpu?: string;
    /**
     * Optional Memory allocated to the build resource. 1 GB can be represented by 1Gi or 1024Mi.
     * The default value is 2Gi, this should not exceed build service agent pool memory size.
     */
    memory?: string;
}

/** Build result resource payload */
export declare interface BuildResult extends ProxyResource {
    /** Properties of the build result resource */
    properties?: BuildResultProperties;
}

/** Object that includes an array of Build result resources and a possible link for next set */
export declare interface BuildResultCollection {
    /** Collection of Build result resources */
    value?: BuildResult[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Build result log resource properties payload */
export declare interface BuildResultLog {
    /** The public download URL of this build result log */
    blobUrl?: string;
}

/** Build result resource properties payload */
export declare interface BuildResultProperties {
    /** The name of this build result */
    name?: string;
    /**
     * Provisioning state of the KPack build result
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: BuildResultProvisioningState;
    /** The build pod name which can be used to get the build log streaming. */
    buildPodName?: string;
    /**
     * All of the build stage (init-container and container) resources in build pod.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly buildStages?: BuildStageProperties[];
}

/**
 * Defines values for BuildResultProvisioningState. \
 * {@link KnownBuildResultProvisioningState} can be used interchangeably with BuildResultProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Queuing** \
 * **Building** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export declare type BuildResultProvisioningState = string;

/** Reference to a build result */
export declare interface BuildResultUserSourceInfo extends UserSourceInfo {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "BuildResult";
    /** Resource id of an existing succeeded build result under the same Spring instance. */
    buildResultId?: string;
}

/** Build service resource payload */
export declare interface BuildService extends ProxyResource {
    /** Properties of the build resource */
    properties?: BuildServiceProperties;
}

/** Interface representing a BuildServiceAgentPool. */
export declare interface BuildServiceAgentPool {
    /**
     * List build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, buildServiceName: string, options?: BuildServiceAgentPoolListOptionalParams): PagedAsyncIterableIterator<BuildServiceAgentPoolResource>;
    /**
     * Get build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param agentPoolName The name of the build service agent pool resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, buildServiceName: string, agentPoolName: string, options?: BuildServiceAgentPoolGetOptionalParams): Promise<BuildServiceAgentPoolGetResponse>;
    /**
     * Create or update build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param agentPoolName The name of the build service agent pool resource.
     * @param agentPoolResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePut(resourceGroupName: string, serviceName: string, buildServiceName: string, agentPoolName: string, agentPoolResource: BuildServiceAgentPoolResource, options?: BuildServiceAgentPoolUpdatePutOptionalParams): Promise<PollerLike<PollOperationState<BuildServiceAgentPoolUpdatePutResponse>, BuildServiceAgentPoolUpdatePutResponse>>;
    /**
     * Create or update build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param agentPoolName The name of the build service agent pool resource.
     * @param agentPoolResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePutAndWait(resourceGroupName: string, serviceName: string, buildServiceName: string, agentPoolName: string, agentPoolResource: BuildServiceAgentPoolResource, options?: BuildServiceAgentPoolUpdatePutOptionalParams): Promise<BuildServiceAgentPoolUpdatePutResponse>;
}

/** Optional parameters. */
export declare interface BuildServiceAgentPoolGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BuildServiceAgentPoolGetResponse = BuildServiceAgentPoolResource;

/** Optional parameters. */
export declare interface BuildServiceAgentPoolListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type BuildServiceAgentPoolListNextResponse = BuildServiceAgentPoolResourceCollection;

/** Optional parameters. */
export declare interface BuildServiceAgentPoolListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type BuildServiceAgentPoolListResponse = BuildServiceAgentPoolResourceCollection;

/** Build service agent pool properties */
export declare interface BuildServiceAgentPoolProperties {
    /**
     * Provisioning state of the build service agent pool
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** build service agent pool size properties */
    poolSize?: BuildServiceAgentPoolSizeProperties;
}

/** The build service agent pool resource */
export declare interface BuildServiceAgentPoolResource extends ProxyResource {
    /** build service agent pool properties */
    properties?: BuildServiceAgentPoolProperties;
}

/** Object that includes an array of build service agent pool resources and a possible link for next set */
export declare interface BuildServiceAgentPoolResourceCollection {
    /** Collection of build service agent pool resource */
    value?: BuildServiceAgentPoolResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Build service agent pool size properties */
export declare interface BuildServiceAgentPoolSizeProperties {
    /** The name of build service agent pool size */
    name?: string;
    /**
     * The cpu property of build service agent pool size
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cpu?: string;
    /**
     * The memory property of build service agent pool size
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly memory?: string;
}

/** Optional parameters. */
export declare interface BuildServiceAgentPoolUpdatePutOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updatePut operation. */
export declare type BuildServiceAgentPoolUpdatePutResponse = BuildServiceAgentPoolResource;

/** Interface representing a BuildServiceBuilder. */
export declare interface BuildServiceBuilder {
    /**
     * List KPack builders result.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, buildServiceName: string, options?: BuildServiceBuilderListOptionalParams): PagedAsyncIterableIterator<BuilderResource>;
    /**
     * Get a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, buildServiceName: string, builderName: string, options?: BuildServiceBuilderGetOptionalParams): Promise<BuildServiceBuilderGetResponse>;
    /**
     * Create or update a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param builderResource The target builder for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, buildServiceName: string, builderName: string, builderResource: BuilderResource, options?: BuildServiceBuilderCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<BuildServiceBuilderCreateOrUpdateResponse>, BuildServiceBuilderCreateOrUpdateResponse>>;
    /**
     * Create or update a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param builderResource The target builder for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, buildServiceName: string, builderName: string, builderResource: BuilderResource, options?: BuildServiceBuilderCreateOrUpdateOptionalParams): Promise<BuildServiceBuilderCreateOrUpdateResponse>;
    /**
     * Delete a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, buildServiceName: string, builderName: string, options?: BuildServiceBuilderDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, buildServiceName: string, builderName: string, options?: BuildServiceBuilderDeleteOptionalParams): Promise<void>;
    /**
     * List deployments that are using the builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    listDeployments(resourceGroupName: string, serviceName: string, buildServiceName: string, builderName: string, options?: BuildServiceBuilderListDeploymentsOptionalParams): Promise<BuildServiceBuilderListDeploymentsResponse>;
}

/** Optional parameters. */
export declare interface BuildServiceBuilderCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type BuildServiceBuilderCreateOrUpdateResponse = BuilderResource;

/** Optional parameters. */
export declare interface BuildServiceBuilderDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface BuildServiceBuilderGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BuildServiceBuilderGetResponse = BuilderResource;

/** Optional parameters. */
export declare interface BuildServiceBuilderListDeploymentsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDeployments operation. */
export declare type BuildServiceBuilderListDeploymentsResponse = DeploymentList;

/** Optional parameters. */
export declare interface BuildServiceBuilderListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type BuildServiceBuilderListNextResponse = BuilderResourceCollection;

/** Optional parameters. */
export declare interface BuildServiceBuilderListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type BuildServiceBuilderListResponse = BuilderResourceCollection;

/** Object that includes an array of Build service resources and a possible link for next set */
export declare interface BuildServiceCollection {
    /** Collection of Build service resources */
    value?: BuildService[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface BuildServiceCreateOrUpdateBuildOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateBuild operation. */
export declare type BuildServiceCreateOrUpdateBuildResponse = Build;

/** Optional parameters. */
export declare interface BuildServiceGetBuildOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getBuild operation. */
export declare type BuildServiceGetBuildResponse = Build;

/** Optional parameters. */
export declare interface BuildServiceGetBuildResultLogOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getBuildResultLog operation. */
export declare type BuildServiceGetBuildResultLogResponse = BuildResultLog;

/** Optional parameters. */
export declare interface BuildServiceGetBuildResultOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getBuildResult operation. */
export declare type BuildServiceGetBuildResultResponse = BuildResult;

/** Optional parameters. */
export declare interface BuildServiceGetBuildServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getBuildService operation. */
export declare type BuildServiceGetBuildServiceResponse = BuildService;

/** Optional parameters. */
export declare interface BuildServiceGetResourceUploadUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getResourceUploadUrl operation. */
export declare type BuildServiceGetResourceUploadUrlResponse = ResourceUploadDefinition;

/** Optional parameters. */
export declare interface BuildServiceGetSupportedBuildpackOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSupportedBuildpack operation. */
export declare type BuildServiceGetSupportedBuildpackResponse = SupportedBuildpackResource;

/** Optional parameters. */
export declare interface BuildServiceGetSupportedStackOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSupportedStack operation. */
export declare type BuildServiceGetSupportedStackResponse = SupportedStackResource;

/** Optional parameters. */
export declare interface BuildServiceListBuildResultsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBuildResultsNext operation. */
export declare type BuildServiceListBuildResultsNextResponse = BuildResultCollection;

/** Optional parameters. */
export declare interface BuildServiceListBuildResultsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBuildResults operation. */
export declare type BuildServiceListBuildResultsResponse = BuildResultCollection;

/** Optional parameters. */
export declare interface BuildServiceListBuildServicesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBuildServicesNext operation. */
export declare type BuildServiceListBuildServicesNextResponse = BuildServiceCollection;

/** Optional parameters. */
export declare interface BuildServiceListBuildServicesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBuildServices operation. */
export declare type BuildServiceListBuildServicesResponse = BuildServiceCollection;

/** Optional parameters. */
export declare interface BuildServiceListBuildsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBuildsNext operation. */
export declare type BuildServiceListBuildsNextResponse = BuildCollection;

/** Optional parameters. */
export declare interface BuildServiceListBuildsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBuilds operation. */
export declare type BuildServiceListBuildsResponse = BuildCollection;

/** Optional parameters. */
export declare interface BuildServiceListSupportedBuildpacksOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSupportedBuildpacks operation. */
export declare type BuildServiceListSupportedBuildpacksResponse = SupportedBuildpacksCollection;

/** Optional parameters. */
export declare interface BuildServiceListSupportedStacksOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSupportedStacks operation. */
export declare type BuildServiceListSupportedStacksResponse = SupportedStacksCollection;

/** Interface representing a BuildServiceOperations. */
export declare interface BuildServiceOperations {
    /**
     * List build services resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    listBuildServices(resourceGroupName: string, serviceName: string, options?: BuildServiceListBuildServicesOptionalParams): PagedAsyncIterableIterator<BuildService>;
    /**
     * List KPack builds.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    listBuilds(resourceGroupName: string, serviceName: string, buildServiceName: string, options?: BuildServiceListBuildsOptionalParams): PagedAsyncIterableIterator<Build>;
    /**
     * List KPack build results.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    listBuildResults(resourceGroupName: string, serviceName: string, buildServiceName: string, buildName: string, options?: BuildServiceListBuildResultsOptionalParams): PagedAsyncIterableIterator<BuildResult>;
    /**
     * Get a build service resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    getBuildService(resourceGroupName: string, serviceName: string, buildServiceName: string, options?: BuildServiceGetBuildServiceOptionalParams): Promise<BuildServiceGetBuildServiceResponse>;
    /**
     * Get a KPack build.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    getBuild(resourceGroupName: string, serviceName: string, buildServiceName: string, buildName: string, options?: BuildServiceGetBuildOptionalParams): Promise<BuildServiceGetBuildResponse>;
    /**
     * Create or update a KPack build.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param build Parameters for the create or update operation
     * @param options The options parameters.
     */
    createOrUpdateBuild(resourceGroupName: string, serviceName: string, buildServiceName: string, buildName: string, build: Build, options?: BuildServiceCreateOrUpdateBuildOptionalParams): Promise<BuildServiceCreateOrUpdateBuildResponse>;
    /**
     * Get a KPack build result.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param buildResultName The name of the build result resource.
     * @param options The options parameters.
     */
    getBuildResult(resourceGroupName: string, serviceName: string, buildServiceName: string, buildName: string, buildResultName: string, options?: BuildServiceGetBuildResultOptionalParams): Promise<BuildServiceGetBuildResultResponse>;
    /**
     * Get a KPack build result log download URL.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param buildResultName The name of the build result resource.
     * @param options The options parameters.
     */
    getBuildResultLog(resourceGroupName: string, serviceName: string, buildServiceName: string, buildName: string, buildResultName: string, options?: BuildServiceGetBuildResultLogOptionalParams): Promise<BuildServiceGetBuildResultLogResponse>;
    /**
     * Get an resource upload URL for build service, which may be artifacts or source archive.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    getResourceUploadUrl(resourceGroupName: string, serviceName: string, buildServiceName: string, options?: BuildServiceGetResourceUploadUrlOptionalParams): Promise<BuildServiceGetResourceUploadUrlResponse>;
    /**
     * Get all supported buildpacks.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    listSupportedBuildpacks(resourceGroupName: string, serviceName: string, buildServiceName: string, options?: BuildServiceListSupportedBuildpacksOptionalParams): Promise<BuildServiceListSupportedBuildpacksResponse>;
    /**
     * Get the supported buildpack resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildpackName The name of the buildpack resource.
     * @param options The options parameters.
     */
    getSupportedBuildpack(resourceGroupName: string, serviceName: string, buildServiceName: string, buildpackName: string, options?: BuildServiceGetSupportedBuildpackOptionalParams): Promise<BuildServiceGetSupportedBuildpackResponse>;
    /**
     * Get all supported stacks.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    listSupportedStacks(resourceGroupName: string, serviceName: string, buildServiceName: string, options?: BuildServiceListSupportedStacksOptionalParams): Promise<BuildServiceListSupportedStacksResponse>;
    /**
     * Get the supported stack resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param stackName The name of the stack resource.
     * @param options The options parameters.
     */
    getSupportedStack(resourceGroupName: string, serviceName: string, buildServiceName: string, stackName: string, options?: BuildServiceGetSupportedStackOptionalParams): Promise<BuildServiceGetSupportedStackResponse>;
}

/** Build service resource properties payload */
export declare interface BuildServiceProperties {
    /** The installed KPack version in this build service. */
    kPackVersion?: string;
    /**
     * Provisioning state of the KPack build result
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: BuildServiceProvisioningState;
    /** The runtime resource configuration of this build service. */
    resourceRequests?: BuildServicePropertiesResourceRequests;
}

/** The runtime resource configuration of this build service. */
export declare interface BuildServicePropertiesResourceRequests {
    /**
     * vCPU allocated to the entire build service node pool.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cpu?: string;
    /**
     * Memory allocated to the entire build service node pool.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly memory?: string;
}

/**
 * Defines values for BuildServiceProvisioningState. \
 * {@link KnownBuildServiceProvisioningState} can be used interchangeably with BuildServiceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export declare type BuildServiceProvisioningState = string;

/** The build stage (init-container and container) resources in build pod. */
export declare interface BuildStageProperties {
    /**
     * The name of this build stage resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The provisioning state of this build stage resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: KPackBuildStageProvisioningState;
}

/** Certificate resource payload. */
export declare interface CertificateProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "KeyVaultCertificate" | "ContentCertificate";
    /**
     * The thumbprint of certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly thumbprint?: string;
    /**
     * The issuer of certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly issuer?: string;
    /**
     * The issue date of certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly issuedDate?: string;
    /**
     * The expiration date of certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expirationDate?: string;
    /**
     * The activate date of certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activateDate?: string;
    /**
     * The subject name of certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subjectName?: string;
    /**
     * The domain list of certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dnsNames?: string[];
    /**
     * Provisioning state of the Certificate
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: CertificateResourceProvisioningState;
}

export declare type CertificatePropertiesUnion = CertificateProperties | KeyVaultCertificateProperties | ContentCertificateProperties;

/** Certificate resource payload. */
export declare interface CertificateResource extends ProxyResource {
    /** Properties of the certificate resource payload. */
    properties?: CertificatePropertiesUnion;
}

/** Collection compose of certificate resources list and a possible link for next page. */
export declare interface CertificateResourceCollection {
    /** The certificate resources list. */
    value?: CertificateResource[];
    /** The link to next page of certificate list. */
    nextLink?: string;
}

/**
 * Defines values for CertificateResourceProvisioningState. \
 * {@link KnownCertificateResourceProvisioningState} can be used interchangeably with CertificateResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export declare type CertificateResourceProvisioningState = string;

/** Interface representing a Certificates. */
export declare interface Certificates {
    /**
     * List all the certificates of one user.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, options?: CertificatesListOptionalParams): PagedAsyncIterableIterator<CertificateResource>;
    /**
     * Get the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, certificateName: string, options?: CertificatesGetOptionalParams): Promise<CertificatesGetResponse>;
    /**
     * Create or update certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, certificateName: string, certificateResource: CertificateResource, options?: CertificatesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<CertificatesCreateOrUpdateResponse>, CertificatesCreateOrUpdateResponse>>;
    /**
     * Create or update certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, certificateName: string, certificateResource: CertificateResource, options?: CertificatesCreateOrUpdateOptionalParams): Promise<CertificatesCreateOrUpdateResponse>;
    /**
     * Delete the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, certificateName: string, options?: CertificatesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, certificateName: string, options?: CertificatesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface CertificatesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CertificatesCreateOrUpdateResponse = CertificateResource;

/** Optional parameters. */
export declare interface CertificatesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CertificatesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CertificatesGetResponse = CertificateResource;

/** Optional parameters. */
export declare interface CertificatesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CertificatesListNextResponse = CertificateResourceCollection;

/** Optional parameters. */
export declare interface CertificatesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type CertificatesListResponse = CertificateResourceCollection;

/** An error response from the service. */
export declare interface CloudError {
    /** An error response from the service. */
    error?: CloudErrorBody;
}

/** An error response from the service. */
export declare interface CloudErrorBody {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code?: string;
    /** A message describing the error, intended to be suitable for display in a user interface. */
    message?: string;
    /** The target of the particular error. For example, the name of the property in error. */
    target?: string;
    /** A list of additional details about the error. */
    details?: CloudErrorBody[];
}

/** Service properties payload */
export declare interface ClusterResourceProperties {
    /**
     * Provisioning state of the Service
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** Network profile of the Service */
    networkProfile?: NetworkProfile;
    /** Additional Service settings in vnet injection instance */
    vnetAddons?: ServiceVNetAddons;
    /**
     * Version of the Service
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: number;
    /**
     * ServiceInstanceEntity GUID which uniquely identifies a created resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceId?: string;
    /**
     * Power state of the Service
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly powerState?: PowerState;
    zoneRedundant?: boolean;
    /**
     * Fully qualified dns name of the service instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fqdn?: string;
    /** Purchasing 3rd party product of the Service resource. */
    marketplaceResource?: MarketplaceResource;
}

/** Property of git. */
export declare interface ConfigServerGitProperty {
    /** Repositories of git. */
    repositories?: GitPatternRepository[];
    /** URI of the repository */
    uri: string;
    /** Label of the repository */
    label?: string;
    /** Searching path of the repository */
    searchPaths?: string[];
    /** Username of git repository basic auth. */
    username?: string;
    /** Password of git repository basic auth. */
    password?: string;
    /** Public sshKey of git repository. */
    hostKey?: string;
    /** SshKey algorithm of git repository. */
    hostKeyAlgorithm?: string;
    /** Private sshKey algorithm of git repository. */
    privateKey?: string;
    /** Strict host key checking or not. */
    strictHostKeyChecking?: boolean;
}

/** Config server git properties payload */
export declare interface ConfigServerProperties {
    /**
     * State of the config server.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ConfigServerState;
    /** Error when apply config server settings. */
    error?: ErrorModel;
    /** Settings of config server. */
    configServer?: ConfigServerSettings;
}

/** Config Server resource */
export declare interface ConfigServerResource extends ProxyResource {
    /** Properties of the Config Server resource */
    properties?: ConfigServerProperties;
}

/** Interface representing a ConfigServers. */
export declare interface ConfigServers {
    /**
     * Get the config server and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, options?: ConfigServersGetOptionalParams): Promise<ConfigServersGetResponse>;
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePut(resourceGroupName: string, serviceName: string, configServerResource: ConfigServerResource, options?: ConfigServersUpdatePutOptionalParams): Promise<PollerLike<PollOperationState<ConfigServersUpdatePutResponse>, ConfigServersUpdatePutResponse>>;
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePutAndWait(resourceGroupName: string, serviceName: string, configServerResource: ConfigServerResource, options?: ConfigServersUpdatePutOptionalParams): Promise<ConfigServersUpdatePutResponse>;
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePatch(resourceGroupName: string, serviceName: string, configServerResource: ConfigServerResource, options?: ConfigServersUpdatePatchOptionalParams): Promise<PollerLike<PollOperationState<ConfigServersUpdatePatchResponse>, ConfigServersUpdatePatchResponse>>;
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePatchAndWait(resourceGroupName: string, serviceName: string, configServerResource: ConfigServerResource, options?: ConfigServersUpdatePatchOptionalParams): Promise<ConfigServersUpdatePatchResponse>;
    /**
     * Check if the config server settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerSettings Config server settings to be validated
     * @param options The options parameters.
     */
    beginValidate(resourceGroupName: string, serviceName: string, configServerSettings: ConfigServerSettings, options?: ConfigServersValidateOptionalParams): Promise<PollerLike<PollOperationState<ConfigServersValidateResponse>, ConfigServersValidateResponse>>;
    /**
     * Check if the config server settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerSettings Config server settings to be validated
     * @param options The options parameters.
     */
    beginValidateAndWait(resourceGroupName: string, serviceName: string, configServerSettings: ConfigServerSettings, options?: ConfigServersValidateOptionalParams): Promise<ConfigServersValidateResponse>;
}

/** The settings of config server. */
export declare interface ConfigServerSettings {
    /** Property of git environment. */
    gitProperty?: ConfigServerGitProperty;
}

/** Error record of the config server settings */
export declare interface ConfigServerSettingsErrorRecord {
    /** The name of the config server settings error record */
    name?: string;
    /** The uri of the config server settings error record */
    uri?: string;
    /** The detail error messages of the record */
    messages?: string[];
}

/** Validation result for config server settings */
export declare interface ConfigServerSettingsValidateResult {
    /** Indicate if the config server settings are valid */
    isValid?: boolean;
    /** The detail validation results */
    details?: ConfigServerSettingsErrorRecord[];
}

/** Optional parameters. */
export declare interface ConfigServersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConfigServersGetResponse = ConfigServerResource;

/**
 * Defines values for ConfigServerState. \
 * {@link KnownConfigServerState} can be used interchangeably with ConfigServerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotAvailable** \
 * **Deleted** \
 * **Failed** \
 * **Succeeded** \
 * **Updating**
 */
export declare type ConfigServerState = string;

/** Optional parameters. */
export declare interface ConfigServersUpdatePatchOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updatePatch operation. */
export declare type ConfigServersUpdatePatchResponse = ConfigServerResource;

/** Optional parameters. */
export declare interface ConfigServersUpdatePutOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updatePut operation. */
export declare type ConfigServersUpdatePutResponse = ConfigServerResource;

/** Optional parameters. */
export declare interface ConfigServersValidateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the validate operation. */
export declare type ConfigServersValidateResponse = ConfigServerSettingsValidateResult;

/** Property of git environment. */
export declare interface ConfigurationServiceGitProperty {
    /** Repositories of Application Configuration Service git property. */
    repositories?: ConfigurationServiceGitRepository[];
}

/** Validation result for configuration service settings */
export declare interface ConfigurationServiceGitPropertyValidateResult {
    /** Indicate if the configuration service settings are valid */
    isValid?: boolean;
    /** The detail validation results */
    gitReposValidationResult?: ValidationMessages[];
}

/** Git repository property payload for Application Configuration Service */
export declare interface ConfigurationServiceGitRepository {
    /** Name of the repository */
    name: string;
    /** Collection of patterns of the repository */
    patterns: string[];
    /** URI of the repository */
    uri: string;
    /** Label of the repository */
    label: string;
    /** Searching path of the repository */
    searchPaths?: string[];
    /** Username of git repository basic auth. */
    username?: string;
    /** Password of git repository basic auth. */
    password?: string;
    /** Public sshKey of git repository. */
    hostKey?: string;
    /** SshKey algorithm of git repository. */
    hostKeyAlgorithm?: string;
    /** Private sshKey algorithm of git repository. */
    privateKey?: string;
    /** Strict host key checking or not. */
    strictHostKeyChecking?: boolean;
}

/** Collection of instances belong to the Application Configuration Service */
export declare interface ConfigurationServiceInstance {
    /**
     * Name of the Application Configuration Service instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Status of the Application Configuration Service instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** Application Configuration Service properties payload */
export declare interface ConfigurationServiceProperties {
    /**
     * State of the Application Configuration Service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ConfigurationServiceProvisioningState;
    /**
     * The requested resource quantity for required CPU and Memory.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceRequests?: ConfigurationServiceResourceRequests;
    /**
     * Collection of instances belong to Application Configuration Service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instances?: ConfigurationServiceInstance[];
    /** The settings of Application Configuration Service. */
    settings?: ConfigurationServiceSettings;
}

/**
 * Defines values for ConfigurationServiceProvisioningState. \
 * {@link KnownConfigurationServiceProvisioningState} can be used interchangeably with ConfigurationServiceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export declare type ConfigurationServiceProvisioningState = string;

/** Application Configuration Service resource */
export declare interface ConfigurationServiceResource extends ProxyResource {
    /** Application Configuration Service properties payload */
    properties?: ConfigurationServiceProperties;
}

/** Object that includes an array of configuration service resources and a possible link for next set */
export declare interface ConfigurationServiceResourceCollection {
    /** Collection of configuration service resources */
    value?: ConfigurationServiceResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Resource request payload of Application Configuration Service */
export declare interface ConfigurationServiceResourceRequests {
    /**
     * Cpu allocated to each Application Configuration Service instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cpu?: string;
    /**
     * Memory allocated to each Application Configuration Service instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly memory?: string;
    /**
     * Instance count of the Application Configuration Service
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceCount?: number;
}

/** Interface representing a ConfigurationServices. */
export declare interface ConfigurationServices {
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, options?: ConfigurationServicesListOptionalParams): PagedAsyncIterableIterator<ConfigurationServiceResource>;
    /**
     * Get the Application Configuration Service and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, configurationServiceName: string, options?: ConfigurationServicesGetOptionalParams): Promise<ConfigurationServicesGetResponse>;
    /**
     * Create the default Application Configuration Service or update the existing Application
     * Configuration Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param configurationServiceResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, configurationServiceName: string, configurationServiceResource: ConfigurationServiceResource, options?: ConfigurationServicesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ConfigurationServicesCreateOrUpdateResponse>, ConfigurationServicesCreateOrUpdateResponse>>;
    /**
     * Create the default Application Configuration Service or update the existing Application
     * Configuration Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param configurationServiceResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, configurationServiceName: string, configurationServiceResource: ConfigurationServiceResource, options?: ConfigurationServicesCreateOrUpdateOptionalParams): Promise<ConfigurationServicesCreateOrUpdateResponse>;
    /**
     * Disable the default Application Configuration Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, configurationServiceName: string, options?: ConfigurationServicesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Disable the default Application Configuration Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, configurationServiceName: string, options?: ConfigurationServicesDeleteOptionalParams): Promise<void>;
    /**
     * Check if the Application Configuration Service settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param settings Application Configuration Service settings to be validated
     * @param options The options parameters.
     */
    beginValidate(resourceGroupName: string, serviceName: string, configurationServiceName: string, settings: ConfigurationServiceSettings, options?: ConfigurationServicesValidateOptionalParams): Promise<PollerLike<PollOperationState<ConfigurationServicesValidateResponse>, ConfigurationServicesValidateResponse>>;
    /**
     * Check if the Application Configuration Service settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param settings Application Configuration Service settings to be validated
     * @param options The options parameters.
     */
    beginValidateAndWait(resourceGroupName: string, serviceName: string, configurationServiceName: string, settings: ConfigurationServiceSettings, options?: ConfigurationServicesValidateOptionalParams): Promise<ConfigurationServicesValidateResponse>;
}

/** Optional parameters. */
export declare interface ConfigurationServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConfigurationServicesCreateOrUpdateResponse = ConfigurationServiceResource;

/** Optional parameters. */
export declare interface ConfigurationServicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** The settings of Application Configuration Service. */
export declare interface ConfigurationServiceSettings {
    /** Property of git environment. */
    gitProperty?: ConfigurationServiceGitProperty;
}

/** Validation result for configuration service settings */
export declare interface ConfigurationServiceSettingsValidateResult {
    /** Validation result for configuration service settings */
    gitPropertyValidationResult?: ConfigurationServiceGitPropertyValidateResult;
}

/** Optional parameters. */
export declare interface ConfigurationServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConfigurationServicesGetResponse = ConfigurationServiceResource;

/** Optional parameters. */
export declare interface ConfigurationServicesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ConfigurationServicesListNextResponse = ConfigurationServiceResourceCollection;

/** Optional parameters. */
export declare interface ConfigurationServicesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ConfigurationServicesListResponse = ConfigurationServiceResourceCollection;

/** Optional parameters. */
export declare interface ConfigurationServicesValidateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the validate operation. */
export declare type ConfigurationServicesValidateResponse = ConfigurationServiceSettingsValidateResult;

/** Container liveness and readiness probe settings */
export declare interface ContainerProbeSettings {
    /** Indicates whether disable the liveness and readiness probe */
    disableProbe?: boolean;
}

/** Properties of certificate imported from key vault. */
export declare interface ContentCertificateProperties extends CertificateProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ContentCertificate";
    /** The content of uploaded certificate. */
    content?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Custom container payload */
export declare interface CustomContainer {
    /** The name of the registry that contains the container image */
    server?: string;
    /** Container image of the custom container. This should be in the form of <repository>:<tag> without the server name of the registry */
    containerImage?: string;
    /** Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. */
    command?: string[];
    /** Arguments to the entrypoint. The docker image's CMD is used if this is not provided. */
    args?: string[];
    /** Credential of the image registry */
    imageRegistryCredential?: ImageRegistryCredential;
    /** Language framework of the container image uploaded */
    languageFramework?: string;
}

/** Custom container user source info */
export declare interface CustomContainerUserSourceInfo extends UserSourceInfo {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Container";
    /** Custom container payload */
    customContainer?: CustomContainer;
}

/** Custom domain of app resource payload. */
export declare interface CustomDomainProperties {
    /** The thumbprint of bound certificate. */
    thumbprint?: string;
    /**
     * The app name of domain.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly appName?: string;
    /** The bound certificate name of domain. */
    certName?: string;
    /**
     * Provisioning state of the Domain
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: CustomDomainResourceProvisioningState;
}

/** Custom domain resource payload. */
export declare interface CustomDomainResource extends ProxyResource {
    /** Properties of the custom domain resource. */
    properties?: CustomDomainProperties;
}

/** Collection compose of a custom domain resources list and a possible link for next page. */
export declare interface CustomDomainResourceCollection {
    /** The custom domain resources list. */
    value?: CustomDomainResource[];
    /** The link to next page of custom domain list. */
    nextLink?: string;
}

/**
 * Defines values for CustomDomainResourceProvisioningState. \
 * {@link KnownCustomDomainResourceProvisioningState} can be used interchangeably with CustomDomainResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export declare type CustomDomainResourceProvisioningState = string;

/** Interface representing a CustomDomains. */
export declare interface CustomDomains {
    /**
     * List the custom domains of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, appName: string, options?: CustomDomainsListOptionalParams): PagedAsyncIterableIterator<CustomDomainResource>;
    /**
     * Get the custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, appName: string, domainName: string, options?: CustomDomainsGetOptionalParams): Promise<CustomDomainsGetResponse>;
    /**
     * Create or update custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param domainResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, appName: string, domainName: string, domainResource: CustomDomainResource, options?: CustomDomainsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<CustomDomainsCreateOrUpdateResponse>, CustomDomainsCreateOrUpdateResponse>>;
    /**
     * Create or update custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param domainResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, appName: string, domainName: string, domainResource: CustomDomainResource, options?: CustomDomainsCreateOrUpdateOptionalParams): Promise<CustomDomainsCreateOrUpdateResponse>;
    /**
     * Delete the custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, appName: string, domainName: string, options?: CustomDomainsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete the custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, appName: string, domainName: string, options?: CustomDomainsDeleteOptionalParams): Promise<void>;
    /**
     * Update custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param domainResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serviceName: string, appName: string, domainName: string, domainResource: CustomDomainResource, options?: CustomDomainsUpdateOptionalParams): Promise<PollerLike<PollOperationState<CustomDomainsUpdateResponse>, CustomDomainsUpdateResponse>>;
    /**
     * Update custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param domainResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serviceName: string, appName: string, domainName: string, domainResource: CustomDomainResource, options?: CustomDomainsUpdateOptionalParams): Promise<CustomDomainsUpdateResponse>;
}

/** Optional parameters. */
export declare interface CustomDomainsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CustomDomainsCreateOrUpdateResponse = CustomDomainResource;

/** Optional parameters. */
export declare interface CustomDomainsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CustomDomainsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CustomDomainsGetResponse = CustomDomainResource;

/** Optional parameters. */
export declare interface CustomDomainsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CustomDomainsListNextResponse = CustomDomainResourceCollection;

/** Optional parameters. */
export declare interface CustomDomainsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type CustomDomainsListResponse = CustomDomainResourceCollection;

/** Optional parameters. */
export declare interface CustomDomainsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type CustomDomainsUpdateResponse = CustomDomainResource;

/** Custom domain validate payload. */
export declare interface CustomDomainValidatePayload {
    /** Name to be validated */
    name: string;
}

/** Validation result for custom domain. */
export declare interface CustomDomainValidateResult {
    /** Indicates if domain name is valid. */
    isValid?: boolean;
    /** Message of why domain name is invalid. */
    message?: string;
}

/** Custom persistent disk resource payload. */
export declare interface CustomPersistentDiskProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "AzureFileVolume";
    /** The mount path of the persistent disk. */
    mountPath: string;
    /** Indicates whether the persistent disk is a readOnly one. */
    readOnly?: boolean;
    /** These are the mount options for a persistent disk. */
    mountOptions?: string[];
}

export declare type CustomPersistentDiskPropertiesUnion = CustomPersistentDiskProperties | AzureFileVolume;

/** Custom persistent disk resource payload. */
export declare interface CustomPersistentDiskResource {
    /** Properties of the custom persistent disk resource payload. */
    customPersistentDiskProperties?: CustomPersistentDiskPropertiesUnion;
    /** The resource id of Azure Spring Apps Storage resource. */
    storageId: string;
}

/** Deployment instance payload */
export declare interface DeploymentInstance {
    /**
     * Name of the deployment instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Status of the deployment instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * Failed reason of the deployment instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reason?: string;
    /**
     * Discovery status of the deployment instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly discoveryStatus?: string;
    /**
     * Start time of the deployment instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: string;
    /**
     * Availability zone information of the deployment instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zone?: string;
}

/** A list of deployments resource ids. */
export declare interface DeploymentList {
    /** A list of deployment resource ids. */
    deployments?: string[];
}

/** Deployment resource payload */
export declare interface DeploymentResource extends ProxyResource {
    /** Properties of the Deployment resource */
    properties?: DeploymentResourceProperties;
    /** Sku of the Deployment resource */
    sku?: Sku;
}

/** Object that includes an array of App resources and a possible link for next set */
export declare interface DeploymentResourceCollection {
    /** Collection of Deployment resources */
    value?: DeploymentResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Deployment resource properties payload */
export declare interface DeploymentResourceProperties {
    /** Uploaded source information of the deployment. */
    source?: UserSourceInfoUnion;
    /** Deployment settings of the Deployment */
    deploymentSettings?: DeploymentSettings;
    /**
     * Provisioning state of the Deployment
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: DeploymentResourceProvisioningState;
    /**
     * Status of the Deployment
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: DeploymentResourceStatus;
    /** Indicates whether the Deployment is active */
    active?: boolean;
    /**
     * Collection of instances belong to the Deployment
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instances?: DeploymentInstance[];
}

/**
 * Defines values for DeploymentResourceProvisioningState. \
 * {@link KnownDeploymentResourceProvisioningState} can be used interchangeably with DeploymentResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed**
 */
export declare type DeploymentResourceProvisioningState = string;

/**
 * Defines values for DeploymentResourceStatus. \
 * {@link KnownDeploymentResourceStatus} can be used interchangeably with DeploymentResourceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Stopped** \
 * **Running**
 */
export declare type DeploymentResourceStatus = string;

/** Interface representing a Deployments. */
export declare interface Deployments {
    /**
     * Handles requests to list all resources in an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, appName: string, options?: DeploymentsListOptionalParams): PagedAsyncIterableIterator<DeploymentResource>;
    /**
     * List deployments for a certain service
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    listForCluster(resourceGroupName: string, serviceName: string, options?: DeploymentsListForClusterOptionalParams): PagedAsyncIterableIterator<DeploymentResource>;
    /**
     * Get a Deployment and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsGetOptionalParams): Promise<DeploymentsGetResponse>;
    /**
     * Create a new Deployment or update an exiting Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param deploymentResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, deploymentResource: DeploymentResource, options?: DeploymentsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DeploymentsCreateOrUpdateResponse>, DeploymentsCreateOrUpdateResponse>>;
    /**
     * Create a new Deployment or update an exiting Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param deploymentResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, deploymentResource: DeploymentResource, options?: DeploymentsCreateOrUpdateOptionalParams): Promise<DeploymentsCreateOrUpdateResponse>;
    /**
     * Operation to delete a Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Operation to delete a Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsDeleteOptionalParams): Promise<void>;
    /**
     * Operation to update an exiting Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param deploymentResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, deploymentResource: DeploymentResource, options?: DeploymentsUpdateOptionalParams): Promise<PollerLike<PollOperationState<DeploymentsUpdateResponse>, DeploymentsUpdateResponse>>;
    /**
     * Operation to update an exiting Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param deploymentResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, deploymentResource: DeploymentResource, options?: DeploymentsUpdateOptionalParams): Promise<DeploymentsUpdateResponse>;
    /**
     * Start the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Start the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsStartOptionalParams): Promise<void>;
    /**
     * Stop the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Stop the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsStopOptionalParams): Promise<void>;
    /**
     * Restart the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restart the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsRestartOptionalParams): Promise<void>;
    /**
     * Enable remote debugging.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginEnableRemoteDebugging(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsEnableRemoteDebuggingOptionalParams): Promise<PollerLike<PollOperationState<DeploymentsEnableRemoteDebuggingResponse>, DeploymentsEnableRemoteDebuggingResponse>>;
    /**
     * Enable remote debugging.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginEnableRemoteDebuggingAndWait(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsEnableRemoteDebuggingOptionalParams): Promise<DeploymentsEnableRemoteDebuggingResponse>;
    /**
     * Disable remote debugging.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginDisableRemoteDebugging(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsDisableRemoteDebuggingOptionalParams): Promise<PollerLike<PollOperationState<DeploymentsDisableRemoteDebuggingResponse>, DeploymentsDisableRemoteDebuggingResponse>>;
    /**
     * Disable remote debugging.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginDisableRemoteDebuggingAndWait(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsDisableRemoteDebuggingOptionalParams): Promise<DeploymentsDisableRemoteDebuggingResponse>;
    /**
     * Get remote debugging config.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    getRemoteDebuggingConfig(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsGetRemoteDebuggingConfigOptionalParams): Promise<DeploymentsGetRemoteDebuggingConfigResponse>;
    /**
     * Get deployment log file URL
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    getLogFileUrl(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, options?: DeploymentsGetLogFileUrlOptionalParams): Promise<DeploymentsGetLogFileUrlResponse>;
    /**
     * Generate Heap Dump
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginGenerateHeapDump(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, diagnosticParameters: DiagnosticParameters, options?: DeploymentsGenerateHeapDumpOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Generate Heap Dump
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginGenerateHeapDumpAndWait(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, diagnosticParameters: DiagnosticParameters, options?: DeploymentsGenerateHeapDumpOptionalParams): Promise<void>;
    /**
     * Generate Thread Dump
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginGenerateThreadDump(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, diagnosticParameters: DiagnosticParameters, options?: DeploymentsGenerateThreadDumpOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Generate Thread Dump
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginGenerateThreadDumpAndWait(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, diagnosticParameters: DiagnosticParameters, options?: DeploymentsGenerateThreadDumpOptionalParams): Promise<void>;
    /**
     * Start JFR
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginStartJFR(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, diagnosticParameters: DiagnosticParameters, options?: DeploymentsStartJFROptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Start JFR
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginStartJFRAndWait(resourceGroupName: string, serviceName: string, appName: string, deploymentName: string, diagnosticParameters: DiagnosticParameters, options?: DeploymentsStartJFROptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface DeploymentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DeploymentsCreateOrUpdateResponse = DeploymentResource;

/** Optional parameters. */
export declare interface DeploymentsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DeploymentsDisableRemoteDebuggingOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the disableRemoteDebugging operation. */
export declare type DeploymentsDisableRemoteDebuggingResponse = RemoteDebugging;

/** Optional parameters. */
export declare interface DeploymentsEnableRemoteDebuggingOptionalParams extends coreClient.OperationOptions {
    /** Parameters for enable remote debugging */
    remoteDebuggingPayload?: RemoteDebuggingPayload;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the enableRemoteDebugging operation. */
export declare type DeploymentsEnableRemoteDebuggingResponse = RemoteDebugging;

/** Deployment settings payload */
export declare interface DeploymentSettings {
    /** The requested resource quantity for required CPU and Memory. It is recommended that using this field to represent the required CPU and Memory, the old field cpu and memoryInGB will be deprecated later. */
    resourceRequests?: ResourceRequests;
    /** Collection of environment variables */
    environmentVariables?: {
        [propertyName: string]: string;
    };
    /** Collection of addons */
    addonConfigs?: {
        [propertyName: string]: {
            [propertyName: string]: Record<string, unknown>;
        };
    };
    /** Periodic probe of App Instance liveness. App Instance will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
    livenessProbe?: Probe;
    /** Periodic probe of App Instance service readiness. App Instance will be removed from service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
    readinessProbe?: Probe;
    /** StartupProbe indicates that the App Instance has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a App Instance's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
    startupProbe?: Probe;
    /** Optional duration in seconds the App Instance needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the App Instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 90 seconds. */
    terminationGracePeriodSeconds?: number;
    /** Container liveness and readiness probe settings */
    containerProbeSettings?: ContainerProbeSettings;
}

/** Optional parameters. */
export declare interface DeploymentsGenerateHeapDumpOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DeploymentsGenerateThreadDumpOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DeploymentsGetLogFileUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getLogFileUrl operation. */
export declare type DeploymentsGetLogFileUrlResponse = LogFileUrlResponse;

/** Optional parameters. */
export declare interface DeploymentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DeploymentsGetRemoteDebuggingConfigOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getRemoteDebuggingConfig operation. */
export declare type DeploymentsGetRemoteDebuggingConfigResponse = RemoteDebugging;

/** Contains response data for the get operation. */
export declare type DeploymentsGetResponse = DeploymentResource;

/** Optional parameters. */
export declare interface DeploymentsListForClusterNextOptionalParams extends coreClient.OperationOptions {
    /** Version of the deployments to be listed */
    version?: string[];
}

/** Contains response data for the listForClusterNext operation. */
export declare type DeploymentsListForClusterNextResponse = DeploymentResourceCollection;

/** Optional parameters. */
export declare interface DeploymentsListForClusterOptionalParams extends coreClient.OperationOptions {
    /** Version of the deployments to be listed */
    version?: string[];
}

/** Contains response data for the listForCluster operation. */
export declare type DeploymentsListForClusterResponse = DeploymentResourceCollection;

/** Optional parameters. */
export declare interface DeploymentsListNextOptionalParams extends coreClient.OperationOptions {
    /** Version of the deployments to be listed */
    version?: string[];
}

/** Contains response data for the listNext operation. */
export declare type DeploymentsListNextResponse = DeploymentResourceCollection;

/** Optional parameters. */
export declare interface DeploymentsListOptionalParams extends coreClient.OperationOptions {
    /** Version of the deployments to be listed */
    version?: string[];
}

/** Contains response data for the list operation. */
export declare type DeploymentsListResponse = DeploymentResourceCollection;

/** Optional parameters. */
export declare interface DeploymentsRestartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DeploymentsStartJFROptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DeploymentsStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DeploymentsStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DeploymentsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DeploymentsUpdateResponse = DeploymentResource;

/** Diagnostic parameters of diagnostic operations */
export declare interface DiagnosticParameters {
    /** App instance name */
    appInstance?: string;
    /** Your target file path in your own BYOS */
    filePath?: string;
    /** Duration of your JFR. 1 min can be represented by 1m or 60s. */
    duration?: string;
}

/** The error code compose of code and message. */
export declare interface ErrorModel {
    /** The code of error. */
    code?: string;
    /** The message of error. */
    message?: string;
}

/** ExecAction describes a "run in container" action. */
export declare interface ExecAction extends ProbeAction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ExecAction";
    /** Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy. */
    command?: string[];
}

/** API metadata property for Spring Cloud Gateway */
export declare interface GatewayApiMetadataProperties {
    /** Title describing the context of the APIs available on the Gateway instance (default: `Spring Cloud Gateway for K8S`) */
    title?: string;
    /** Detailed description of the APIs available on the Gateway instance (default: `Generated OpenAPI 3 document that describes the API routes configured.`) */
    description?: string;
    /** Location of additional documentation for the APIs available on the Gateway instance */
    documentation?: string;
    /** Version of APIs available on this Gateway instance (default: `unspecified`). */
    version?: string;
    /** Base URL that API consumers will use to access APIs on the Gateway instance. */
    serverUrl?: string;
}

/** API route config of the Spring Cloud Gateway */
export declare interface GatewayApiRoute {
    /** A title, will be applied to methods in the generated OpenAPI documentation. */
    title?: string;
    /** A description, will be applied to methods in the generated OpenAPI documentation. */
    description?: string;
    /** Full uri, will override `appName`. */
    uri?: string;
    /** Enable sso validation. */
    ssoEnabled?: boolean;
    /** Pass currently-authenticated user's identity token to application service, default is 'false' */
    tokenRelay?: boolean;
    /** A number of conditions to evaluate a route for each request. Each predicate may be evaluated against request headers and parameter values. All of the predicates associated with a route must evaluate to true for the route to be matched to the request. */
    predicates?: string[];
    /** To modify the request before sending it to the target endpoint, or the received response. */
    filters?: string[];
    /** Route processing order. */
    order?: number;
    /** Classification tags, will be applied to methods in the generated OpenAPI documentation. */
    tags?: string[];
}

/** Cross-Origin Resource Sharing property */
export declare interface GatewayCorsProperties {
    /** Allowed origins to make cross-site requests. The special value `*` allows all domains. */
    allowedOrigins?: string[];
    /** Allowed HTTP methods on cross-site requests. The special value `*` allows all methods. If not set, `GET` and `HEAD` are allowed by default. */
    allowedMethods?: string[];
    /** Allowed headers in cross-site requests. The special value `*` allows actual requests to send any header. */
    allowedHeaders?: string[];
    /** How long, in seconds, the response from a pre-flight request can be cached by clients. */
    maxAge?: number;
    /** Whether user credentials are supported on cross-site requests. Valid values: `true`, `false`. */
    allowCredentials?: boolean;
    /** HTTP response headers to expose for cross-site requests. */
    exposedHeaders?: string[];
}

/** The properties of custom domain for Spring Cloud Gateway */
export declare interface GatewayCustomDomainProperties {
    /** The thumbprint of bound certificate. */
    thumbprint?: string;
}

/** Custom domain of the Spring Cloud Gateway */
export declare interface GatewayCustomDomainResource extends ProxyResource {
    /** The properties of custom domain for Spring Cloud Gateway */
    properties?: GatewayCustomDomainProperties;
}

/** Object that includes an array of Spring Cloud Gateway custom domain resources and a possible link for next set */
export declare interface GatewayCustomDomainResourceCollection {
    /** Collection of Spring Cloud Gateway custom domain resources */
    value?: GatewayCustomDomainResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Interface representing a GatewayCustomDomains. */
export declare interface GatewayCustomDomains {
    /**
     * Handle requests to list all Spring Cloud Gateway custom domains.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, gatewayName: string, options?: GatewayCustomDomainsListOptionalParams): PagedAsyncIterableIterator<GatewayCustomDomainResource>;
    /**
     * Get the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, gatewayName: string, domainName: string, options?: GatewayCustomDomainsGetOptionalParams): Promise<GatewayCustomDomainsGetResponse>;
    /**
     * Create or update the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param gatewayCustomDomainResource The gateway custom domain resource for the create or update
     *                                    operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, gatewayName: string, domainName: string, gatewayCustomDomainResource: GatewayCustomDomainResource, options?: GatewayCustomDomainsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<GatewayCustomDomainsCreateOrUpdateResponse>, GatewayCustomDomainsCreateOrUpdateResponse>>;
    /**
     * Create or update the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param gatewayCustomDomainResource The gateway custom domain resource for the create or update
     *                                    operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, gatewayName: string, domainName: string, gatewayCustomDomainResource: GatewayCustomDomainResource, options?: GatewayCustomDomainsCreateOrUpdateOptionalParams): Promise<GatewayCustomDomainsCreateOrUpdateResponse>;
    /**
     * Delete the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, gatewayName: string, domainName: string, options?: GatewayCustomDomainsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, gatewayName: string, domainName: string, options?: GatewayCustomDomainsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GatewayCustomDomainsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GatewayCustomDomainsCreateOrUpdateResponse = GatewayCustomDomainResource;

/** Optional parameters. */
export declare interface GatewayCustomDomainsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface GatewayCustomDomainsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type GatewayCustomDomainsGetResponse = GatewayCustomDomainResource;

/** Optional parameters. */
export declare interface GatewayCustomDomainsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type GatewayCustomDomainsListNextResponse = GatewayCustomDomainResourceCollection;

/** Optional parameters. */
export declare interface GatewayCustomDomainsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type GatewayCustomDomainsListResponse = GatewayCustomDomainResourceCollection;

/** Collection of instances belong to the Spring Cloud Gateway */
export declare interface GatewayInstance {
    /**
     * Name of the Spring Cloud Gateway instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Status of the Spring Cloud Gateway instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** Properties of the Spring Cloud Gateway Operator. */
export declare interface GatewayOperatorProperties {
    /**
     * The requested resource quantity for required CPU and Memory.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceRequests?: GatewayOperatorResourceRequests;
    /**
     * Collection of instances belong to Spring Cloud Gateway operator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instances?: GatewayInstance[];
}

/** Properties of the Spring Cloud Gateway Operator. */
export declare interface GatewayOperatorResourceRequests {
    /**
     * Cpu allocated to each Spring Cloud Gateway Operator instance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cpu?: string;
    /**
     * Memory allocated to each Spring Cloud Gateway Operator instance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly memory?: string;
    /**
     * Instance count of the Spring Cloud Gateway Operator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceCount?: number;
}

/** Spring Cloud Gateway properties payload */
export declare interface GatewayProperties {
    /**
     * State of the Spring Cloud Gateway.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: GatewayProvisioningState;
    /** Indicates whether the Spring Cloud Gateway exposes endpoint. */
    public?: boolean;
    /**
     * URL of the Spring Cloud Gateway, exposed when 'public' is true.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly url?: string;
    /** Indicate if only https is allowed. */
    httpsOnly?: boolean;
    /** Single sign-on related configuration */
    ssoProperties?: SsoProperties;
    /** API metadata property for Spring Cloud Gateway */
    apiMetadataProperties?: GatewayApiMetadataProperties;
    /** Cross-Origin Resource Sharing property */
    corsProperties?: GatewayCorsProperties;
    /** The requested resource quantity for required CPU and Memory. */
    resourceRequests?: GatewayResourceRequests;
    /**
     * Collection of instances belong to Spring Cloud Gateway.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instances?: GatewayInstance[];
    /**
     * Properties of the Spring Cloud Gateway Operator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operatorProperties?: GatewayOperatorProperties;
}

/**
 * Defines values for GatewayProvisioningState. \
 * {@link KnownGatewayProvisioningState} can be used interchangeably with GatewayProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export declare type GatewayProvisioningState = string;

/** Spring Cloud Gateway resource */
export declare interface GatewayResource extends ProxyResource {
    /** Spring Cloud Gateway properties payload */
    properties?: GatewayProperties;
    /** Sku of the Spring Cloud Gateway resource */
    sku?: Sku;
}

/** Object that includes an array of gateway resources and a possible link for next set */
export declare interface GatewayResourceCollection {
    /** Collection of gateway resources */
    value?: GatewayResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Resource request payload of Spring Cloud Gateway. */
export declare interface GatewayResourceRequests {
    /** Cpu allocated to each Spring Cloud Gateway instance. */
    cpu?: string;
    /** Memory allocated to each Spring Cloud Gateway instance. */
    memory?: string;
}

/** OpenAPI properties of Spring Cloud Gateway route config. */
export declare interface GatewayRouteConfigOpenApiProperties {
    /** The URI of OpenAPI specification. */
    uri?: string;
}

/** API route config of the Spring Cloud Gateway */
export declare interface GatewayRouteConfigProperties {
    /**
     * State of the Spring Cloud Gateway route config.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: GatewayProvisioningState;
    /** The resource Id of the Azure Spring Apps app, required unless route defines `uri`. */
    appResourceId?: string;
    /** OpenAPI properties of Spring Cloud Gateway route config. */
    openApi?: GatewayRouteConfigOpenApiProperties;
    /** Protocol of routed Azure Spring Apps applications. */
    protocol?: GatewayRouteConfigProtocol;
    /** Array of API routes, each route contains properties such as `title`, `uri`, `ssoEnabled`, `predicates`, `filters`. */
    routes?: GatewayApiRoute[];
}

/**
 * Defines values for GatewayRouteConfigProtocol. \
 * {@link KnownGatewayRouteConfigProtocol} can be used interchangeably with GatewayRouteConfigProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HTTP** \
 * **HTTPS**
 */
export declare type GatewayRouteConfigProtocol = string;

/** Spring Cloud Gateway route config resource */
export declare interface GatewayRouteConfigResource extends ProxyResource {
    /** API route config of the Spring Cloud Gateway */
    properties?: GatewayRouteConfigProperties;
}

/** Object that includes an array of Spring Cloud Gateway route config resources and a possible link for next set */
export declare interface GatewayRouteConfigResourceCollection {
    /** Collection of Spring Cloud Gateway route config resources */
    value?: GatewayRouteConfigResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Interface representing a GatewayRouteConfigs. */
export declare interface GatewayRouteConfigs {
    /**
     * Handle requests to list all Spring Cloud Gateway route configs.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, gatewayName: string, options?: GatewayRouteConfigsListOptionalParams): PagedAsyncIterableIterator<GatewayRouteConfigResource>;
    /**
     * Get the Spring Cloud Gateway route configs.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param routeConfigName The name of the Spring Cloud Gateway route config.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, gatewayName: string, routeConfigName: string, options?: GatewayRouteConfigsGetOptionalParams): Promise<GatewayRouteConfigsGetResponse>;
    /**
     * Create the default Spring Cloud Gateway route configs or update the existing Spring Cloud Gateway
     * route configs.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param routeConfigName The name of the Spring Cloud Gateway route config.
     * @param gatewayRouteConfigResource The Spring Cloud Gateway route config for the create or update
     *                                   operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, gatewayName: string, routeConfigName: string, gatewayRouteConfigResource: GatewayRouteConfigResource, options?: GatewayRouteConfigsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<GatewayRouteConfigsCreateOrUpdateResponse>, GatewayRouteConfigsCreateOrUpdateResponse>>;
    /**
     * Create the default Spring Cloud Gateway route configs or update the existing Spring Cloud Gateway
     * route configs.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param routeConfigName The name of the Spring Cloud Gateway route config.
     * @param gatewayRouteConfigResource The Spring Cloud Gateway route config for the create or update
     *                                   operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, gatewayName: string, routeConfigName: string, gatewayRouteConfigResource: GatewayRouteConfigResource, options?: GatewayRouteConfigsCreateOrUpdateOptionalParams): Promise<GatewayRouteConfigsCreateOrUpdateResponse>;
    /**
     * Delete the Spring Cloud Gateway route config.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param routeConfigName The name of the Spring Cloud Gateway route config.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, gatewayName: string, routeConfigName: string, options?: GatewayRouteConfigsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete the Spring Cloud Gateway route config.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param routeConfigName The name of the Spring Cloud Gateway route config.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, gatewayName: string, routeConfigName: string, options?: GatewayRouteConfigsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GatewayRouteConfigsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GatewayRouteConfigsCreateOrUpdateResponse = GatewayRouteConfigResource;

/** Optional parameters. */
export declare interface GatewayRouteConfigsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface GatewayRouteConfigsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type GatewayRouteConfigsGetResponse = GatewayRouteConfigResource;

/** Optional parameters. */
export declare interface GatewayRouteConfigsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type GatewayRouteConfigsListNextResponse = GatewayRouteConfigResourceCollection;

/** Optional parameters. */
export declare interface GatewayRouteConfigsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type GatewayRouteConfigsListResponse = GatewayRouteConfigResourceCollection;

/** Interface representing a Gateways. */
export declare interface Gateways {
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, options?: GatewaysListOptionalParams): PagedAsyncIterableIterator<GatewayResource>;
    /**
     * Get the Spring Cloud Gateway and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, gatewayName: string, options?: GatewaysGetOptionalParams): Promise<GatewaysGetResponse>;
    /**
     * Create the default Spring Cloud Gateway or update the existing Spring Cloud Gateway.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param gatewayResource The gateway for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, gatewayName: string, gatewayResource: GatewayResource, options?: GatewaysCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<GatewaysCreateOrUpdateResponse>, GatewaysCreateOrUpdateResponse>>;
    /**
     * Create the default Spring Cloud Gateway or update the existing Spring Cloud Gateway.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param gatewayResource The gateway for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, gatewayName: string, gatewayResource: GatewayResource, options?: GatewaysCreateOrUpdateOptionalParams): Promise<GatewaysCreateOrUpdateResponse>;
    /**
     * Disable the default Spring Cloud Gateway.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, gatewayName: string, options?: GatewaysDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Disable the default Spring Cloud Gateway.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, gatewayName: string, options?: GatewaysDeleteOptionalParams): Promise<void>;
    /**
     * Check the domains are valid as well as not in use.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param validatePayload Custom domain payload to be validated
     * @param options The options parameters.
     */
    validateDomain(resourceGroupName: string, serviceName: string, gatewayName: string, validatePayload: CustomDomainValidatePayload, options?: GatewaysValidateDomainOptionalParams): Promise<GatewaysValidateDomainResponse>;
}

/** Optional parameters. */
export declare interface GatewaysCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type GatewaysCreateOrUpdateResponse = GatewayResource;

/** Optional parameters. */
export declare interface GatewaysDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface GatewaysGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type GatewaysGetResponse = GatewayResource;

/** Optional parameters. */
export declare interface GatewaysListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type GatewaysListNextResponse = GatewayResourceCollection;

/** Optional parameters. */
export declare interface GatewaysListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type GatewaysListResponse = GatewayResourceCollection;

/** Optional parameters. */
export declare interface GatewaysValidateDomainOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the validateDomain operation. */
export declare type GatewaysValidateDomainResponse = CustomDomainValidateResult;

/** Git repository property payload for config server */
export declare interface GitPatternRepository {
    /** Name of the repository */
    name: string;
    /** Collection of pattern of the repository */
    pattern?: string[];
    /** URI of the repository */
    uri: string;
    /** Label of the repository */
    label?: string;
    /** Searching path of the repository */
    searchPaths?: string[];
    /** Username of git repository basic auth. */
    username?: string;
    /** Password of git repository basic auth. */
    password?: string;
    /** Public sshKey of git repository. */
    hostKey?: string;
    /** SshKey algorithm of git repository. */
    hostKeyAlgorithm?: string;
    /** Private sshKey algorithm of git repository. */
    privateKey?: string;
    /** Strict host key checking or not. */
    strictHostKeyChecking?: boolean;
}

/** HTTPGetAction describes an action based on HTTP Get requests. */
export declare interface HttpGetAction extends ProbeAction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HTTPGetAction";
    /** Path to access on the HTTP server. */
    path?: string;
    /**
     * Scheme to use for connecting to the host. Defaults to HTTP.
     *
     * Possible enum values:
     *  - `"HTTP"` means that the scheme used will be http://
     *  - `"HTTPS"` means that the scheme used will be https://
     */
    scheme?: HttpSchemeType;
}

/**
 * Defines values for HttpSchemeType. \
 * {@link KnownHttpSchemeType} can be used interchangeably with HttpSchemeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HTTP** \
 * **HTTPS**
 */
export declare type HttpSchemeType = string;

/** Credential of the image registry */
export declare interface ImageRegistryCredential {
    /** The username of the image registry credential */
    username?: string;
    /** The password of the image registry credential */
    password?: string;
}

/** Ingress configuration payload for Azure Spring Apps resource. */
export declare interface IngressConfig {
    /** Ingress read time out in seconds. */
    readTimeoutInSeconds?: number;
}

/** App ingress settings payload. */
export declare interface IngressSettings {
    /** Ingress read time out in seconds. */
    readTimeoutInSeconds?: number;
    /** Ingress send time out in seconds. */
    sendTimeoutInSeconds?: number;
    /** Type of the affinity, set this to Cookie to enable session affinity. */
    sessionAffinity?: SessionAffinity;
    /** Time in seconds until the cookie expires. */
    sessionCookieMaxAge?: number;
    /** How ingress should communicate with this app backend service. */
    backendProtocol?: BackendProtocol;
    /** Client-Certification Authentication. */
    clientAuth?: IngressSettingsClientAuth;
}

/** Client-Certification Authentication. */
export declare interface IngressSettingsClientAuth {
    /** Collection of certificate resource id. */
    certificates?: string[];
}

/** Uploaded Jar binary for a deployment */
export declare interface JarUploadedUserSourceInfo extends UploadedUserSourceInfo {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Jar";
    /** Runtime version of the Jar file */
    runtimeVersion?: string;
    /** JVM parameter */
    jvmOptions?: string;
}

/** Properties of certificate imported from key vault. */
export declare interface KeyVaultCertificateProperties extends CertificateProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "KeyVaultCertificate";
    /** The vault uri of user key vault. */
    vaultUri: string;
    /** The certificate name of key vault. */
    keyVaultCertName: string;
    /** The certificate version of key vault. */
    certVersion?: string;
    /** Optional. If set to true, it will not import private key from key vault. */
    excludePrivateKey?: boolean;
}

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link ApiPortalProvisioningState} that the service accepts. */
export declare enum KnownApiPortalProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link AppResourceProvisioningState} that the service accepts. */
export declare enum KnownAppResourceProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link BackendProtocol} that the service accepts. */
export declare enum KnownBackendProtocol {
    /** Grpc */
    Grpc = "GRPC",
    /** Default */
    Default = "Default"
}

/** Known values of {@link BindingType} that the service accepts. */
export declare enum KnownBindingType {
    /** ApplicationInsights */
    ApplicationInsights = "ApplicationInsights",
    /** ApacheSkyWalking */
    ApacheSkyWalking = "ApacheSkyWalking",
    /** AppDynamics */
    AppDynamics = "AppDynamics",
    /** Dynatrace */
    Dynatrace = "Dynatrace",
    /** NewRelic */
    NewRelic = "NewRelic",
    /** ElasticAPM */
    ElasticAPM = "ElasticAPM"
}

/** Known values of {@link BuilderProvisioningState} that the service accepts. */
export declare enum KnownBuilderProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link BuildpackBindingProvisioningState} that the service accepts. */
export declare enum KnownBuildpackBindingProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link BuildProvisioningState} that the service accepts. */
export declare enum KnownBuildProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link BuildResultProvisioningState} that the service accepts. */
export declare enum KnownBuildResultProvisioningState {
    /** Queuing */
    Queuing = "Queuing",
    /** Building */
    Building = "Building",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link BuildServiceProvisioningState} that the service accepts. */
export declare enum KnownBuildServiceProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link CertificateResourceProvisioningState} that the service accepts. */
export declare enum KnownCertificateResourceProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link ConfigServerState} that the service accepts. */
export declare enum KnownConfigServerState {
    /** NotAvailable */
    NotAvailable = "NotAvailable",
    /** Deleted */
    Deleted = "Deleted",
    /** Failed */
    Failed = "Failed",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Updating */
    Updating = "Updating"
}

/** Known values of {@link ConfigurationServiceProvisioningState} that the service accepts. */
export declare enum KnownConfigurationServiceProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link CustomDomainResourceProvisioningState} that the service accepts. */
export declare enum KnownCustomDomainResourceProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link DeploymentResourceProvisioningState} that the service accepts. */
export declare enum KnownDeploymentResourceProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link DeploymentResourceStatus} that the service accepts. */
export declare enum KnownDeploymentResourceStatus {
    /** Stopped */
    Stopped = "Stopped",
    /** Running */
    Running = "Running"
}

/** Known values of {@link GatewayProvisioningState} that the service accepts. */
export declare enum KnownGatewayProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link GatewayRouteConfigProtocol} that the service accepts. */
export declare enum KnownGatewayRouteConfigProtocol {
    /** Http */
    Http = "HTTP",
    /** Https */
    Https = "HTTPS"
}

/** Known values of {@link HttpSchemeType} that the service accepts. */
export declare enum KnownHttpSchemeType {
    /** Http */
    Http = "HTTP",
    /** Https */
    Https = "HTTPS"
}

/** Known values of {@link KPackBuildStageProvisioningState} that the service accepts. */
export declare enum KnownKPackBuildStageProvisioningState {
    /** NotStarted */
    NotStarted = "NotStarted",
    /** Running */
    Running = "Running",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link LastModifiedByType} that the service accepts. */
export declare enum KnownLastModifiedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link ManagedIdentityType} that the service accepts. */
export declare enum KnownManagedIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/** Known values of {@link MonitoringSettingState} that the service accepts. */
export declare enum KnownMonitoringSettingState {
    /** NotAvailable */
    NotAvailable = "NotAvailable",
    /** Failed */
    Failed = "Failed",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Updating */
    Updating = "Updating"
}

/** Known values of {@link PowerState} that the service accepts. */
export declare enum KnownPowerState {
    /** Running */
    Running = "Running",
    /** Stopped */
    Stopped = "Stopped"
}

/** Known values of {@link ProbeActionType} that the service accepts. */
export declare enum KnownProbeActionType {
    /** HttpGetAction */
    HttpGetAction = "HTTPGetAction",
    /** TCPSocketAction */
    TCPSocketAction = "TCPSocketAction",
    /** ExecAction */
    ExecAction = "ExecAction"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Starting */
    Starting = "Starting",
    /** Stopping */
    Stopping = "Stopping",
    /** Deleting */
    Deleting = "Deleting",
    /** Deleted */
    Deleted = "Deleted",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Moving */
    Moving = "Moving",
    /** Moved */
    Moved = "Moved",
    /** MoveFailed */
    MoveFailed = "MoveFailed"
}

/** Known values of {@link ResourceSkuRestrictionsReasonCode} that the service accepts. */
export declare enum KnownResourceSkuRestrictionsReasonCode {
    /** QuotaId */
    QuotaId = "QuotaId",
    /** NotAvailableForSubscription */
    NotAvailableForSubscription = "NotAvailableForSubscription"
}

/** Known values of {@link ResourceSkuRestrictionsType} that the service accepts. */
export declare enum KnownResourceSkuRestrictionsType {
    /** Location */
    Location = "Location",
    /** Zone */
    Zone = "Zone"
}

/** Known values of {@link ServiceRegistryProvisioningState} that the service accepts. */
export declare enum KnownServiceRegistryProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link SessionAffinity} that the service accepts. */
export declare enum KnownSessionAffinity {
    /** Cookie */
    Cookie = "Cookie",
    /** None */
    None = "None"
}

/** Known values of {@link SkuScaleType} that the service accepts. */
export declare enum KnownSkuScaleType {
    /** None */
    None = "None",
    /** Manual */
    Manual = "Manual",
    /** Automatic */
    Automatic = "Automatic"
}

/** Known values of {@link StorageType} that the service accepts. */
export declare enum KnownStorageType {
    /** StorageAccount */
    StorageAccount = "StorageAccount"
}

/** Known values of {@link SupportedRuntimePlatform} that the service accepts. */
export declare enum KnownSupportedRuntimePlatform {
    /** Java */
    Java = "Java",
    /** NETCore */
    NETCore = ".NET Core"
}

/** Known values of {@link SupportedRuntimeValue} that the service accepts. */
export declare enum KnownSupportedRuntimeValue {
    /** Java8 */
    Java8 = "Java_8",
    /** Java11 */
    Java11 = "Java_11",
    /** Java17 */
    Java17 = "Java_17",
    /** NetCore31 */
    NetCore31 = "NetCore_31"
}

/** Known values of {@link TestKeyType} that the service accepts. */
export declare enum KnownTestKeyType {
    /** Primary */
    Primary = "Primary",
    /** Secondary */
    Secondary = "Secondary"
}

/** Known values of {@link TrafficDirection} that the service accepts. */
export declare enum KnownTrafficDirection {
    /** Inbound */
    Inbound = "Inbound",
    /** Outbound */
    Outbound = "Outbound"
}

/** Known values of {@link Type} that the service accepts. */
export declare enum KnownType {
    /** AzureFileVolume */
    AzureFileVolume = "AzureFileVolume"
}

/**
 * Defines values for KPackBuildStageProvisioningState. \
 * {@link KnownKPackBuildStageProvisioningState} can be used interchangeably with KPackBuildStageProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **Running** \
 * **Succeeded** \
 * **Failed**
 */
export declare type KPackBuildStageProvisioningState = string;

/**
 * Defines values for LastModifiedByType. \
 * {@link KnownLastModifiedByType} can be used interchangeably with LastModifiedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type LastModifiedByType = string;

/** Loaded certificate payload */
export declare interface LoadedCertificate {
    /** Resource Id of loaded certificate */
    resourceId: string;
    /** Indicate whether the certificate will be loaded into default trust store, only work for Java runtime. */
    loadTrustStore?: boolean;
}

/** Log file URL payload */
export declare interface LogFileUrlResponse {
    /** URL of the log file */
    url: string;
}

/** Specifications of the Log for Azure Monitoring */
export declare interface LogSpecification {
    /** Name of the log */
    name?: string;
    /** Localized friendly display name of the log */
    displayName?: string;
    /** Blob duration of the log */
    blobDuration?: string;
}

/** Managed identity properties retrieved from ARM request headers. */
export declare interface ManagedIdentityProperties {
    /** Type of the managed identity */
    type?: ManagedIdentityType;
    /** Principal Id of system-assigned managed identity. */
    principalId?: string;
    /** Tenant Id of system-assigned managed identity. */
    tenantId?: string;
    /** Properties of user-assigned managed identities */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedManagedIdentity;
    };
}

/**
 * Defines values for ManagedIdentityType. \
 * {@link KnownManagedIdentityType} can be used interchangeably with ManagedIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export declare type ManagedIdentityType = string;

/** Purchasing 3rd Party product for one Azure Spring Apps instance */
export declare interface MarketplaceResource {
    /** The plan id of the 3rd Party Artifact that is being procured. */
    plan?: string;
    /** The publisher id of the 3rd Party Artifact that is being bought. */
    publisher?: string;
    /** The 3rd Party artifact that is being procured. */
    product?: string;
}

/** Specifications of the Dimension of metrics */
export declare interface MetricDimension {
    /** Name of the dimension */
    name?: string;
    /** Localized friendly display name of the dimension */
    displayName?: string;
    /** Whether this dimension should be included for the Shoebox export scenario */
    toBeExportedForShoebox?: boolean;
}

/** Specifications of the Metrics for Azure Monitoring */
export declare interface MetricSpecification {
    /** Name of the metric */
    name?: string;
    /** Localized friendly display name of the metric */
    displayName?: string;
    /** Localized friendly description of the metric */
    displayDescription?: string;
    /** Unit that makes sense for the metric */
    unit?: string;
    /** Name of the metric category that the metric belongs to. A metric can only belong to a single category. */
    category?: string;
    /** Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count. */
    aggregationType?: string;
    /** Supported aggregation types */
    supportedAggregationTypes?: string[];
    /** Supported time grain types */
    supportedTimeGrainTypes?: string[];
    /** Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published. */
    fillGapWithZero?: boolean;
    /** Dimensions of the metric */
    dimensions?: MetricDimension[];
    /** Name of the MDM namespace. Optional. */
    sourceMdmNamespace?: string;
}

/** Monitoring Setting properties payload */
export declare interface MonitoringSettingProperties {
    /**
     * State of the Monitoring Setting.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: MonitoringSettingState;
    /** Error when apply Monitoring Setting changes. */
    error?: ErrorModel;
    /** Indicates whether enable the trace functionality, which will be deprecated since api version 2020-11-01-preview. Please leverage appInsightsInstrumentationKey to indicate if monitoringSettings enabled or not */
    traceEnabled?: boolean;
    /** Target application insight instrumentation key, null or whitespace include empty will disable monitoringSettings */
    appInsightsInstrumentationKey?: string;
    /** Indicates the sampling rate of application insight agent, should be in range [0.0, 100.0] */
    appInsightsSamplingRate?: number;
    /** Indicates the versions of application insight agent */
    appInsightsAgentVersions?: ApplicationInsightsAgentVersions;
}

/** Monitoring Setting resource */
export declare interface MonitoringSettingResource extends ProxyResource {
    /** Properties of the Monitoring Setting resource */
    properties?: MonitoringSettingProperties;
}

/** Interface representing a MonitoringSettings. */
export declare interface MonitoringSettings {
    /**
     * Get the Monitoring Setting and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, options?: MonitoringSettingsGetOptionalParams): Promise<MonitoringSettingsGetResponse>;
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePut(resourceGroupName: string, serviceName: string, monitoringSettingResource: MonitoringSettingResource, options?: MonitoringSettingsUpdatePutOptionalParams): Promise<PollerLike<PollOperationState<MonitoringSettingsUpdatePutResponse>, MonitoringSettingsUpdatePutResponse>>;
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePutAndWait(resourceGroupName: string, serviceName: string, monitoringSettingResource: MonitoringSettingResource, options?: MonitoringSettingsUpdatePutOptionalParams): Promise<MonitoringSettingsUpdatePutResponse>;
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePatch(resourceGroupName: string, serviceName: string, monitoringSettingResource: MonitoringSettingResource, options?: MonitoringSettingsUpdatePatchOptionalParams): Promise<PollerLike<PollOperationState<MonitoringSettingsUpdatePatchResponse>, MonitoringSettingsUpdatePatchResponse>>;
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePatchAndWait(resourceGroupName: string, serviceName: string, monitoringSettingResource: MonitoringSettingResource, options?: MonitoringSettingsUpdatePatchOptionalParams): Promise<MonitoringSettingsUpdatePatchResponse>;
}

/** Optional parameters. */
export declare interface MonitoringSettingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MonitoringSettingsGetResponse = MonitoringSettingResource;

/**
 * Defines values for MonitoringSettingState. \
 * {@link KnownMonitoringSettingState} can be used interchangeably with MonitoringSettingState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotAvailable** \
 * **Failed** \
 * **Succeeded** \
 * **Updating**
 */
export declare type MonitoringSettingState = string;

/** Optional parameters. */
export declare interface MonitoringSettingsUpdatePatchOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updatePatch operation. */
export declare type MonitoringSettingsUpdatePatchResponse = MonitoringSettingResource;

/** Optional parameters. */
export declare interface MonitoringSettingsUpdatePutOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updatePut operation. */
export declare type MonitoringSettingsUpdatePutResponse = MonitoringSettingResource;

/** Name availability result payload */
export declare interface NameAvailability {
    /** Indicates whether the name is available */
    nameAvailable?: boolean;
    /** Reason why the name is not available */
    reason?: string;
    /** Message why the name is not available */
    message?: string;
}

/** Name availability parameters payload */
export declare interface NameAvailabilityParameters {
    /** Type of the resource to check name availability */
    type: string;
    /** Name to be checked */
    name: string;
}

/** Uploaded Jar binary for a deployment */
export declare interface NetCoreZipUploadedUserSourceInfo extends UploadedUserSourceInfo {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "NetCoreZip";
    /** The path to the .NET executable relative to zip root */
    netCoreMainEntryPath?: string;
    /** Runtime version of the .Net file */
    runtimeVersion?: string;
}

/** Service network profile payload */
export declare interface NetworkProfile {
    /** Fully qualified resource Id of the subnet to host Azure Spring Apps Service Runtime */
    serviceRuntimeSubnetId?: string;
    /** Fully qualified resource Id of the subnet to host customer apps in Azure Spring Apps */
    appSubnetId?: string;
    /** Azure Spring Apps service reserved CIDR */
    serviceCidr?: string;
    /** Name of the resource group containing network resources of Azure Spring Apps Service Runtime */
    serviceRuntimeNetworkResourceGroup?: string;
    /** Name of the resource group containing network resources for customer apps in Azure Spring Apps */
    appNetworkResourceGroup?: string;
    /**
     * Desired outbound IP resources for Azure Spring Apps resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outboundIPs?: NetworkProfileOutboundIPs;
    /**
     * Required inbound or outbound traffics for Azure Spring Apps resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredTraffics?: RequiredTraffic[];
    /** Ingress configuration payload for Azure Spring Apps resource. */
    ingressConfig?: IngressConfig;
    /** The egress traffic type of Azure Spring Apps VNet instances. */
    outboundType?: string;
}

/** Desired outbound IP resources for Azure Spring Apps resource. */
export declare interface NetworkProfileOutboundIPs {
    /**
     * A list of public IP addresses.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicIPs?: string[];
}

/** Operation detail payload */
export declare interface OperationDetail {
    /** Name of the operation */
    name?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
    /** Display of the operation */
    display?: OperationDisplay;
    /**
     * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionType?: ActionType;
    /** Origin of the operation */
    origin?: string;
    /** Properties of the operation */
    properties?: OperationProperties;
}

/** Operation display payload */
export declare interface OperationDisplay {
    /** Resource provider of the operation */
    provider?: string;
    /** Resource of the operation */
    resource?: string;
    /** Localized friendly name for the operation */
    operation?: string;
    /** Localized friendly description for the operation */
    description?: string;
}

/** Extra Operation properties */
export declare interface OperationProperties {
    /** Service specifications of the operation */
    serviceSpecification?: ServiceSpecification;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available REST API operations of the Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<OperationDetail>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = AvailableOperations;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = AvailableOperations;

/** Persistent disk payload */
export declare interface PersistentDisk {
    /** Size of the persistent disk in GB */
    sizeInGB?: number;
    /**
     * Size of the used persistent disk in GB
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly usedInGB?: number;
    /** Mount path of the persistent disk */
    mountPath?: string;
}

/**
 * Defines values for PowerState. \
 * {@link KnownPowerState} can be used interchangeably with PowerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Running** \
 * **Stopped**
 */
export declare type PowerState = string;

/** Probe describes a health check to be performed against an App Instance to determine whether it is alive or ready to receive traffic. */
export declare interface Probe {
    /** The action of the probe. */
    probeAction?: ProbeActionUnion;
    /** Indicate whether the probe is disabled. */
    disableProbe: boolean;
    /** Number of seconds after the App Instance has started before probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes */
    initialDelaySeconds?: number;
    /** How often (in seconds) to perform the probe. Minimum value is 1. */
    periodSeconds?: number;
    /** Number of seconds after which the probe times out. Minimum value is 1. */
    timeoutSeconds?: number;
    /** Minimum consecutive failures for the probe to be considered failed after having succeeded. Minimum value is 1. */
    failureThreshold?: number;
    /** Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 for liveness and startup. Minimum value is 1. */
    successThreshold?: number;
}

/** The action of the probe. */
export declare interface ProbeAction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "HTTPGetAction" | "ExecAction" | "TCPSocketAction";
}

/**
 * Defines values for ProbeActionType. \
 * {@link KnownProbeActionType} can be used interchangeably with ProbeActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HTTPGetAction** \
 * **TCPSocketAction** \
 * **ExecAction**
 */
export declare type ProbeActionType = string;

export declare type ProbeActionUnion = ProbeAction | HttpGetAction | ExecAction | TCPSocketAction;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Starting** \
 * **Stopping** \
 * **Deleting** \
 * **Deleted** \
 * **Succeeded** \
 * **Failed** \
 * **Moving** \
 * **Moved** \
 * **MoveFailed**
 */
export declare type ProvisioningState = string;

/** The resource model definition for a ARM proxy resource. It will have everything other than required location and tags. */
export declare interface ProxyResource extends Resource {
}

/** Regenerate test key request payload */
export declare interface RegenerateTestKeyRequestPayload {
    /** Type of the test key */
    keyType: TestKeyType;
}

/** Remote debugging config. */
export declare interface RemoteDebugging {
    /** Application debugging port */
    port?: number;
    /** Indicate if remote debugging is enabled */
    enabled?: boolean;
}

/** Remote debugging payload. */
export declare interface RemoteDebuggingPayload {
    /** Application debugging port. */
    port?: number;
}

/** Required inbound or outbound traffic for Azure Spring Apps resource. */
export declare interface RequiredTraffic {
    /**
     * The protocol of required traffic
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly protocol?: string;
    /**
     * The port of required traffic
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly port?: number;
    /**
     * The ip list of required traffic
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ips?: string[];
    /**
     * The FQDN list of required traffic
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fqdns?: string[];
    /**
     * The direction of required traffic
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly direction?: TrafficDirection;
}

/** The core properties of ARM resources. */
export declare interface Resource {
    /**
     * Fully qualified resource Id for the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Deployment resource request payload */
export declare interface ResourceRequests {
    /** Required CPU. 1 core can be represented by 1 or 1000m. This should be 500m or 1 for Basic tier, and {500m, 1, 2, 3, 4} for Standard tier. */
    cpu?: string;
    /** Required memory. 1 GB can be represented by 1Gi or 1024Mi. This should be {512Mi, 1Gi, 2Gi} for Basic tier, and {512Mi, 1Gi, 2Gi, ..., 8Gi} for Standard tier. */
    memory?: string;
}

/** Describes an available Azure Spring Apps SKU. */
export declare interface ResourceSku {
    /** Gets the type of resource the SKU applies to. */
    resourceType?: string;
    /** Gets the name of SKU. */
    name?: string;
    /** Gets the tier of SKU. */
    tier?: string;
    /** Gets the capacity of SKU. */
    capacity?: SkuCapacity;
    /** Gets the set of locations that the SKU is available. */
    locations?: string[];
    /** Gets a list of locations and availability zones in those locations where the SKU is available. */
    locationInfo?: ResourceSkuLocationInfo[];
    /**
     * Gets the restrictions because of which SKU cannot be used. This is
     * empty if there are no restrictions.
     */
    restrictions?: ResourceSkuRestrictions[];
}

export declare interface ResourceSkuCapabilities {
    /** Gets an invariant to describe the feature. */
    name?: string;
    /** Gets an invariant if the feature is measured by quantity. */
    value?: string;
}

/** Object that includes an array of Azure Spring Apps SKU and a possible link for next set */
export declare interface ResourceSkuCollection {
    /** Collection of resource SKU */
    value?: ResourceSku[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Locations and availability zones where the SKU is available */
export declare interface ResourceSkuLocationInfo {
    /** Gets location of the SKU */
    location?: string;
    /** Gets list of availability zones where the SKU is supported. */
    zones?: string[];
    /** Gets details of capabilities available to a SKU in specific zones. */
    zoneDetails?: ResourceSkuZoneDetails[];
}

/** Information about the restriction where the SKU cannot be used */
export declare interface ResourceSkuRestrictionInfo {
    /** Gets locations where the SKU is restricted */
    locations?: string[];
    /** Gets list of availability zones where the SKU is restricted. */
    zones?: string[];
}

/** Restrictions where the SKU cannot be used */
export declare interface ResourceSkuRestrictions {
    /** Gets the type of restrictions. Possible values include: 'Location', 'Zone' */
    type?: ResourceSkuRestrictionsType;
    /**
     * Gets the value of restrictions. If the restriction type is set to
     * location. This would be different locations where the SKU is restricted.
     */
    values?: string[];
    /** Gets the information about the restriction where the SKU cannot be used. */
    restrictionInfo?: ResourceSkuRestrictionInfo;
    /** Gets the reason for restriction. Possible values include: 'QuotaId', 'NotAvailableForSubscription' */
    reasonCode?: ResourceSkuRestrictionsReasonCode;
}

/**
 * Defines values for ResourceSkuRestrictionsReasonCode. \
 * {@link KnownResourceSkuRestrictionsReasonCode} can be used interchangeably with ResourceSkuRestrictionsReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuotaId** \
 * **NotAvailableForSubscription**
 */
export declare type ResourceSkuRestrictionsReasonCode = string;

/**
 * Defines values for ResourceSkuRestrictionsType. \
 * {@link KnownResourceSkuRestrictionsType} can be used interchangeably with ResourceSkuRestrictionsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Location** \
 * **Zone**
 */
export declare type ResourceSkuRestrictionsType = string;

/** Details of capabilities available to a SKU in specific zones */
export declare interface ResourceSkuZoneDetails {
    /**
     * Gets the set of zones that the SKU is available in with the
     * specified capabilities.
     */
    name?: string[];
    /**
     * Gets a list of capabilities that are available for the SKU in the
     * specified list of zones.
     */
    capabilities?: ResourceSkuCapabilities[];
}

/** Resource upload definition payload */
export declare interface ResourceUploadDefinition {
    /** Source relative path */
    relativePath?: string;
    /** Upload URL */
    uploadUrl?: string;
}

/** Interface representing a RuntimeVersions. */
export declare interface RuntimeVersions {
    /**
     * Lists all of the available runtime versions supported by Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    listRuntimeVersions(options?: RuntimeVersionsListRuntimeVersionsOptionalParams): Promise<RuntimeVersionsListRuntimeVersionsResponse>;
}

/** Optional parameters. */
export declare interface RuntimeVersionsListRuntimeVersionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRuntimeVersions operation. */
export declare type RuntimeVersionsListRuntimeVersionsResponse = AvailableRuntimeVersions;

/** Interface representing a ServiceRegistries. */
export declare interface ServiceRegistries {
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, options?: ServiceRegistriesListOptionalParams): PagedAsyncIterableIterator<ServiceRegistryResource>;
    /**
     * Get the Service Registry and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, serviceRegistryName: string, options?: ServiceRegistriesGetOptionalParams): Promise<ServiceRegistriesGetResponse>;
    /**
     * Create the default Service Registry or update the existing Service Registry.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, serviceRegistryName: string, options?: ServiceRegistriesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServiceRegistriesCreateOrUpdateResponse>, ServiceRegistriesCreateOrUpdateResponse>>;
    /**
     * Create the default Service Registry or update the existing Service Registry.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, serviceRegistryName: string, options?: ServiceRegistriesCreateOrUpdateOptionalParams): Promise<ServiceRegistriesCreateOrUpdateResponse>;
    /**
     * Disable the default Service Registry.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, serviceRegistryName: string, options?: ServiceRegistriesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Disable the default Service Registry.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, serviceRegistryName: string, options?: ServiceRegistriesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ServiceRegistriesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ServiceRegistriesCreateOrUpdateResponse = ServiceRegistryResource;

/** Optional parameters. */
export declare interface ServiceRegistriesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServiceRegistriesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServiceRegistriesGetResponse = ServiceRegistryResource;

/** Optional parameters. */
export declare interface ServiceRegistriesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ServiceRegistriesListNextResponse = ServiceRegistryResourceCollection;

/** Optional parameters. */
export declare interface ServiceRegistriesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ServiceRegistriesListResponse = ServiceRegistryResourceCollection;

/** Collection of instances belong to the Service Registry */
export declare interface ServiceRegistryInstance {
    /**
     * Name of the Service Registry instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Status of the Service Registry instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** Service Registry properties payload */
export declare interface ServiceRegistryProperties {
    /**
     * State of the Service Registry.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ServiceRegistryProvisioningState;
    /**
     * The requested resource quantity for required CPU and Memory.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceRequests?: ServiceRegistryResourceRequests;
    /**
     * Collection of instances belong to Service Registry.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instances?: ServiceRegistryInstance[];
}

/**
 * Defines values for ServiceRegistryProvisioningState. \
 * {@link KnownServiceRegistryProvisioningState} can be used interchangeably with ServiceRegistryProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Deleting**
 */
export declare type ServiceRegistryProvisioningState = string;

/** Service Registry resource */
export declare interface ServiceRegistryResource extends ProxyResource {
    /** Service Registry properties payload */
    properties?: ServiceRegistryProperties;
}

/** Object that includes an array of Service Registry resources and a possible link for next set */
export declare interface ServiceRegistryResourceCollection {
    /** Collection of Service Registry resources */
    value?: ServiceRegistryResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Resource request payload of Service Registry */
export declare interface ServiceRegistryResourceRequests {
    /**
     * Cpu allocated to each Service Registry instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cpu?: string;
    /**
     * Memory allocated to each Service Registry instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly memory?: string;
    /**
     * Instance count of the Service Registry
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceCount?: number;
}

/** Service resource */
export declare interface ServiceResource extends TrackedResource {
    /** Properties of the Service resource */
    properties?: ClusterResourceProperties;
    /** Sku of the Service resource */
    sku?: Sku;
}

/** Object that includes an array of Service resources and a possible link for next set */
export declare interface ServiceResourceList {
    /** Collection of Service resources */
    value?: ServiceResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Interface representing a Services. */
export declare interface Services {
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ServicesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ServiceResource>;
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: ServicesListOptionalParams): PagedAsyncIterableIterator<ServiceResource>;
    /**
     * Get a Service and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, options?: ServicesGetOptionalParams): Promise<ServicesGetResponse>;
    /**
     * Create a new Service or update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, resource: ServiceResource, options?: ServicesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServicesCreateOrUpdateResponse>, ServicesCreateOrUpdateResponse>>;
    /**
     * Create a new Service or update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, resource: ServiceResource, options?: ServicesCreateOrUpdateOptionalParams): Promise<ServicesCreateOrUpdateResponse>;
    /**
     * Operation to delete a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, options?: ServicesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Operation to delete a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, options?: ServicesDeleteOptionalParams): Promise<void>;
    /**
     * Operation to update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serviceName: string, resource: ServiceResource, options?: ServicesUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServicesUpdateResponse>, ServicesUpdateResponse>>;
    /**
     * Operation to update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serviceName: string, resource: ServiceResource, options?: ServicesUpdateOptionalParams): Promise<ServicesUpdateResponse>;
    /**
     * List test keys for a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    listTestKeys(resourceGroupName: string, serviceName: string, options?: ServicesListTestKeysOptionalParams): Promise<ServicesListTestKeysResponse>;
    /**
     * Regenerate a test key for a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param regenerateTestKeyRequest Parameters for the operation
     * @param options The options parameters.
     */
    regenerateTestKey(resourceGroupName: string, serviceName: string, regenerateTestKeyRequest: RegenerateTestKeyRequestPayload, options?: ServicesRegenerateTestKeyOptionalParams): Promise<ServicesRegenerateTestKeyResponse>;
    /**
     * Disable test endpoint functionality for a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    disableTestEndpoint(resourceGroupName: string, serviceName: string, options?: ServicesDisableTestEndpointOptionalParams): Promise<void>;
    /**
     * Enable test endpoint functionality for a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    enableTestEndpoint(resourceGroupName: string, serviceName: string, options?: ServicesEnableTestEndpointOptionalParams): Promise<ServicesEnableTestEndpointResponse>;
    /**
     * Stop a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, serviceName: string, options?: ServicesStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Stop a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, serviceName: string, options?: ServicesStopOptionalParams): Promise<void>;
    /**
     * Start a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, serviceName: string, options?: ServicesStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Start a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, serviceName: string, options?: ServicesStartOptionalParams): Promise<void>;
    /**
     * Checks that the resource name is valid and is not already in use.
     * @param location the region
     * @param availabilityParameters Parameters supplied to the operation.
     * @param options The options parameters.
     */
    checkNameAvailability(location: string, availabilityParameters: NameAvailabilityParameters, options?: ServicesCheckNameAvailabilityOptionalParams): Promise<ServicesCheckNameAvailabilityResponse>;
}

/** Optional parameters. */
export declare interface ServicesCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type ServicesCheckNameAvailabilityResponse = NameAvailability;

/** Optional parameters. */
export declare interface ServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ServicesCreateOrUpdateResponse = ServiceResource;

/** Optional parameters. */
export declare interface ServicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServicesDisableTestEndpointOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ServicesEnableTestEndpointOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the enableTestEndpoint operation. */
export declare type ServicesEnableTestEndpointResponse = TestKeys;

/** Optional parameters. */
export declare interface ServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServicesGetResponse = ServiceResource;

/** Optional parameters. */
export declare interface ServicesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ServicesListBySubscriptionNextResponse = ServiceResourceList;

/** Optional parameters. */
export declare interface ServicesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ServicesListBySubscriptionResponse = ServiceResourceList;

/** Optional parameters. */
export declare interface ServicesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ServicesListNextResponse = ServiceResourceList;

/** Optional parameters. */
export declare interface ServicesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ServicesListResponse = ServiceResourceList;

/** Optional parameters. */
export declare interface ServicesListTestKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listTestKeys operation. */
export declare type ServicesListTestKeysResponse = TestKeys;

/** Service specification payload */
export declare interface ServiceSpecification {
    /** Specifications of the Log for Azure Monitoring */
    logSpecifications?: LogSpecification[];
    /** Specifications of the Metrics for Azure Monitoring */
    metricSpecifications?: MetricSpecification[];
}

/** Optional parameters. */
export declare interface ServicesRegenerateTestKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateTestKey operation. */
export declare type ServicesRegenerateTestKeyResponse = TestKeys;

/** Optional parameters. */
export declare interface ServicesStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServicesStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServicesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ServicesUpdateResponse = ServiceResource;

/** Additional Service settings in vnet injection instance */
export declare interface ServiceVNetAddons {
    /** Indicates whether the log stream in vnet injection instance could be accessed from internet. */
    logStreamPublicEndpoint?: boolean;
}

/**
 * Defines values for SessionAffinity. \
 * {@link KnownSessionAffinity} can be used interchangeably with SessionAffinity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cookie** \
 * **None**
 */
export declare type SessionAffinity = string;

/** Sku of Azure Spring Apps */
export declare interface Sku {
    /** Name of the Sku */
    name?: string;
    /** Tier of the Sku */
    tier?: string;
    /** Current capacity of the target resource */
    capacity?: number;
}

/** The SKU capacity */
export declare interface SkuCapacity {
    /** Gets or sets the minimum. */
    minimum: number;
    /** Gets or sets the maximum. */
    maximum?: number;
    /** Gets or sets the default. */
    default?: number;
    /** Gets or sets the type of the scale. */
    scaleType?: SkuScaleType;
}

/** Interface representing a Skus. */
export declare interface Skus {
    /**
     * Lists all of the available skus of the Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    list(options?: SkusListOptionalParams): PagedAsyncIterableIterator<ResourceSku>;
}

/**
 * Defines values for SkuScaleType. \
 * {@link KnownSkuScaleType} can be used interchangeably with SkuScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Manual** \
 * **Automatic**
 */
export declare type SkuScaleType = string;

/** Optional parameters. */
export declare interface SkusListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SkusListNextResponse = ResourceSkuCollection;

/** Optional parameters. */
export declare interface SkusListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SkusListResponse = ResourceSkuCollection;

/** Uploaded Java source code binary for a deployment */
export declare interface SourceUploadedUserSourceInfo extends UploadedUserSourceInfo {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Source";
    /**
     * Selector for the artifact to be used for the deployment for multi-module projects. This should be
     * the relative path to the target module/project.
     */
    artifactSelector?: string;
    /** Runtime version of the source file */
    runtimeVersion?: string;
}

/** Single sign-on related configuration */
export declare interface SsoProperties {
    /** It defines the specific actions applications can be allowed to do on a user's behalf */
    scope?: string[];
    /** The public identifier for the application */
    clientId?: string;
    /** The secret known only to the application and the authorization server */
    clientSecret?: string;
    /** The URI of Issuer Identifier */
    issuerUri?: string;
}

/** KPack ClusterStack properties payload */
export declare interface StackProperties {
    /** Id of the ClusterStack. */
    id?: string;
    /** Version of the ClusterStack */
    version?: string;
}

/** storage resource of type Azure Storage Account. */
export declare interface StorageAccount extends StorageProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    storageType: "StorageAccount";
    /** The account name of the Azure Storage Account. */
    accountName: string;
    /** The account key of the Azure Storage Account. */
    accountKey: string;
}

/** Storage resource payload. */
export declare interface StorageProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    storageType: "StorageAccount";
}

export declare type StoragePropertiesUnion = StorageProperties | StorageAccount;

/** Storage resource payload. */
export declare interface StorageResource extends ProxyResource {
    /** Properties of the storage resource payload. */
    properties?: StoragePropertiesUnion;
}

/** Collection compose of storage resources list and a possible link for next page. */
export declare interface StorageResourceCollection {
    /** The storage resources list. */
    value?: StorageResource[];
    /** The link to next page of storage list. */
    nextLink?: string;
}

/** Interface representing a Storages. */
export declare interface Storages {
    /**
     * List all the storages of one Azure Spring Apps resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, options?: StoragesListOptionalParams): PagedAsyncIterableIterator<StorageResource>;
    /**
     * Get the storage resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param storageName The name of the storage resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, storageName: string, options?: StoragesGetOptionalParams): Promise<StoragesGetResponse>;
    /**
     * Create or update storage resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param storageName The name of the storage resource.
     * @param storageResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, storageName: string, storageResource: StorageResource, options?: StoragesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<StoragesCreateOrUpdateResponse>, StoragesCreateOrUpdateResponse>>;
    /**
     * Create or update storage resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param storageName The name of the storage resource.
     * @param storageResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, storageName: string, storageResource: StorageResource, options?: StoragesCreateOrUpdateOptionalParams): Promise<StoragesCreateOrUpdateResponse>;
    /**
     * Delete the storage resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param storageName The name of the storage resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, storageName: string, options?: StoragesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete the storage resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param storageName The name of the storage resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, storageName: string, options?: StoragesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface StoragesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type StoragesCreateOrUpdateResponse = StorageResource;

/** Optional parameters. */
export declare interface StoragesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface StoragesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type StoragesGetResponse = StorageResource;

/** Optional parameters. */
export declare interface StoragesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type StoragesListNextResponse = StorageResourceCollection;

/** Optional parameters. */
export declare interface StoragesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type StoragesListResponse = StorageResourceCollection;

/**
 * Defines values for StorageType. \
 * {@link KnownStorageType} can be used interchangeably with StorageType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StorageAccount**
 */
export declare type StorageType = string;

/** Supported buildpack resource payload */
export declare interface SupportedBuildpackResource extends ProxyResource {
    /** Supported buildpack resource properties */
    properties?: SupportedBuildpackResourceProperties;
}

/** Supported buildpack resource properties */
export declare interface SupportedBuildpackResourceProperties {
    /** The id of supported buildpack */
    buildpackId?: string;
}

/** Object that includes an array of supported buildpacks resources and a possible link for next set */
export declare interface SupportedBuildpacksCollection {
    /** Collection of supported buildpacks resources */
    value?: SupportedBuildpackResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/**
 * Defines values for SupportedRuntimePlatform. \
 * {@link KnownSupportedRuntimePlatform} can be used interchangeably with SupportedRuntimePlatform,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Java** \
 * **.NET Core**
 */
export declare type SupportedRuntimePlatform = string;

/**
 * Defines values for SupportedRuntimeValue. \
 * {@link KnownSupportedRuntimeValue} can be used interchangeably with SupportedRuntimeValue,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Java_8** \
 * **Java_11** \
 * **Java_17** \
 * **NetCore_31**
 */
export declare type SupportedRuntimeValue = string;

/** Supported deployment runtime version descriptor. */
export declare interface SupportedRuntimeVersion {
    /** The raw value which could be passed to deployment CRUD operations. */
    value?: SupportedRuntimeValue;
    /** The platform of this runtime version (possible values: "Java" or ".NET"). */
    platform?: SupportedRuntimePlatform;
    /** The detailed version (major.minor) of the platform. */
    version?: string;
}

/** Supported stack resource payload */
export declare interface SupportedStackResource extends ProxyResource {
    /** Supported stack resource properties */
    properties?: SupportedStackResourceProperties;
}

/** Supported stack resource properties */
export declare interface SupportedStackResourceProperties {
    /** The id of supported stack */
    stackId?: string;
    /** The version of supported stack */
    version?: string;
}

/** Object that includes an array of supported stacks resources and a possible link for next set */
export declare interface SupportedStacksCollection {
    /** Collection of supported stacks resources */
    value?: SupportedStackResource[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: LastModifiedByType;
    /** The timestamp of resource modification (UTC). */
    lastModifiedAt?: Date;
}

/** TCPSocketAction describes an action based on opening a socket */
export declare interface TCPSocketAction extends ProbeAction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TCPSocketAction";
}

/** Temporary disk payload */
export declare interface TemporaryDisk {
    /** Size of the temporary disk in GB */
    sizeInGB?: number;
    /** Mount path of the temporary disk */
    mountPath?: string;
}

/** Test keys payload */
export declare interface TestKeys {
    /** Primary key */
    primaryKey?: string;
    /** Secondary key */
    secondaryKey?: string;
    /** Primary test endpoint */
    primaryTestEndpoint?: string;
    /** Secondary test endpoint */
    secondaryTestEndpoint?: string;
    /** Indicates whether the test endpoint feature enabled or not */
    enabled?: boolean;
}

/**
 * Defines values for TestKeyType. \
 * {@link KnownTestKeyType} can be used interchangeably with TestKeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Primary** \
 * **Secondary**
 */
export declare type TestKeyType = string;

/** The resource model definition for a ARM tracked top level resource. */
export declare interface TrackedResource extends Resource {
    /** The GEO location of the resource. */
    location?: string;
    /** Tags of the service which is a list of key value pairs that describe the resource. */
    tags?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for TrafficDirection. \
 * {@link KnownTrafficDirection} can be used interchangeably with TrafficDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inbound** \
 * **Outbound**
 */
export declare type TrafficDirection = string;

/** The build result triggered by a build */
export declare interface TriggeredBuildResult {
    /** The unique build id of this build result */
    id?: string;
}

/**
 * Defines values for Type. \
 * {@link KnownType} can be used interchangeably with Type,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureFileVolume**
 */
export declare type Type = string;

/** Source with uploaded location */
export declare interface UploadedUserSourceInfo extends UserSourceInfo {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "UploadedUserSourceInfo" | "Jar" | "Source" | "NetCoreZip";
    /** Relative path of the storage which stores the source */
    relativePath?: string;
}

export declare type UploadedUserSourceInfoUnion = UploadedUserSourceInfo | JarUploadedUserSourceInfo | SourceUploadedUserSourceInfo | NetCoreZipUploadedUserSourceInfo;

/** The details of the user-assigned managed identity assigned to an App. */
export declare interface UserAssignedManagedIdentity {
    /**
     * Principal Id of user-assigned managed identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * Client Id of user-assigned managed identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/** Source information for a deployment */
export declare interface UserSourceInfo {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "UploadedUserSourceInfo" | "Jar" | "Source" | "NetCoreZip" | "BuildResult" | "Container";
    /** Version of the source */
    version?: string;
}

export declare type UserSourceInfoUnion = UserSourceInfo | UploadedUserSourceInfoUnion | BuildResultUserSourceInfo | CustomContainerUserSourceInfo;

/** Validate messages of the configuration service git repositories */
export declare interface ValidationMessages {
    /** The name of the configuration service git repository. */
    name?: string;
    /** Detailed validation messages. */
    messages?: string[];
}

export { }
