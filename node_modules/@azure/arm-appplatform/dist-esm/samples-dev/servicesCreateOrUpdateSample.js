/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AppPlatformManagementClient } from "@azure/arm-appplatform";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Create a new Service or update an exiting Service.
 *
 * @summary Create a new Service or update an exiting Service.
 * x-ms-original-file: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2023-03-01-preview/examples/Services_CreateOrUpdate.json
 */
function servicesCreateOrUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["APPPLATFORM_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["APPPLATFORM_RESOURCE_GROUP"] || "myResourceGroup";
        const serviceName = "myservice";
        const resource = {
            location: "eastus",
            properties: {},
            sku: { name: "S0", tier: "Standard" },
            tags: { key1: "value1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new AppPlatformManagementClient(credential, subscriptionId);
        const result = yield client.services.beginCreateOrUpdateAndWait(resourceGroupName, serviceName, resource);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create a new Service or update an exiting Service.
 *
 * @summary Create a new Service or update an exiting Service.
 * x-ms-original-file: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2023-03-01-preview/examples/Services_CreateOrUpdate_Consumption.json
 */
function servicesCreateOrUpdateConsumption() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["APPPLATFORM_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["APPPLATFORM_RESOURCE_GROUP"] || "myResourceGroup";
        const serviceName = "myservice";
        const resource = {
            location: "eastus",
            properties: {
                managedEnvironmentId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.App/managedEnvironments/myenvironment"
            },
            sku: { name: "S0", tier: "StandardGen2" },
            tags: { key1: "value1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new AppPlatformManagementClient(credential, subscriptionId);
        const result = yield client.services.beginCreateOrUpdateAndWait(resourceGroupName, serviceName, resource);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create a new Service or update an exiting Service.
 *
 * @summary Create a new Service or update an exiting Service.
 * x-ms-original-file: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2023-03-01-preview/examples/Services_CreateOrUpdate_Enterprise.json
 */
function servicesCreateOrUpdateEnterprise() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["APPPLATFORM_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["APPPLATFORM_RESOURCE_GROUP"] || "myResourceGroup";
        const serviceName = "myservice";
        const resource = {
            location: "eastus",
            properties: {
                marketplaceResource: {
                    plan: "tanzu-asc-ent-mtr",
                    product: "azure-spring-cloud-vmware-tanzu-2",
                    publisher: "vmware-inc"
                }
            },
            sku: { name: "E0", tier: "Enterprise" },
            tags: { key1: "value1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new AppPlatformManagementClient(credential, subscriptionId);
        const result = yield client.services.beginCreateOrUpdateAndWait(resourceGroupName, serviceName, resource);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create a new Service or update an exiting Service.
 *
 * @summary Create a new Service or update an exiting Service.
 * x-ms-original-file: specification/appplatform/resource-manager/Microsoft.AppPlatform/preview/2023-03-01-preview/examples/Services_CreateOrUpdate_VNetInjection.json
 */
function servicesCreateOrUpdateVNetInjection() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["APPPLATFORM_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["APPPLATFORM_RESOURCE_GROUP"] || "myResourceGroup";
        const serviceName = "myservice";
        const resource = {
            location: "eastus",
            properties: {
                networkProfile: {
                    appNetworkResourceGroup: "my-app-network-rg",
                    appSubnetId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/apps",
                    ingressConfig: { readTimeoutInSeconds: 300 },
                    serviceCidr: "10.8.0.0/16,10.244.0.0/16,10.245.0.1/16",
                    serviceRuntimeNetworkResourceGroup: "my-service-runtime-network-rg",
                    serviceRuntimeSubnetId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Network/virtualNetworks/myVirtualNetwork/subnets/serviceRuntime"
                },
                vnetAddons: {
                    dataPlanePublicEndpoint: true,
                    logStreamPublicEndpoint: true
                }
            },
            sku: { name: "S0", tier: "Standard" },
            tags: { key1: "value1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new AppPlatformManagementClient(credential, subscriptionId);
        const result = yield client.services.beginCreateOrUpdateAndWait(resourceGroupName, serviceName, resource);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        servicesCreateOrUpdate();
        servicesCreateOrUpdateConsumption();
        servicesCreateOrUpdateEnterprise();
        servicesCreateOrUpdateVNetInjection();
    });
}
main().catch(console.error);
//# sourceMappingURL=servicesCreateOrUpdateSample.js.map