/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AppPlatformManagementClient } from "@azure/arm-appplatform";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Create a new App or update an exiting App.
 *
 * @summary Create a new App or update an exiting App.
 * x-ms-original-file: specification/appplatform/resource-manager/Microsoft.AppPlatform/stable/2022-04-01/examples/Apps_CreateOrUpdate.json
 */
function appsCreateOrUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = "myResourceGroup";
        const serviceName = "myservice";
        const appName = "myapp";
        const appResource = {
            identity: {
                type: "SystemAssigned",
                principalId: undefined,
                tenantId: undefined
            },
            location: "eastus",
            properties: {
                addonConfigs: {},
                enableEndToEndTLS: false,
                fqdn: "myapp.mydomain.com",
                httpsOnly: false,
                loadedCertificates: [
                    {
                        loadTrustStore: false,
                        resourceId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycert1"
                    },
                    {
                        loadTrustStore: true,
                        resourceId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.AppPlatform/Spring/myservice/certificates/mycert2"
                    }
                ],
                persistentDisk: { mountPath: "/mypersistentdisk", sizeInGB: 2 },
                public: true,
                temporaryDisk: { mountPath: "/mytemporarydisk", sizeInGB: 2 }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AppPlatformManagementClient(credential, subscriptionId);
        const result = yield client.apps.beginCreateOrUpdateAndWait(resourceGroupName, serviceName, appName, appResource);
        console.log(result);
    });
}
appsCreateOrUpdate().catch(console.error);
//# sourceMappingURL=appsCreateOrUpdateSample.js.map