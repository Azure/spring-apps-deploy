/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, record, isPlaybackMode } from "@azure-tools/test-recorder";
import * as assert from "assert";
import { ClientSecretCredential } from "@azure/identity";
import { AppPlatformManagementClient } from "../src/appPlatformManagementClient";
const recorderEnvSetup = {
    replaceableVariables: {
        AZURE_CLIENT_ID: "azure_client_id",
        AZURE_CLIENT_SECRET: "azure_client_secret",
        AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
        SUBSCRIPTION_ID: "azure_subscription_id"
    },
    customizationsOnRecordings: [
        (recording) => recording.replace(/"access_token":"[^"]*"/g, `"access_token":"access_token"`)
    ],
    queryParametersToSkip: []
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("AppPlatform test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let serviceName;
    let appName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = record(this, recorderEnvSetup);
            subscriptionId = env.SUBSCRIPTION_ID;
            // This is an example of how the environment variables are used
            const credential = new ClientSecretCredential(env.AZURE_TENANT_ID, env.AZURE_CLIENT_ID, env.AZURE_CLIENT_SECRET);
            client = new AppPlatformManagementClient(credential, subscriptionId);
            location = "eastus";
            resourceGroup = "myjstest";
            serviceName = "myservicexxx";
            appName = "myappxxx";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("services create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.services.beginCreateOrUpdateAndWait(resourceGroup, serviceName, {
                sku: {
                    name: "S0",
                    tier: "Standard"
                },
                tags: {
                    key1: "value1"
                },
                location: location
            }, testPollingOptions);
        });
    });
    it("apps create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.apps.beginCreateOrUpdateAndWait(resourceGroup, serviceName, appName, {
                properties: {
                    public: true,
                    // activeDeploymentName: "mydeployment1",
                    fqdn: "myapp.mydomain.com",
                    httpsOnly: false,
                    temporaryDisk: {
                        sizeInGB: 2,
                        mountPath: "/mytemporarydisk"
                    },
                    persistentDisk: {
                        sizeInGB: 2,
                        mountPath: "/mypersistentdisk"
                    }
                }
            }, testPollingOptions);
        });
    });
    it("services get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.services.get(resourceGroup, serviceName);
            assert.equal(res.name, serviceName);
        });
    });
    it("apps get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.apps.get(resourceGroup, serviceName, appName);
            assert.equal(res.name, appName);
        });
    });
    it("apps list test", function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.apps.list(resourceGroup, serviceName)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("services list test", function () {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.services.list(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("apps delete test", function () {
        var e_3, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.apps.beginDeleteAndWait(resourceGroup, serviceName, appName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.apps.list(resourceGroup, serviceName)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("services delete test", function () {
        var e_4, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.services.beginDeleteAndWait(resourceGroup, serviceName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.services.list(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=appplatform_examples.js.map