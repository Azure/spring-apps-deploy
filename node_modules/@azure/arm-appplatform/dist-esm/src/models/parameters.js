/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { ServiceResource as ServiceResourceMapper, RegenerateTestKeyRequestPayload as RegenerateTestKeyRequestPayloadMapper, NameAvailabilityParameters as NameAvailabilityParametersMapper, ConfigServerResource as ConfigServerResourceMapper, ConfigServerSettings as ConfigServerSettingsMapper, ConfigurationServiceResource as ConfigurationServiceResourceMapper, ConfigurationServiceSettings as ConfigurationServiceSettingsMapper, Build as BuildMapper, BuildpackBindingResource as BuildpackBindingResourceMapper, BuilderResource as BuilderResourceMapper, BuildServiceAgentPoolResource as BuildServiceAgentPoolResourceMapper, MonitoringSettingResource as MonitoringSettingResourceMapper, AppResource as AppResourceMapper, ActiveDeploymentCollection as ActiveDeploymentCollectionMapper, CustomDomainValidatePayload as CustomDomainValidatePayloadMapper, BindingResource as BindingResourceMapper, CertificateResource as CertificateResourceMapper, CustomDomainResource as CustomDomainResourceMapper, DeploymentResource as DeploymentResourceMapper, DiagnosticParameters as DiagnosticParametersMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const serviceName = {
    parameterPath: "serviceName",
    mapper: {
        serializedName: "serviceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const resource = {
    parameterPath: "resource",
    mapper: ServiceResourceMapper
};
export const regenerateTestKeyRequest = {
    parameterPath: "regenerateTestKeyRequest",
    mapper: RegenerateTestKeyRequestPayloadMapper
};
export const availabilityParameters = {
    parameterPath: "availabilityParameters",
    mapper: NameAvailabilityParametersMapper
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const configServerResource = {
    parameterPath: "configServerResource",
    mapper: ConfigServerResourceMapper
};
export const configServerSettings = {
    parameterPath: "configServerSettings",
    mapper: ConfigServerSettingsMapper
};
export const configurationServiceName = {
    parameterPath: "configurationServiceName",
    mapper: {
        serializedName: "configurationServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const configurationServiceResource = {
    parameterPath: "configurationServiceResource",
    mapper: ConfigurationServiceResourceMapper
};
export const settings = {
    parameterPath: "settings",
    mapper: ConfigurationServiceSettingsMapper
};
export const serviceRegistryName = {
    parameterPath: "serviceRegistryName",
    mapper: {
        serializedName: "serviceRegistryName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const buildServiceName = {
    parameterPath: "buildServiceName",
    mapper: {
        serializedName: "buildServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const buildName = {
    parameterPath: "buildName",
    mapper: {
        serializedName: "buildName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const build = {
    parameterPath: "build",
    mapper: BuildMapper
};
export const buildResultName = {
    parameterPath: "buildResultName",
    mapper: {
        serializedName: "buildResultName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const buildpackName = {
    parameterPath: "buildpackName",
    mapper: {
        serializedName: "buildpackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const stackName = {
    parameterPath: "stackName",
    mapper: {
        serializedName: "stackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const builderName = {
    parameterPath: "builderName",
    mapper: {
        serializedName: "builderName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const buildpackBindingName = {
    parameterPath: "buildpackBindingName",
    mapper: {
        serializedName: "buildpackBindingName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const buildpackBinding = {
    parameterPath: "buildpackBinding",
    mapper: BuildpackBindingResourceMapper
};
export const builderResource = {
    parameterPath: "builderResource",
    mapper: BuilderResourceMapper
};
export const agentPoolName = {
    parameterPath: "agentPoolName",
    mapper: {
        serializedName: "agentPoolName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const agentPoolResource = {
    parameterPath: "agentPoolResource",
    mapper: BuildServiceAgentPoolResourceMapper
};
export const monitoringSettingResource = {
    parameterPath: "monitoringSettingResource",
    mapper: MonitoringSettingResourceMapper
};
export const appName = {
    parameterPath: "appName",
    mapper: {
        serializedName: "appName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const syncStatus = {
    parameterPath: ["options", "syncStatus"],
    mapper: {
        serializedName: "syncStatus",
        type: {
            name: "String"
        }
    }
};
export const appResource = {
    parameterPath: "appResource",
    mapper: AppResourceMapper
};
export const activeDeploymentCollection = {
    parameterPath: "activeDeploymentCollection",
    mapper: ActiveDeploymentCollectionMapper
};
export const validatePayload = {
    parameterPath: "validatePayload",
    mapper: CustomDomainValidatePayloadMapper
};
export const bindingName = {
    parameterPath: "bindingName",
    mapper: {
        serializedName: "bindingName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const bindingResource = {
    parameterPath: "bindingResource",
    mapper: BindingResourceMapper
};
export const certificateName = {
    parameterPath: "certificateName",
    mapper: {
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const certificateResource = {
    parameterPath: "certificateResource",
    mapper: CertificateResourceMapper
};
export const domainName = {
    parameterPath: "domainName",
    mapper: {
        serializedName: "domainName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const domainResource = {
    parameterPath: "domainResource",
    mapper: CustomDomainResourceMapper
};
export const deploymentName = {
    parameterPath: "deploymentName",
    mapper: {
        serializedName: "deploymentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const deploymentResource = {
    parameterPath: "deploymentResource",
    mapper: DeploymentResourceMapper
};
export const version = {
    parameterPath: ["options", "version"],
    mapper: {
        serializedName: "version",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: "Multi"
};
export const diagnosticParameters = {
    parameterPath: "diagnosticParameters",
    mapper: DiagnosticParametersMapper
};
//# sourceMappingURL=parameters.js.map