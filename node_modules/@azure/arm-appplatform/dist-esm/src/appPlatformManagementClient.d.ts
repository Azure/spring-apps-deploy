import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Services, ConfigServers, ConfigurationServices, ServiceRegistries, ApplicationLiveViews, DevToolPortals, ContainerRegistries, BuildServiceOperations, BuildpackBinding, BuildServiceBuilder, BuildServiceAgentPool, MonitoringSettings, Apps, Bindings, Storages, Certificates, CustomDomains, Deployments, Operations, RuntimeVersions, Skus, Gateways, GatewayRouteConfigs, GatewayCustomDomains, ApiPortals, ApiPortalCustomDomains, ApplicationAccelerators, CustomizedAccelerators, PredefinedAccelerators } from "./operationsInterfaces";
import { AppPlatformManagementClientOptionalParams } from "./models";
export declare class AppPlatformManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AppPlatformManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Gets subscription ID which uniquely identify the Microsoft Azure subscription.
     *                       The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AppPlatformManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    services: Services;
    configServers: ConfigServers;
    configurationServices: ConfigurationServices;
    serviceRegistries: ServiceRegistries;
    applicationLiveViews: ApplicationLiveViews;
    devToolPortals: DevToolPortals;
    containerRegistries: ContainerRegistries;
    buildServiceOperations: BuildServiceOperations;
    buildpackBinding: BuildpackBinding;
    buildServiceBuilder: BuildServiceBuilder;
    buildServiceAgentPool: BuildServiceAgentPool;
    monitoringSettings: MonitoringSettings;
    apps: Apps;
    bindings: Bindings;
    storages: Storages;
    certificates: Certificates;
    customDomains: CustomDomains;
    deployments: Deployments;
    operations: Operations;
    runtimeVersions: RuntimeVersions;
    skus: Skus;
    gateways: Gateways;
    gatewayRouteConfigs: GatewayRouteConfigs;
    gatewayCustomDomains: GatewayCustomDomains;
    apiPortals: ApiPortals;
    apiPortalCustomDomains: ApiPortalCustomDomains;
    applicationAccelerators: ApplicationAccelerators;
    customizedAccelerators: CustomizedAccelerators;
    predefinedAccelerators: PredefinedAccelerators;
}
//# sourceMappingURL=appPlatformManagementClient.d.ts.map