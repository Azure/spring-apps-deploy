/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing GatewayCustomDomains operations. */
export class GatewayCustomDomainsImpl {
    /**
     * Initialize a new instance of the class GatewayCustomDomains class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handle requests to list all Spring Cloud Gateway custom domains.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, gatewayName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, gatewayName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, serviceName, gatewayName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, gatewayName, options) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield __await(this._list(resourceGroupName, serviceName, gatewayName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listNext(resourceGroupName, serviceName, gatewayName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, gatewayName, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(resourceGroupName, serviceName, gatewayName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, gatewayName, domainName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, gatewayName, domainName, options }, getOperationSpec);
    }
    /**
     * Create or update the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param gatewayCustomDomainResource The gateway custom domain resource for the create or update
     *                                    operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, gatewayName, domainName, gatewayCustomDomainResource, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                gatewayName,
                domainName,
                gatewayCustomDomainResource,
                options
            }, createOrUpdateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param gatewayCustomDomainResource The gateway custom domain resource for the create or update
     *                                    operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, gatewayName, domainName, gatewayCustomDomainResource, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, gatewayName, domainName, gatewayCustomDomainResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, gatewayName, domainName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, gatewayName, domainName, options }, deleteOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, gatewayName, domainName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, gatewayName, domainName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handle requests to list all Spring Cloud Gateway custom domains.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, gatewayName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, gatewayName, options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, gatewayName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, gatewayName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/domains/{domainName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GatewayCustomDomainResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.domainName,
        Parameters.gatewayName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/domains/{domainName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.GatewayCustomDomainResource
        },
        201: {
            bodyMapper: Mappers.GatewayCustomDomainResource
        },
        202: {
            bodyMapper: Mappers.GatewayCustomDomainResource
        },
        204: {
            bodyMapper: Mappers.GatewayCustomDomainResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.gatewayCustomDomainResource,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.domainName,
        Parameters.gatewayName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/domains/{domainName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.domainName,
        Parameters.gatewayName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/domains",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GatewayCustomDomainResourceCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.gatewayName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GatewayCustomDomainResourceCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.nextLink,
        Parameters.gatewayName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=gatewayCustomDomains.js.map