/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing BuildServiceOperations operations. */
export class BuildServiceOperationsImpl {
    /**
     * Initialize a new instance of the class BuildServiceOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List build services resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    listBuildServices(resourceGroupName, serviceName, options) {
        const iter = this.listBuildServicesPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBuildServicesPagingPage(resourceGroupName, serviceName, options);
            }
        };
    }
    listBuildServicesPagingPage(resourceGroupName, serviceName, options) {
        return __asyncGenerator(this, arguments, function* listBuildServicesPagingPage_1() {
            let result = yield __await(this._listBuildServices(resourceGroupName, serviceName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listBuildServicesNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listBuildServicesPagingAll(resourceGroupName, serviceName, options) {
        return __asyncGenerator(this, arguments, function* listBuildServicesPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listBuildServicesPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List KPack builds.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    listBuilds(resourceGroupName, serviceName, buildServiceName, options) {
        const iter = this.listBuildsPagingAll(resourceGroupName, serviceName, buildServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBuildsPagingPage(resourceGroupName, serviceName, buildServiceName, options);
            }
        };
    }
    listBuildsPagingPage(resourceGroupName, serviceName, buildServiceName, options) {
        return __asyncGenerator(this, arguments, function* listBuildsPagingPage_1() {
            let result = yield __await(this._listBuilds(resourceGroupName, serviceName, buildServiceName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listBuildsNext(resourceGroupName, serviceName, buildServiceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listBuildsPagingAll(resourceGroupName, serviceName, buildServiceName, options) {
        return __asyncGenerator(this, arguments, function* listBuildsPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listBuildsPagingPage(resourceGroupName, serviceName, buildServiceName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List KPack build results.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    listBuildResults(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        const iter = this.listBuildResultsPagingAll(resourceGroupName, serviceName, buildServiceName, buildName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBuildResultsPagingPage(resourceGroupName, serviceName, buildServiceName, buildName, options);
            }
        };
    }
    listBuildResultsPagingPage(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return __asyncGenerator(this, arguments, function* listBuildResultsPagingPage_1() {
            let result = yield __await(this._listBuildResults(resourceGroupName, serviceName, buildServiceName, buildName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listBuildResultsNext(resourceGroupName, serviceName, buildServiceName, buildName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listBuildResultsPagingAll(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return __asyncGenerator(this, arguments, function* listBuildResultsPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listBuildResultsPagingPage(resourceGroupName, serviceName, buildServiceName, buildName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * List build services resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _listBuildServices(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listBuildServicesOperationSpec);
    }
    /**
     * Get a build service resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    getBuildService(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, getBuildServiceOperationSpec);
    }
    /**
     * List KPack builds.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    _listBuilds(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listBuildsOperationSpec);
    }
    /**
     * Get a KPack build.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    getBuild(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, buildName, options }, getBuildOperationSpec);
    }
    /**
     * Create or update a KPack build.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param build Parameters for the create or update operation
     * @param options The options parameters.
     */
    createOrUpdateBuild(resourceGroupName, serviceName, buildServiceName, buildName, build, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildName,
            build,
            options
        }, createOrUpdateBuildOperationSpec);
    }
    /**
     * List KPack build results.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    _listBuildResults(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, buildName, options }, listBuildResultsOperationSpec);
    }
    /**
     * Get a KPack build result.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param buildResultName The name of the build result resource.
     * @param options The options parameters.
     */
    getBuildResult(resourceGroupName, serviceName, buildServiceName, buildName, buildResultName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildName,
            buildResultName,
            options
        }, getBuildResultOperationSpec);
    }
    /**
     * Get a KPack build result log download URL.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param buildResultName The name of the build result resource.
     * @param options The options parameters.
     */
    getBuildResultLog(resourceGroupName, serviceName, buildServiceName, buildName, buildResultName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildName,
            buildResultName,
            options
        }, getBuildResultLogOperationSpec);
    }
    /**
     * Get an resource upload URL for build service, which may be artifacts or source archive.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    getResourceUploadUrl(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, getResourceUploadUrlOperationSpec);
    }
    /**
     * Get all supported buildpacks.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    listSupportedBuildpacks(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listSupportedBuildpacksOperationSpec);
    }
    /**
     * Get the supported buildpack resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildpackName The name of the buildpack resource.
     * @param options The options parameters.
     */
    getSupportedBuildpack(resourceGroupName, serviceName, buildServiceName, buildpackName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildpackName,
            options
        }, getSupportedBuildpackOperationSpec);
    }
    /**
     * Get all supported stacks.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    listSupportedStacks(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listSupportedStacksOperationSpec);
    }
    /**
     * Get the supported stack resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param stackName The name of the stack resource.
     * @param options The options parameters.
     */
    getSupportedStack(resourceGroupName, serviceName, buildServiceName, stackName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, stackName, options }, getSupportedStackOperationSpec);
    }
    /**
     * ListBuildServicesNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the ListBuildServices method.
     * @param options The options parameters.
     */
    _listBuildServicesNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listBuildServicesNextOperationSpec);
    }
    /**
     * ListBuildsNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param nextLink The nextLink from the previous successful call to the ListBuilds method.
     * @param options The options parameters.
     */
    _listBuildsNext(resourceGroupName, serviceName, buildServiceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, nextLink, options }, listBuildsNextOperationSpec);
    }
    /**
     * ListBuildResultsNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param nextLink The nextLink from the previous successful call to the ListBuildResults method.
     * @param options The options parameters.
     */
    _listBuildResultsNext(resourceGroupName, serviceName, buildServiceName, buildName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildName,
            nextLink,
            options
        }, listBuildResultsNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listBuildServicesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BuildServiceCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getBuildServiceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BuildService
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.buildServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBuildsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BuildCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.buildServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getBuildOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Build
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.buildServiceName,
        Parameters.buildName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateBuildOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Build
        },
        201: {
            bodyMapper: Mappers.Build
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.build,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.buildServiceName,
        Parameters.buildName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listBuildResultsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}/results",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BuildResultCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.buildServiceName,
        Parameters.buildName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getBuildResultOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}/results/{buildResultName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BuildResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.buildServiceName,
        Parameters.buildName,
        Parameters.buildResultName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getBuildResultLogOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}/results/{buildResultName}/getLogFileUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.BuildResultLog
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.buildServiceName,
        Parameters.buildName,
        Parameters.buildResultName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getResourceUploadUrlOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/getResourceUploadUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceUploadDefinition
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.buildServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listSupportedBuildpacksOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedBuildpacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SupportedBuildpacksCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.buildServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getSupportedBuildpackOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedBuildpacks/{buildpackName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SupportedBuildpackResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.buildServiceName,
        Parameters.buildpackName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listSupportedStacksOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedStacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SupportedStacksCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.buildServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getSupportedStackOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedStacks/{stackName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SupportedStackResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.buildServiceName,
        Parameters.stackName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBuildServicesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BuildServiceCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBuildsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BuildCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.nextLink,
        Parameters.buildServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBuildResultsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BuildResultCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.nextLink,
        Parameters.buildServiceName,
        Parameters.buildName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=buildServiceOperations.js.map