import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ApiPortals } from "../operationsInterfaces";
import { AppPlatformManagementClient } from "../appPlatformManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { ApiPortalResource, ApiPortalsListOptionalParams, ApiPortalsGetOptionalParams, ApiPortalsGetResponse, ApiPortalsCreateOrUpdateOptionalParams, ApiPortalsCreateOrUpdateResponse, ApiPortalsDeleteOptionalParams, CustomDomainValidatePayload, ApiPortalsValidateDomainOptionalParams, ApiPortalsValidateDomainResponse } from "../models";
/** Class containing ApiPortals operations. */
export declare class ApiPortalsImpl implements ApiPortals {
    private readonly client;
    /**
     * Initialize a new instance of the class ApiPortals class.
     * @param client Reference to the service client
     */
    constructor(client: AppPlatformManagementClient);
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serviceName: string, options?: ApiPortalsListOptionalParams): PagedAsyncIterableIterator<ApiPortalResource>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get the API portal and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, apiPortalName: string, options?: ApiPortalsGetOptionalParams): Promise<ApiPortalsGetResponse>;
    /**
     * Create the default API portal or update the existing API portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param apiPortalResource The API portal for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, apiPortalName: string, apiPortalResource: ApiPortalResource, options?: ApiPortalsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ApiPortalsCreateOrUpdateResponse>, ApiPortalsCreateOrUpdateResponse>>;
    /**
     * Create the default API portal or update the existing API portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param apiPortalResource The API portal for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serviceName: string, apiPortalName: string, apiPortalResource: ApiPortalResource, options?: ApiPortalsCreateOrUpdateOptionalParams): Promise<ApiPortalsCreateOrUpdateResponse>;
    /**
     * Delete the default API portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serviceName: string, apiPortalName: string, options?: ApiPortalsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete the default API portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serviceName: string, apiPortalName: string, options?: ApiPortalsDeleteOptionalParams): Promise<void>;
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Check the domains are valid as well as not in use.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param validatePayload Custom domain payload to be validated
     * @param options The options parameters.
     */
    validateDomain(resourceGroupName: string, serviceName: string, apiPortalName: string, validatePayload: CustomDomainValidatePayload, options?: ApiPortalsValidateDomainOptionalParams): Promise<ApiPortalsValidateDomainResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=apiPortals.d.ts.map