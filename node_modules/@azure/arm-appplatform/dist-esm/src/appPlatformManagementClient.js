/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import { ServicesImpl, ConfigServersImpl, ConfigurationServicesImpl, ServiceRegistriesImpl, BuildServiceOperationsImpl, BuildpackBindingImpl, BuildServiceBuilderImpl, BuildServiceAgentPoolImpl, MonitoringSettingsImpl, AppsImpl, BindingsImpl, CertificatesImpl, CustomDomainsImpl, DeploymentsImpl, OperationsImpl, RuntimeVersionsImpl, SkusImpl } from "./operations";
export class AppPlatformManagementClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the AppPlatformManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Gets subscription ID which uniquely identify the Microsoft Azure subscription.
     *                       The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-appplatform/2.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
        }
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline.bearerTokenAuthenticationPolicyName);
            if (!bearerTokenAuthenticationPolicyFound) {
                this.pipeline.removePolicy({
                    name: coreRestPipeline.bearerTokenAuthenticationPolicyName
                });
                this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                    scopes: `${optionsWithDefaults.baseUri}/.default`,
                    challengeCallbacks: {
                        authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge
                    }
                }));
            }
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-04-01";
        this.services = new ServicesImpl(this);
        this.configServers = new ConfigServersImpl(this);
        this.configurationServices = new ConfigurationServicesImpl(this);
        this.serviceRegistries = new ServiceRegistriesImpl(this);
        this.buildServiceOperations = new BuildServiceOperationsImpl(this);
        this.buildpackBinding = new BuildpackBindingImpl(this);
        this.buildServiceBuilder = new BuildServiceBuilderImpl(this);
        this.buildServiceAgentPool = new BuildServiceAgentPoolImpl(this);
        this.monitoringSettings = new MonitoringSettingsImpl(this);
        this.apps = new AppsImpl(this);
        this.bindings = new BindingsImpl(this);
        this.certificates = new CertificatesImpl(this);
        this.customDomains = new CustomDomainsImpl(this);
        this.deployments = new DeploymentsImpl(this);
        this.operations = new OperationsImpl(this);
        this.runtimeVersions = new RuntimeVersionsImpl(this);
        this.skus = new SkusImpl(this);
    }
}
//# sourceMappingURL=appPlatformManagementClient.js.map