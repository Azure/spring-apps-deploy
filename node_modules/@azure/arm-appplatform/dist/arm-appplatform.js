/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmAppplatform = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var NetworkProfileOutboundIPs = {
        serializedName: "NetworkProfile_outboundIPs",
        type: {
            name: "Composite",
            className: "NetworkProfileOutboundIPs",
            modelProperties: {
                publicIPs: {
                    readOnly: true,
                    serializedName: "publicIPs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var RequiredTraffic = {
        serializedName: "RequiredTraffic",
        type: {
            name: "Composite",
            className: "RequiredTraffic",
            modelProperties: {
                protocol: {
                    readOnly: true,
                    serializedName: "protocol",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    readOnly: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                },
                ips: {
                    readOnly: true,
                    serializedName: "ips",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                fqdns: {
                    readOnly: true,
                    serializedName: "fqdns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                direction: {
                    readOnly: true,
                    serializedName: "direction",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkProfile = {
        serializedName: "NetworkProfile",
        type: {
            name: "Composite",
            className: "NetworkProfile",
            modelProperties: {
                serviceRuntimeSubnetId: {
                    serializedName: "serviceRuntimeSubnetId",
                    type: {
                        name: "String"
                    }
                },
                appSubnetId: {
                    serializedName: "appSubnetId",
                    type: {
                        name: "String"
                    }
                },
                serviceCidr: {
                    serializedName: "serviceCidr",
                    type: {
                        name: "String"
                    }
                },
                serviceRuntimeNetworkResourceGroup: {
                    serializedName: "serviceRuntimeNetworkResourceGroup",
                    type: {
                        name: "String"
                    }
                },
                appNetworkResourceGroup: {
                    serializedName: "appNetworkResourceGroup",
                    type: {
                        name: "String"
                    }
                },
                outboundIPs: {
                    readOnly: true,
                    serializedName: "outboundIPs",
                    type: {
                        name: "Composite",
                        className: "NetworkProfileOutboundIPs"
                    }
                },
                requiredTraffics: {
                    readOnly: true,
                    serializedName: "requiredTraffics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RequiredTraffic"
                            }
                        }
                    }
                }
            }
        }
    };
    var ClusterResourceProperties = {
        serializedName: "ClusterResourceProperties",
        type: {
            name: "Composite",
            className: "ClusterResourceProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                networkProfile: {
                    serializedName: "networkProfile",
                    type: {
                        name: "Composite",
                        className: "NetworkProfile"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "Number"
                    }
                },
                serviceId: {
                    readOnly: true,
                    serializedName: "serviceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    defaultValue: 'S0',
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    defaultValue: 'Standard',
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ServiceResource = {
        serializedName: "ServiceResource",
        type: {
            name: "Composite",
            className: "ServiceResource",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ClusterResourceProperties"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var ManagedIdentityProperties = {
        serializedName: "ManagedIdentityProperties",
        type: {
            name: "Composite",
            className: "ManagedIdentityProperties",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                principalId: {
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConfigServerSettingsErrorRecord = {
        serializedName: "ConfigServerSettingsErrorRecord",
        type: {
            name: "Composite",
            className: "ConfigServerSettingsErrorRecord",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                uri: {
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                messages: {
                    serializedName: "messages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConfigServerSettingsValidateResult = {
        serializedName: "ConfigServerSettingsValidateResult",
        type: {
            name: "Composite",
            className: "ConfigServerSettingsValidateResult",
            modelProperties: {
                isValid: {
                    serializedName: "isValid",
                    type: {
                        name: "Boolean"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConfigServerSettingsErrorRecord"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GitPatternRepository = {
        serializedName: "GitPatternRepository",
        type: {
            name: "Composite",
            className: "GitPatternRepository",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                pattern: {
                    serializedName: "pattern",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                uri: {
                    required: true,
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                searchPaths: {
                    serializedName: "searchPaths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                username: {
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                hostKey: {
                    serializedName: "hostKey",
                    type: {
                        name: "String"
                    }
                },
                hostKeyAlgorithm: {
                    serializedName: "hostKeyAlgorithm",
                    type: {
                        name: "String"
                    }
                },
                privateKey: {
                    serializedName: "privateKey",
                    type: {
                        name: "String"
                    }
                },
                strictHostKeyChecking: {
                    serializedName: "strictHostKeyChecking",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ConfigServerGitProperty = {
        serializedName: "ConfigServerGitProperty",
        type: {
            name: "Composite",
            className: "ConfigServerGitProperty",
            modelProperties: {
                repositories: {
                    serializedName: "repositories",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GitPatternRepository"
                            }
                        }
                    }
                },
                uri: {
                    required: true,
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                label: {
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                searchPaths: {
                    serializedName: "searchPaths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                username: {
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                hostKey: {
                    serializedName: "hostKey",
                    type: {
                        name: "String"
                    }
                },
                hostKeyAlgorithm: {
                    serializedName: "hostKeyAlgorithm",
                    type: {
                        name: "String"
                    }
                },
                privateKey: {
                    serializedName: "privateKey",
                    type: {
                        name: "String"
                    }
                },
                strictHostKeyChecking: {
                    serializedName: "strictHostKeyChecking",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ConfigServerSettings = {
        serializedName: "ConfigServerSettings",
        type: {
            name: "Composite",
            className: "ConfigServerSettings",
            modelProperties: {
                gitProperty: {
                    serializedName: "gitProperty",
                    type: {
                        name: "Composite",
                        className: "ConfigServerGitProperty"
                    }
                }
            }
        }
    };
    var ConfigServerProperties = {
        serializedName: "ConfigServerProperties",
        type: {
            name: "Composite",
            className: "ConfigServerProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorModel"
                    }
                },
                configServer: {
                    serializedName: "configServer",
                    type: {
                        name: "Composite",
                        className: "ConfigServerSettings"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var ConfigServerResource = {
        serializedName: "ConfigServerResource",
        type: {
            name: "Composite",
            className: "ConfigServerResource",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ConfigServerProperties"
                    }
                } })
        }
    };
    var ApplicationInsightsAgentVersions = {
        serializedName: "applicationInsightsAgentVersions",
        type: {
            name: "Composite",
            className: "ApplicationInsightsAgentVersions",
            modelProperties: {
                java: {
                    readOnly: true,
                    serializedName: "java",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MonitoringSettingProperties = {
        serializedName: "MonitoringSettingProperties",
        type: {
            name: "Composite",
            className: "MonitoringSettingProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorModel"
                    }
                },
                traceEnabled: {
                    serializedName: "traceEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                appInsightsInstrumentationKey: {
                    serializedName: "appInsightsInstrumentationKey",
                    type: {
                        name: "String"
                    }
                },
                appInsightsSamplingRate: {
                    serializedName: "appInsightsSamplingRate",
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                appInsightsAgentVersions: {
                    serializedName: "appInsightsAgentVersions",
                    type: {
                        name: "Composite",
                        className: "ApplicationInsightsAgentVersions"
                    }
                }
            }
        }
    };
    var MonitoringSettingResource = {
        serializedName: "MonitoringSettingResource",
        type: {
            name: "Composite",
            className: "MonitoringSettingResource",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "MonitoringSettingProperties"
                    }
                } })
        }
    };
    var TestKeys = {
        serializedName: "TestKeys",
        type: {
            name: "Composite",
            className: "TestKeys",
            modelProperties: {
                primaryKey: {
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                },
                primaryTestEndpoint: {
                    serializedName: "primaryTestEndpoint",
                    type: {
                        name: "String"
                    }
                },
                secondaryTestEndpoint: {
                    serializedName: "secondaryTestEndpoint",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var RegenerateTestKeyRequestPayload = {
        serializedName: "RegenerateTestKeyRequestPayload",
        type: {
            name: "Composite",
            className: "RegenerateTestKeyRequestPayload",
            modelProperties: {
                keyType: {
                    required: true,
                    serializedName: "keyType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TemporaryDisk = {
        serializedName: "TemporaryDisk",
        type: {
            name: "Composite",
            className: "TemporaryDisk",
            modelProperties: {
                sizeInGB: {
                    serializedName: "sizeInGB",
                    constraints: {
                        InclusiveMaximum: 5,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                mountPath: {
                    serializedName: "mountPath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PersistentDisk = {
        serializedName: "PersistentDisk",
        type: {
            name: "Composite",
            className: "PersistentDisk",
            modelProperties: {
                sizeInGB: {
                    serializedName: "sizeInGB",
                    constraints: {
                        InclusiveMaximum: 50,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                usedInGB: {
                    readOnly: true,
                    serializedName: "usedInGB",
                    constraints: {
                        InclusiveMaximum: 50,
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                mountPath: {
                    serializedName: "mountPath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppResourceProperties = {
        serializedName: "AppResourceProperties",
        type: {
            name: "Composite",
            className: "AppResourceProperties",
            modelProperties: {
                publicProperty: {
                    serializedName: "public",
                    type: {
                        name: "Boolean"
                    }
                },
                url: {
                    readOnly: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                activeDeploymentName: {
                    serializedName: "activeDeploymentName",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                },
                httpsOnly: {
                    serializedName: "httpsOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                createdTime: {
                    readOnly: true,
                    serializedName: "createdTime",
                    type: {
                        name: "DateTime"
                    }
                },
                temporaryDisk: {
                    serializedName: "temporaryDisk",
                    type: {
                        name: "Composite",
                        className: "TemporaryDisk"
                    }
                },
                persistentDisk: {
                    serializedName: "persistentDisk",
                    type: {
                        name: "Composite",
                        className: "PersistentDisk"
                    }
                },
                enableEndToEndTLS: {
                    serializedName: "enableEndToEndTLS",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var AppResource = {
        serializedName: "AppResource",
        type: {
            name: "Composite",
            className: "AppResource",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "AppResourceProperties"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ManagedIdentityProperties"
                    }
                }, location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ResourceUploadDefinition = {
        serializedName: "ResourceUploadDefinition",
        type: {
            name: "Composite",
            className: "ResourceUploadDefinition",
            modelProperties: {
                relativePath: {
                    serializedName: "relativePath",
                    type: {
                        name: "String"
                    }
                },
                uploadUrl: {
                    serializedName: "uploadUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BindingResourceProperties = {
        serializedName: "BindingResourceProperties",
        type: {
            name: "Composite",
            className: "BindingResourceProperties",
            modelProperties: {
                resourceName: {
                    readOnly: true,
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                },
                bindingParameters: {
                    serializedName: "bindingParameters",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                },
                generatedProperties: {
                    readOnly: true,
                    serializedName: "generatedProperties",
                    type: {
                        name: "String"
                    }
                },
                createdAt: {
                    readOnly: true,
                    serializedName: "createdAt",
                    type: {
                        name: "String"
                    }
                },
                updatedAt: {
                    readOnly: true,
                    serializedName: "updatedAt",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BindingResource = {
        serializedName: "BindingResource",
        type: {
            name: "Composite",
            className: "BindingResource",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "BindingResourceProperties"
                    }
                } })
        }
    };
    var CertificateProperties = {
        serializedName: "CertificateProperties",
        type: {
            name: "Composite",
            className: "CertificateProperties",
            modelProperties: {
                thumbprint: {
                    readOnly: true,
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                vaultUri: {
                    required: true,
                    serializedName: "vaultUri",
                    type: {
                        name: "String"
                    }
                },
                keyVaultCertName: {
                    required: true,
                    serializedName: "keyVaultCertName",
                    type: {
                        name: "String"
                    }
                },
                certVersion: {
                    serializedName: "certVersion",
                    type: {
                        name: "String"
                    }
                },
                issuer: {
                    readOnly: true,
                    serializedName: "issuer",
                    type: {
                        name: "String"
                    }
                },
                issuedDate: {
                    readOnly: true,
                    serializedName: "issuedDate",
                    type: {
                        name: "String"
                    }
                },
                expirationDate: {
                    readOnly: true,
                    serializedName: "expirationDate",
                    type: {
                        name: "String"
                    }
                },
                activateDate: {
                    readOnly: true,
                    serializedName: "activateDate",
                    type: {
                        name: "String"
                    }
                },
                subjectName: {
                    readOnly: true,
                    serializedName: "subjectName",
                    type: {
                        name: "String"
                    }
                },
                dnsNames: {
                    readOnly: true,
                    serializedName: "dnsNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CertificateResource = {
        serializedName: "CertificateResource",
        type: {
            name: "Composite",
            className: "CertificateResource",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CertificateProperties"
                    }
                } })
        }
    };
    var NameAvailabilityParameters = {
        serializedName: "NameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "NameAvailabilityParameters",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NameAvailability = {
        serializedName: "NameAvailability",
        type: {
            name: "Composite",
            className: "NameAvailability",
            modelProperties: {
                nameAvailable: {
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomDomainProperties = {
        serializedName: "CustomDomainProperties",
        type: {
            name: "Composite",
            className: "CustomDomainProperties",
            modelProperties: {
                thumbprint: {
                    serializedName: "thumbprint",
                    type: {
                        name: "String"
                    }
                },
                appName: {
                    readOnly: true,
                    serializedName: "appName",
                    type: {
                        name: "String"
                    }
                },
                certName: {
                    serializedName: "certName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomDomainResource = {
        serializedName: "CustomDomainResource",
        type: {
            name: "Composite",
            className: "CustomDomainResource",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CustomDomainProperties"
                    }
                } })
        }
    };
    var CustomDomainValidatePayload = {
        serializedName: "CustomDomainValidatePayload",
        type: {
            name: "Composite",
            className: "CustomDomainValidatePayload",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomDomainValidateResult = {
        serializedName: "CustomDomainValidateResult",
        type: {
            name: "Composite",
            className: "CustomDomainValidateResult",
            modelProperties: {
                isValid: {
                    serializedName: "isValid",
                    type: {
                        name: "Boolean"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageRegistryCredential = {
        serializedName: "ImageRegistryCredential",
        type: {
            name: "Composite",
            className: "ImageRegistryCredential",
            modelProperties: {
                username: {
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomContainer = {
        serializedName: "CustomContainer",
        type: {
            name: "Composite",
            className: "CustomContainer",
            modelProperties: {
                server: {
                    serializedName: "server",
                    type: {
                        name: "String"
                    }
                },
                containerImage: {
                    serializedName: "containerImage",
                    type: {
                        name: "String"
                    }
                },
                command: {
                    serializedName: "command",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                args: {
                    serializedName: "args",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                imageRegistryCredential: {
                    serializedName: "imageRegistryCredential",
                    type: {
                        name: "Composite",
                        className: "ImageRegistryCredential"
                    }
                }
            }
        }
    };
    var UserSourceInfo = {
        serializedName: "UserSourceInfo",
        type: {
            name: "Composite",
            className: "UserSourceInfo",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                relativePath: {
                    serializedName: "relativePath",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                },
                artifactSelector: {
                    serializedName: "artifactSelector",
                    type: {
                        name: "String"
                    }
                },
                customContainer: {
                    serializedName: "customContainer",
                    type: {
                        name: "Composite",
                        className: "CustomContainer"
                    }
                }
            }
        }
    };
    var ResourceRequests = {
        serializedName: "ResourceRequests",
        type: {
            name: "Composite",
            className: "ResourceRequests",
            modelProperties: {
                cpu: {
                    serializedName: "cpu",
                    type: {
                        name: "String"
                    }
                },
                memory: {
                    serializedName: "memory",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentSettings = {
        serializedName: "DeploymentSettings",
        type: {
            name: "Composite",
            className: "DeploymentSettings",
            modelProperties: {
                cpu: {
                    serializedName: "cpu",
                    defaultValue: 1,
                    type: {
                        name: "Number"
                    }
                },
                memoryInGB: {
                    serializedName: "memoryInGB",
                    defaultValue: 1,
                    type: {
                        name: "Number"
                    }
                },
                resourceRequests: {
                    serializedName: "resourceRequests",
                    type: {
                        name: "Composite",
                        className: "ResourceRequests"
                    }
                },
                jvmOptions: {
                    serializedName: "jvmOptions",
                    type: {
                        name: "String"
                    }
                },
                netCoreMainEntryPath: {
                    serializedName: "netCoreMainEntryPath",
                    type: {
                        name: "String"
                    }
                },
                environmentVariables: {
                    serializedName: "environmentVariables",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                runtimeVersion: {
                    serializedName: "runtimeVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentInstance = {
        serializedName: "DeploymentInstance",
        type: {
            name: "Composite",
            className: "DeploymentInstance",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                discoveryStatus: {
                    readOnly: true,
                    serializedName: "discoveryStatus",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentResourceProperties = {
        serializedName: "DeploymentResourceProperties",
        type: {
            name: "Composite",
            className: "DeploymentResourceProperties",
            modelProperties: {
                source: {
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "UserSourceInfo"
                    }
                },
                appName: {
                    readOnly: true,
                    serializedName: "appName",
                    type: {
                        name: "String"
                    }
                },
                deploymentSettings: {
                    serializedName: "deploymentSettings",
                    type: {
                        name: "Composite",
                        className: "DeploymentSettings"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                active: {
                    readOnly: true,
                    serializedName: "active",
                    type: {
                        name: "Boolean"
                    }
                },
                createdTime: {
                    readOnly: true,
                    serializedName: "createdTime",
                    type: {
                        name: "DateTime"
                    }
                },
                instances: {
                    readOnly: true,
                    serializedName: "instances",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeploymentInstance"
                            }
                        }
                    }
                }
            }
        }
    };
    var DeploymentResource = {
        serializedName: "DeploymentResource",
        type: {
            name: "Composite",
            className: "DeploymentResource",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DeploymentResourceProperties"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                } })
        }
    };
    var LogFileUrlResponse = {
        serializedName: "LogFileUrlResponse",
        type: {
            name: "Composite",
            className: "LogFileUrlResponse",
            modelProperties: {
                url: {
                    required: true,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LogSpecification = {
        serializedName: "LogSpecification",
        type: {
            name: "Composite",
            className: "LogSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                blobDuration: {
                    serializedName: "blobDuration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricDimension = {
        serializedName: "MetricDimension",
        type: {
            name: "Composite",
            className: "MetricDimension",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                toBeExportedForShoebox: {
                    serializedName: "toBeExportedForShoebox",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var MetricSpecification = {
        serializedName: "MetricSpecification",
        type: {
            name: "Composite",
            className: "MetricSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                displayDescription: {
                    serializedName: "displayDescription",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                aggregationType: {
                    serializedName: "aggregationType",
                    type: {
                        name: "String"
                    }
                },
                supportedAggregationTypes: {
                    serializedName: "supportedAggregationTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                supportedTimeGrainTypes: {
                    serializedName: "supportedTimeGrainTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                fillGapWithZero: {
                    serializedName: "fillGapWithZero",
                    type: {
                        name: "Boolean"
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDimension"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceSpecification = {
        serializedName: "ServiceSpecification",
        type: {
            name: "Composite",
            className: "ServiceSpecification",
            modelProperties: {
                logSpecifications: {
                    serializedName: "logSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LogSpecification"
                            }
                        }
                    }
                },
                metricSpecifications: {
                    serializedName: "metricSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricSpecification"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationProperties = {
        serializedName: "OperationProperties",
        type: {
            name: "Composite",
            className: "OperationProperties",
            modelProperties: {
                serviceSpecification: {
                    serializedName: "serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "ServiceSpecification"
                    }
                }
            }
        }
    };
    var OperationDetail = {
        serializedName: "OperationDetail",
        type: {
            name: "Composite",
            className: "OperationDetail",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                isDataAction: {
                    serializedName: "isDataAction",
                    type: {
                        name: "Boolean"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "OperationProperties"
                    }
                }
            }
        }
    };
    var SkuCapacity = {
        serializedName: "SkuCapacity",
        type: {
            name: "Composite",
            className: "SkuCapacity",
            modelProperties: {
                minimum: {
                    required: true,
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                default: {
                    serializedName: "default",
                    type: {
                        name: "Number"
                    }
                },
                scaleType: {
                    serializedName: "scaleType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuCapabilities = {
        serializedName: "ResourceSkuCapabilities",
        type: {
            name: "Composite",
            className: "ResourceSkuCapabilities",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuZoneDetails = {
        serializedName: "ResourceSkuZoneDetails",
        type: {
            name: "Composite",
            className: "ResourceSkuZoneDetails",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                capabilities: {
                    serializedName: "capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuCapabilities"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSkuLocationInfo = {
        serializedName: "ResourceSkuLocationInfo",
        type: {
            name: "Composite",
            className: "ResourceSkuLocationInfo",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                zoneDetails: {
                    serializedName: "zoneDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuZoneDetails"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSkuRestrictionInfo = {
        serializedName: "ResourceSkuRestrictionInfo",
        type: {
            name: "Composite",
            className: "ResourceSkuRestrictionInfo",
            modelProperties: {
                locations: {
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                zones: {
                    serializedName: "zones",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSkuRestrictions = {
        serializedName: "ResourceSkuRestrictions",
        type: {
            name: "Composite",
            className: "ResourceSkuRestrictions",
            modelProperties: {
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                restrictionInfo: {
                    serializedName: "restrictionInfo",
                    type: {
                        name: "Composite",
                        className: "ResourceSkuRestrictionInfo"
                    }
                },
                reasonCode: {
                    serializedName: "reasonCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSku = {
        serializedName: "ResourceSku",
        type: {
            name: "Composite",
            className: "ResourceSku",
            modelProperties: {
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "SkuCapacity"
                    }
                },
                locations: {
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                locationInfo: {
                    serializedName: "locationInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuLocationInfo"
                            }
                        }
                    }
                },
                restrictions: {
                    serializedName: "restrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuRestrictions"
                            }
                        }
                    }
                }
            }
        }
    };
    var SupportedRuntimeVersion = {
        serializedName: "SupportedRuntimeVersion",
        type: {
            name: "Composite",
            className: "SupportedRuntimeVersion",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                platform: {
                    serializedName: "platform",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AvailableRuntimeVersions = {
        serializedName: "AvailableRuntimeVersions",
        type: {
            name: "Composite",
            className: "AvailableRuntimeVersions",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SupportedRuntimeVersion"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceResourceList = {
        serializedName: "ServiceResourceList",
        type: {
            name: "Composite",
            className: "ServiceResourceList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppResourceCollection = {
        serializedName: "AppResourceCollection",
        type: {
            name: "Composite",
            className: "AppResourceCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AppResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BindingResourceCollection = {
        serializedName: "BindingResourceCollection",
        type: {
            name: "Composite",
            className: "BindingResourceCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BindingResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateResourceCollection = {
        serializedName: "CertificateResourceCollection",
        type: {
            name: "Composite",
            className: "CertificateResourceCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomDomainResourceCollection = {
        serializedName: "CustomDomainResourceCollection",
        type: {
            name: "Composite",
            className: "CustomDomainResourceCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CustomDomainResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DeploymentResourceCollection = {
        serializedName: "DeploymentResourceCollection",
        type: {
            name: "Composite",
            className: "DeploymentResourceCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DeploymentResource"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AvailableOperations = {
        serializedName: "AvailableOperations",
        type: {
            name: "Composite",
            className: "AvailableOperations",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationDetail"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuCollection = {
        serializedName: "ResourceSkuCollection",
        type: {
            name: "Composite",
            className: "ResourceSkuCollection",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSku"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        NetworkProfileOutboundIPs: NetworkProfileOutboundIPs,
        RequiredTraffic: RequiredTraffic,
        NetworkProfile: NetworkProfile,
        ClusterResourceProperties: ClusterResourceProperties,
        Sku: Sku,
        Resource: Resource,
        TrackedResource: TrackedResource,
        ServiceResource: ServiceResource,
        ManagedIdentityProperties: ManagedIdentityProperties,
        ConfigServerSettingsErrorRecord: ConfigServerSettingsErrorRecord,
        ConfigServerSettingsValidateResult: ConfigServerSettingsValidateResult,
        ErrorModel: ErrorModel,
        GitPatternRepository: GitPatternRepository,
        ConfigServerGitProperty: ConfigServerGitProperty,
        ConfigServerSettings: ConfigServerSettings,
        ConfigServerProperties: ConfigServerProperties,
        ProxyResource: ProxyResource,
        ConfigServerResource: ConfigServerResource,
        ApplicationInsightsAgentVersions: ApplicationInsightsAgentVersions,
        MonitoringSettingProperties: MonitoringSettingProperties,
        MonitoringSettingResource: MonitoringSettingResource,
        TestKeys: TestKeys,
        RegenerateTestKeyRequestPayload: RegenerateTestKeyRequestPayload,
        TemporaryDisk: TemporaryDisk,
        PersistentDisk: PersistentDisk,
        AppResourceProperties: AppResourceProperties,
        AppResource: AppResource,
        ResourceUploadDefinition: ResourceUploadDefinition,
        BindingResourceProperties: BindingResourceProperties,
        BindingResource: BindingResource,
        CertificateProperties: CertificateProperties,
        CertificateResource: CertificateResource,
        NameAvailabilityParameters: NameAvailabilityParameters,
        NameAvailability: NameAvailability,
        CustomDomainProperties: CustomDomainProperties,
        CustomDomainResource: CustomDomainResource,
        CustomDomainValidatePayload: CustomDomainValidatePayload,
        CustomDomainValidateResult: CustomDomainValidateResult,
        ImageRegistryCredential: ImageRegistryCredential,
        CustomContainer: CustomContainer,
        UserSourceInfo: UserSourceInfo,
        ResourceRequests: ResourceRequests,
        DeploymentSettings: DeploymentSettings,
        DeploymentInstance: DeploymentInstance,
        DeploymentResourceProperties: DeploymentResourceProperties,
        DeploymentResource: DeploymentResource,
        LogFileUrlResponse: LogFileUrlResponse,
        OperationDisplay: OperationDisplay,
        LogSpecification: LogSpecification,
        MetricDimension: MetricDimension,
        MetricSpecification: MetricSpecification,
        ServiceSpecification: ServiceSpecification,
        OperationProperties: OperationProperties,
        OperationDetail: OperationDetail,
        SkuCapacity: SkuCapacity,
        ResourceSkuCapabilities: ResourceSkuCapabilities,
        ResourceSkuZoneDetails: ResourceSkuZoneDetails,
        ResourceSkuLocationInfo: ResourceSkuLocationInfo,
        ResourceSkuRestrictionInfo: ResourceSkuRestrictionInfo,
        ResourceSkuRestrictions: ResourceSkuRestrictions,
        ResourceSku: ResourceSku,
        SupportedRuntimeVersion: SupportedRuntimeVersion,
        AvailableRuntimeVersions: AvailableRuntimeVersions,
        ServiceResourceList: ServiceResourceList,
        AppResourceCollection: AppResourceCollection,
        BindingResourceCollection: BindingResourceCollection,
        CertificateResourceCollection: CertificateResourceCollection,
        CustomDomainResourceCollection: CustomDomainResourceCollection,
        DeploymentResourceCollection: DeploymentResourceCollection,
        AvailableOperations: AvailableOperations,
        ResourceSkuCollection: ResourceSkuCollection
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsAgentVersions: ApplicationInsightsAgentVersions,
        AppResource: AppResource,
        AppResourceProperties: AppResourceProperties,
        BaseResource: BaseResource,
        BindingResource: BindingResource,
        BindingResourceProperties: BindingResourceProperties,
        CertificateProperties: CertificateProperties,
        CertificateResource: CertificateResource,
        CloudError: CloudError,
        ClusterResourceProperties: ClusterResourceProperties,
        ConfigServerGitProperty: ConfigServerGitProperty,
        ConfigServerProperties: ConfigServerProperties,
        ConfigServerResource: ConfigServerResource,
        ConfigServerSettings: ConfigServerSettings,
        CustomContainer: CustomContainer,
        CustomDomainProperties: CustomDomainProperties,
        CustomDomainResource: CustomDomainResource,
        DeploymentInstance: DeploymentInstance,
        DeploymentResource: DeploymentResource,
        DeploymentResourceProperties: DeploymentResourceProperties,
        DeploymentSettings: DeploymentSettings,
        ErrorModel: ErrorModel,
        GitPatternRepository: GitPatternRepository,
        ImageRegistryCredential: ImageRegistryCredential,
        ManagedIdentityProperties: ManagedIdentityProperties,
        MonitoringSettingProperties: MonitoringSettingProperties,
        MonitoringSettingResource: MonitoringSettingResource,
        NameAvailability: NameAvailability,
        NameAvailabilityParameters: NameAvailabilityParameters,
        NetworkProfile: NetworkProfile,
        NetworkProfileOutboundIPs: NetworkProfileOutboundIPs,
        PersistentDisk: PersistentDisk,
        ProxyResource: ProxyResource,
        RegenerateTestKeyRequestPayload: RegenerateTestKeyRequestPayload,
        RequiredTraffic: RequiredTraffic,
        Resource: Resource,
        ResourceRequests: ResourceRequests,
        ServiceResource: ServiceResource,
        ServiceResourceList: ServiceResourceList,
        Sku: Sku,
        TemporaryDisk: TemporaryDisk,
        TestKeys: TestKeys,
        TrackedResource: TrackedResource,
        UserSourceInfo: UserSourceInfo
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var appName = {
        parameterPath: "appName",
        mapper: {
            required: true,
            serializedName: "appName",
            type: {
                name: "String"
            }
        }
    };
    var bindingName = {
        parameterPath: "bindingName",
        mapper: {
            required: true,
            serializedName: "bindingName",
            type: {
                name: "String"
            }
        }
    };
    var certificateName = {
        parameterPath: "certificateName",
        mapper: {
            required: true,
            serializedName: "certificateName",
            type: {
                name: "String"
            }
        }
    };
    var deploymentName = {
        parameterPath: "deploymentName",
        mapper: {
            required: true,
            serializedName: "deploymentName",
            type: {
                name: "String"
            }
        }
    };
    var domainName = {
        parameterPath: "domainName",
        mapper: {
            required: true,
            serializedName: "domainName",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var serviceName = {
        parameterPath: "serviceName",
        mapper: {
            required: true,
            serializedName: "serviceName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var syncStatus = {
        parameterPath: [
            "options",
            "syncStatus"
        ],
        mapper: {
            serializedName: "syncStatus",
            type: {
                name: "String"
            }
        }
    };
    var version = {
        parameterPath: [
            "options",
            "version"
        ],
        mapper: {
            serializedName: "version",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Multi
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Services. */
    var Services = /** @class */ (function () {
        /**
         * Create a Services.
         * @param {AppPlatformManagementClientContext} client Reference to the service client.
         */
        function Services(client) {
            this.client = client;
        }
        Services.prototype.get = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Create a new Service or update an exiting Service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param resource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.ServicesCreateOrUpdateResponse>
         */
        Services.prototype.createOrUpdate = function (resourceGroupName, serviceName, resource, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serviceName, resource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to delete a Service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Services.prototype.deleteMethod = function (resourceGroupName, serviceName, options) {
            return this.beginDeleteMethod(resourceGroupName, serviceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to update an exiting Service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param resource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.ServicesUpdateResponse>
         */
        Services.prototype.update = function (resourceGroupName, serviceName, resource, options) {
            return this.beginUpdate(resourceGroupName, serviceName, resource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Services.prototype.listTestKeys = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listTestKeysOperationSpec, callback);
        };
        Services.prototype.regenerateTestKey = function (resourceGroupName, serviceName, regenerateTestKeyRequest, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                regenerateTestKeyRequest: regenerateTestKeyRequest,
                options: options
            }, regenerateTestKeyOperationSpec, callback);
        };
        Services.prototype.disableTestEndpoint = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, disableTestEndpointOperationSpec, callback);
        };
        Services.prototype.enableTestEndpoint = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, enableTestEndpointOperationSpec, callback);
        };
        Services.prototype.checkNameAvailability = function (location, availabilityParameters, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                availabilityParameters: availabilityParameters,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        Services.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Services.prototype.list = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listOperationSpec, callback);
        };
        /**
         * Create a new Service or update an exiting Service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param resource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Services.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, resource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                resource: resource,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Operation to delete a Service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Services.prototype.beginDeleteMethod = function (resourceGroupName, serviceName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Operation to update an exiting Service.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param resource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Services.prototype.beginUpdate = function (resourceGroupName, serviceName, resource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                resource: resource,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        Services.prototype.listBySubscriptionNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        Services.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Services;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listTestKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/listTestKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TestKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var regenerateTestKeyOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/regenerateTestKey",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "regenerateTestKeyRequest",
            mapper: __assign(__assign({}, RegenerateTestKeyRequestPayload), { required: true })
        },
        responses: {
            200: {
                bodyMapper: TestKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var disableTestEndpointOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/disableTestEndpoint",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var enableTestEndpointOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/enableTestEndpoint",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TestKeys
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/locations/{location}/checkNameAvailability",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "availabilityParameters",
            mapper: __assign(__assign({}, NameAvailabilityParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: NameAvailability
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/Spring",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceResourceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceResourceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "resource",
            mapper: __assign(__assign({}, ServiceResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServiceResource
            },
            201: {
                bodyMapper: ServiceResource
            },
            202: {
                bodyMapper: ServiceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "resource",
            mapper: __assign(__assign({}, ServiceResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ServiceResource
            },
            202: {
                bodyMapper: ServiceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceResourceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceResourceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsAgentVersions: ApplicationInsightsAgentVersions,
        AppResource: AppResource,
        AppResourceProperties: AppResourceProperties,
        BaseResource: BaseResource,
        BindingResource: BindingResource,
        BindingResourceProperties: BindingResourceProperties,
        CertificateProperties: CertificateProperties,
        CertificateResource: CertificateResource,
        CloudError: CloudError,
        ClusterResourceProperties: ClusterResourceProperties,
        ConfigServerGitProperty: ConfigServerGitProperty,
        ConfigServerProperties: ConfigServerProperties,
        ConfigServerResource: ConfigServerResource,
        ConfigServerSettings: ConfigServerSettings,
        ConfigServerSettingsErrorRecord: ConfigServerSettingsErrorRecord,
        ConfigServerSettingsValidateResult: ConfigServerSettingsValidateResult,
        CustomContainer: CustomContainer,
        CustomDomainProperties: CustomDomainProperties,
        CustomDomainResource: CustomDomainResource,
        DeploymentInstance: DeploymentInstance,
        DeploymentResource: DeploymentResource,
        DeploymentResourceProperties: DeploymentResourceProperties,
        DeploymentSettings: DeploymentSettings,
        ErrorModel: ErrorModel,
        GitPatternRepository: GitPatternRepository,
        ImageRegistryCredential: ImageRegistryCredential,
        ManagedIdentityProperties: ManagedIdentityProperties,
        MonitoringSettingProperties: MonitoringSettingProperties,
        MonitoringSettingResource: MonitoringSettingResource,
        NetworkProfile: NetworkProfile,
        NetworkProfileOutboundIPs: NetworkProfileOutboundIPs,
        PersistentDisk: PersistentDisk,
        ProxyResource: ProxyResource,
        RequiredTraffic: RequiredTraffic,
        Resource: Resource,
        ResourceRequests: ResourceRequests,
        ServiceResource: ServiceResource,
        Sku: Sku,
        TemporaryDisk: TemporaryDisk,
        TrackedResource: TrackedResource,
        UserSourceInfo: UserSourceInfo
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ConfigServers. */
    var ConfigServers = /** @class */ (function () {
        /**
         * Create a ConfigServers.
         * @param {AppPlatformManagementClientContext} client Reference to the service client.
         */
        function ConfigServers(client) {
            this.client = client;
        }
        ConfigServers.prototype.get = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Update the config server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param configServerResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.ConfigServersUpdatePutResponse>
         */
        ConfigServers.prototype.updatePut = function (resourceGroupName, serviceName, configServerResource, options) {
            return this.beginUpdatePut(resourceGroupName, serviceName, configServerResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update the config server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param configServerResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.ConfigServersUpdatePatchResponse>
         */
        ConfigServers.prototype.updatePatch = function (resourceGroupName, serviceName, configServerResource, options) {
            return this.beginUpdatePatch(resourceGroupName, serviceName, configServerResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Check if the config server settings are valid.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param configServerSettings Config server settings to be validated
         * @param [options] The optional parameters
         * @returns Promise<Models.ConfigServersValidateResponse>
         */
        ConfigServers.prototype.validate = function (resourceGroupName, serviceName, configServerSettings, options) {
            return this.beginValidate(resourceGroupName, serviceName, configServerSettings, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update the config server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param configServerResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ConfigServers.prototype.beginUpdatePut = function (resourceGroupName, serviceName, configServerResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                configServerResource: configServerResource,
                options: options
            }, beginUpdatePutOperationSpec, options);
        };
        /**
         * Update the config server.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param configServerResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ConfigServers.prototype.beginUpdatePatch = function (resourceGroupName, serviceName, configServerResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                configServerResource: configServerResource,
                options: options
            }, beginUpdatePatchOperationSpec, options);
        };
        /**
         * Check if the config server settings are valid.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param configServerSettings Config server settings to be validated
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ConfigServers.prototype.beginValidate = function (resourceGroupName, serviceName, configServerSettings, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                configServerSettings: configServerSettings,
                options: options
            }, beginValidateOperationSpec, options);
        };
        return ConfigServers;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConfigServerResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginUpdatePutOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "configServerResource",
            mapper: __assign(__assign({}, ConfigServerResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConfigServerResource
            },
            202: {
                bodyMapper: ConfigServerResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginUpdatePatchOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "configServerResource",
            mapper: __assign(__assign({}, ConfigServerResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConfigServerResource
            },
            202: {
                bodyMapper: ConfigServerResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginValidateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/validate",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "configServerSettings",
            mapper: __assign(__assign({}, ConfigServerSettings), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConfigServerSettingsValidateResult
            },
            202: {
                bodyMapper: ConfigServerSettingsValidateResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsAgentVersions: ApplicationInsightsAgentVersions,
        AppResource: AppResource,
        AppResourceProperties: AppResourceProperties,
        BaseResource: BaseResource,
        BindingResource: BindingResource,
        BindingResourceProperties: BindingResourceProperties,
        CertificateProperties: CertificateProperties,
        CertificateResource: CertificateResource,
        CloudError: CloudError,
        ClusterResourceProperties: ClusterResourceProperties,
        ConfigServerGitProperty: ConfigServerGitProperty,
        ConfigServerProperties: ConfigServerProperties,
        ConfigServerResource: ConfigServerResource,
        ConfigServerSettings: ConfigServerSettings,
        CustomContainer: CustomContainer,
        CustomDomainProperties: CustomDomainProperties,
        CustomDomainResource: CustomDomainResource,
        DeploymentInstance: DeploymentInstance,
        DeploymentResource: DeploymentResource,
        DeploymentResourceProperties: DeploymentResourceProperties,
        DeploymentSettings: DeploymentSettings,
        ErrorModel: ErrorModel,
        GitPatternRepository: GitPatternRepository,
        ImageRegistryCredential: ImageRegistryCredential,
        ManagedIdentityProperties: ManagedIdentityProperties,
        MonitoringSettingProperties: MonitoringSettingProperties,
        MonitoringSettingResource: MonitoringSettingResource,
        NetworkProfile: NetworkProfile,
        NetworkProfileOutboundIPs: NetworkProfileOutboundIPs,
        PersistentDisk: PersistentDisk,
        ProxyResource: ProxyResource,
        RequiredTraffic: RequiredTraffic,
        Resource: Resource,
        ResourceRequests: ResourceRequests,
        ServiceResource: ServiceResource,
        Sku: Sku,
        TemporaryDisk: TemporaryDisk,
        TrackedResource: TrackedResource,
        UserSourceInfo: UserSourceInfo
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a MonitoringSettings. */
    var MonitoringSettings = /** @class */ (function () {
        /**
         * Create a MonitoringSettings.
         * @param {AppPlatformManagementClientContext} client Reference to the service client.
         */
        function MonitoringSettings(client) {
            this.client = client;
        }
        MonitoringSettings.prototype.get = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Update the Monitoring Setting.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param monitoringSettingResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.MonitoringSettingsUpdatePutResponse>
         */
        MonitoringSettings.prototype.updatePut = function (resourceGroupName, serviceName, monitoringSettingResource, options) {
            return this.beginUpdatePut(resourceGroupName, serviceName, monitoringSettingResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update the Monitoring Setting.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param monitoringSettingResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.MonitoringSettingsUpdatePatchResponse>
         */
        MonitoringSettings.prototype.updatePatch = function (resourceGroupName, serviceName, monitoringSettingResource, options) {
            return this.beginUpdatePatch(resourceGroupName, serviceName, monitoringSettingResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update the Monitoring Setting.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param monitoringSettingResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        MonitoringSettings.prototype.beginUpdatePut = function (resourceGroupName, serviceName, monitoringSettingResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                monitoringSettingResource: monitoringSettingResource,
                options: options
            }, beginUpdatePutOperationSpec$1, options);
        };
        /**
         * Update the Monitoring Setting.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param monitoringSettingResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        MonitoringSettings.prototype.beginUpdatePatch = function (resourceGroupName, serviceName, monitoringSettingResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                monitoringSettingResource: monitoringSettingResource,
                options: options
            }, beginUpdatePatchOperationSpec$1, options);
        };
        return MonitoringSettings;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/monitoringSettings/default",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MonitoringSettingResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginUpdatePutOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/monitoringSettings/default",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "monitoringSettingResource",
            mapper: __assign(__assign({}, MonitoringSettingResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: MonitoringSettingResource
            },
            202: {
                bodyMapper: MonitoringSettingResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginUpdatePatchOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/monitoringSettings/default",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "monitoringSettingResource",
            mapper: __assign(__assign({}, MonitoringSettingResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: MonitoringSettingResource
            },
            202: {
                bodyMapper: MonitoringSettingResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsAgentVersions: ApplicationInsightsAgentVersions,
        AppResource: AppResource,
        AppResourceCollection: AppResourceCollection,
        AppResourceProperties: AppResourceProperties,
        BaseResource: BaseResource,
        BindingResource: BindingResource,
        BindingResourceProperties: BindingResourceProperties,
        CertificateProperties: CertificateProperties,
        CertificateResource: CertificateResource,
        CloudError: CloudError,
        ClusterResourceProperties: ClusterResourceProperties,
        ConfigServerGitProperty: ConfigServerGitProperty,
        ConfigServerProperties: ConfigServerProperties,
        ConfigServerResource: ConfigServerResource,
        ConfigServerSettings: ConfigServerSettings,
        CustomContainer: CustomContainer,
        CustomDomainProperties: CustomDomainProperties,
        CustomDomainResource: CustomDomainResource,
        CustomDomainValidatePayload: CustomDomainValidatePayload,
        CustomDomainValidateResult: CustomDomainValidateResult,
        DeploymentInstance: DeploymentInstance,
        DeploymentResource: DeploymentResource,
        DeploymentResourceProperties: DeploymentResourceProperties,
        DeploymentSettings: DeploymentSettings,
        ErrorModel: ErrorModel,
        GitPatternRepository: GitPatternRepository,
        ImageRegistryCredential: ImageRegistryCredential,
        ManagedIdentityProperties: ManagedIdentityProperties,
        MonitoringSettingProperties: MonitoringSettingProperties,
        MonitoringSettingResource: MonitoringSettingResource,
        NetworkProfile: NetworkProfile,
        NetworkProfileOutboundIPs: NetworkProfileOutboundIPs,
        PersistentDisk: PersistentDisk,
        ProxyResource: ProxyResource,
        RequiredTraffic: RequiredTraffic,
        Resource: Resource,
        ResourceRequests: ResourceRequests,
        ResourceUploadDefinition: ResourceUploadDefinition,
        ServiceResource: ServiceResource,
        Sku: Sku,
        TemporaryDisk: TemporaryDisk,
        TrackedResource: TrackedResource,
        UserSourceInfo: UserSourceInfo
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Apps. */
    var Apps = /** @class */ (function () {
        /**
         * Create a Apps.
         * @param {AppPlatformManagementClientContext} client Reference to the service client.
         */
        function Apps(client) {
            this.client = client;
        }
        Apps.prototype.get = function (resourceGroupName, serviceName, appName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                options: options
            }, getOperationSpec$3, callback);
        };
        /**
         * Create a new App or update an exiting App.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param appResource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.AppsCreateOrUpdateResponse>
         */
        Apps.prototype.createOrUpdate = function (resourceGroupName, serviceName, appName, appResource, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serviceName, appName, appResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to delete an App.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Apps.prototype.deleteMethod = function (resourceGroupName, serviceName, appName, options) {
            return this.beginDeleteMethod(resourceGroupName, serviceName, appName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to update an exiting App.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param appResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.AppsUpdateResponse>
         */
        Apps.prototype.update = function (resourceGroupName, serviceName, appName, appResource, options) {
            return this.beginUpdate(resourceGroupName, serviceName, appName, appResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Apps.prototype.list = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listOperationSpec$1, callback);
        };
        Apps.prototype.getResourceUploadUrl = function (resourceGroupName, serviceName, appName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                options: options
            }, getResourceUploadUrlOperationSpec, callback);
        };
        Apps.prototype.validateDomain = function (resourceGroupName, serviceName, appName, validatePayload, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                validatePayload: validatePayload,
                options: options
            }, validateDomainOperationSpec, callback);
        };
        /**
         * Create a new App or update an exiting App.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param appResource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Apps.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, appName, appResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                appResource: appResource,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Operation to delete an App.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Apps.prototype.beginDeleteMethod = function (resourceGroupName, serviceName, appName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Operation to update an exiting App.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param appResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Apps.prototype.beginUpdate = function (resourceGroupName, serviceName, appName, appResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                appResource: appResource,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        Apps.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Apps;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName
        ],
        queryParameters: [
            apiVersion,
            syncStatus
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getResourceUploadUrlOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/getResourceUploadUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceUploadDefinition
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var validateDomainOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/validateDomain",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "validatePayload",
            mapper: __assign(__assign({}, CustomDomainValidatePayload), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CustomDomainValidateResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "appResource",
            mapper: __assign(__assign({}, AppResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AppResource
            },
            201: {
                bodyMapper: AppResource
            },
            202: {
                bodyMapper: AppResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "appResource",
            mapper: __assign(__assign({}, AppResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AppResource
            },
            202: {
                bodyMapper: AppResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AppResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsAgentVersions: ApplicationInsightsAgentVersions,
        AppResource: AppResource,
        AppResourceProperties: AppResourceProperties,
        BaseResource: BaseResource,
        BindingResource: BindingResource,
        BindingResourceCollection: BindingResourceCollection,
        BindingResourceProperties: BindingResourceProperties,
        CertificateProperties: CertificateProperties,
        CertificateResource: CertificateResource,
        CloudError: CloudError,
        ClusterResourceProperties: ClusterResourceProperties,
        ConfigServerGitProperty: ConfigServerGitProperty,
        ConfigServerProperties: ConfigServerProperties,
        ConfigServerResource: ConfigServerResource,
        ConfigServerSettings: ConfigServerSettings,
        CustomContainer: CustomContainer,
        CustomDomainProperties: CustomDomainProperties,
        CustomDomainResource: CustomDomainResource,
        DeploymentInstance: DeploymentInstance,
        DeploymentResource: DeploymentResource,
        DeploymentResourceProperties: DeploymentResourceProperties,
        DeploymentSettings: DeploymentSettings,
        ErrorModel: ErrorModel,
        GitPatternRepository: GitPatternRepository,
        ImageRegistryCredential: ImageRegistryCredential,
        ManagedIdentityProperties: ManagedIdentityProperties,
        MonitoringSettingProperties: MonitoringSettingProperties,
        MonitoringSettingResource: MonitoringSettingResource,
        NetworkProfile: NetworkProfile,
        NetworkProfileOutboundIPs: NetworkProfileOutboundIPs,
        PersistentDisk: PersistentDisk,
        ProxyResource: ProxyResource,
        RequiredTraffic: RequiredTraffic,
        Resource: Resource,
        ResourceRequests: ResourceRequests,
        ServiceResource: ServiceResource,
        Sku: Sku,
        TemporaryDisk: TemporaryDisk,
        TrackedResource: TrackedResource,
        UserSourceInfo: UserSourceInfo
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Bindings. */
    var Bindings = /** @class */ (function () {
        /**
         * Create a Bindings.
         * @param {AppPlatformManagementClientContext} client Reference to the service client.
         */
        function Bindings(client) {
            this.client = client;
        }
        Bindings.prototype.get = function (resourceGroupName, serviceName, appName, bindingName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                bindingName: bindingName,
                options: options
            }, getOperationSpec$4, callback);
        };
        /**
         * Create a new Binding or update an exiting Binding.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param bindingName The name of the Binding resource.
         * @param bindingResource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.BindingsCreateOrUpdateResponse>
         */
        Bindings.prototype.createOrUpdate = function (resourceGroupName, serviceName, appName, bindingName, bindingResource, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serviceName, appName, bindingName, bindingResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to delete a Binding.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param bindingName The name of the Binding resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Bindings.prototype.deleteMethod = function (resourceGroupName, serviceName, appName, bindingName, options) {
            return this.beginDeleteMethod(resourceGroupName, serviceName, appName, bindingName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to update an exiting Binding.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param bindingName The name of the Binding resource.
         * @param bindingResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.BindingsUpdateResponse>
         */
        Bindings.prototype.update = function (resourceGroupName, serviceName, appName, bindingName, bindingResource, options) {
            return this.beginUpdate(resourceGroupName, serviceName, appName, bindingName, bindingResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Bindings.prototype.list = function (resourceGroupName, serviceName, appName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                options: options
            }, listOperationSpec$2, callback);
        };
        /**
         * Create a new Binding or update an exiting Binding.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param bindingName The name of the Binding resource.
         * @param bindingResource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Bindings.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, appName, bindingName, bindingResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                bindingName: bindingName,
                bindingResource: bindingResource,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Operation to delete a Binding.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param bindingName The name of the Binding resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Bindings.prototype.beginDeleteMethod = function (resourceGroupName, serviceName, appName, bindingName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                bindingName: bindingName,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Operation to update an exiting Binding.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param bindingName The name of the Binding resource.
         * @param bindingResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Bindings.prototype.beginUpdate = function (resourceGroupName, serviceName, appName, bindingName, bindingResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                bindingName: bindingName,
                bindingResource: bindingResource,
                options: options
            }, beginUpdateOperationSpec$2, options);
        };
        Bindings.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return Bindings;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            bindingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BindingResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BindingResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            bindingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "bindingResource",
            mapper: __assign(__assign({}, BindingResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BindingResource
            },
            201: {
                bodyMapper: BindingResource
            },
            202: {
                bodyMapper: BindingResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            bindingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginUpdateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            bindingName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "bindingResource",
            mapper: __assign(__assign({}, BindingResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BindingResource
            },
            202: {
                bodyMapper: BindingResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BindingResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsAgentVersions: ApplicationInsightsAgentVersions,
        AppResource: AppResource,
        AppResourceProperties: AppResourceProperties,
        BaseResource: BaseResource,
        BindingResource: BindingResource,
        BindingResourceProperties: BindingResourceProperties,
        CertificateProperties: CertificateProperties,
        CertificateResource: CertificateResource,
        CertificateResourceCollection: CertificateResourceCollection,
        CloudError: CloudError,
        ClusterResourceProperties: ClusterResourceProperties,
        ConfigServerGitProperty: ConfigServerGitProperty,
        ConfigServerProperties: ConfigServerProperties,
        ConfigServerResource: ConfigServerResource,
        ConfigServerSettings: ConfigServerSettings,
        CustomContainer: CustomContainer,
        CustomDomainProperties: CustomDomainProperties,
        CustomDomainResource: CustomDomainResource,
        DeploymentInstance: DeploymentInstance,
        DeploymentResource: DeploymentResource,
        DeploymentResourceProperties: DeploymentResourceProperties,
        DeploymentSettings: DeploymentSettings,
        ErrorModel: ErrorModel,
        GitPatternRepository: GitPatternRepository,
        ImageRegistryCredential: ImageRegistryCredential,
        ManagedIdentityProperties: ManagedIdentityProperties,
        MonitoringSettingProperties: MonitoringSettingProperties,
        MonitoringSettingResource: MonitoringSettingResource,
        NetworkProfile: NetworkProfile,
        NetworkProfileOutboundIPs: NetworkProfileOutboundIPs,
        PersistentDisk: PersistentDisk,
        ProxyResource: ProxyResource,
        RequiredTraffic: RequiredTraffic,
        Resource: Resource,
        ResourceRequests: ResourceRequests,
        ServiceResource: ServiceResource,
        Sku: Sku,
        TemporaryDisk: TemporaryDisk,
        TrackedResource: TrackedResource,
        UserSourceInfo: UserSourceInfo
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Certificates. */
    var Certificates = /** @class */ (function () {
        /**
         * Create a Certificates.
         * @param {AppPlatformManagementClientContext} client Reference to the service client.
         */
        function Certificates(client) {
            this.client = client;
        }
        Certificates.prototype.get = function (resourceGroupName, serviceName, certificateName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                certificateName: certificateName,
                options: options
            }, getOperationSpec$5, callback);
        };
        /**
         * Create or update certificate resource.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param certificateName The name of the certificate resource.
         * @param certificateResource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.CertificatesCreateOrUpdateResponse>
         */
        Certificates.prototype.createOrUpdate = function (resourceGroupName, serviceName, certificateName, certificateResource, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serviceName, certificateName, certificateResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete the certificate resource.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param certificateName The name of the certificate resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Certificates.prototype.deleteMethod = function (resourceGroupName, serviceName, certificateName, options) {
            return this.beginDeleteMethod(resourceGroupName, serviceName, certificateName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Certificates.prototype.list = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listOperationSpec$3, callback);
        };
        /**
         * Create or update certificate resource.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param certificateName The name of the certificate resource.
         * @param certificateResource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Certificates.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, certificateName, certificateResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                certificateName: certificateName,
                certificateResource: certificateResource,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Delete the certificate resource.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param certificateName The name of the certificate resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Certificates.prototype.beginDeleteMethod = function (resourceGroupName, serviceName, certificateName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                certificateName: certificateName,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        Certificates.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return Certificates;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            certificateName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            certificateName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "certificateResource",
            mapper: __assign(__assign({}, CertificateResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CertificateResource
            },
            201: {
                bodyMapper: CertificateResource
            },
            202: {
                bodyMapper: CertificateResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            certificateName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CertificateResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsAgentVersions: ApplicationInsightsAgentVersions,
        AppResource: AppResource,
        AppResourceProperties: AppResourceProperties,
        BaseResource: BaseResource,
        BindingResource: BindingResource,
        BindingResourceProperties: BindingResourceProperties,
        CertificateProperties: CertificateProperties,
        CertificateResource: CertificateResource,
        CloudError: CloudError,
        ClusterResourceProperties: ClusterResourceProperties,
        ConfigServerGitProperty: ConfigServerGitProperty,
        ConfigServerProperties: ConfigServerProperties,
        ConfigServerResource: ConfigServerResource,
        ConfigServerSettings: ConfigServerSettings,
        CustomContainer: CustomContainer,
        CustomDomainProperties: CustomDomainProperties,
        CustomDomainResource: CustomDomainResource,
        CustomDomainResourceCollection: CustomDomainResourceCollection,
        DeploymentInstance: DeploymentInstance,
        DeploymentResource: DeploymentResource,
        DeploymentResourceProperties: DeploymentResourceProperties,
        DeploymentSettings: DeploymentSettings,
        ErrorModel: ErrorModel,
        GitPatternRepository: GitPatternRepository,
        ImageRegistryCredential: ImageRegistryCredential,
        ManagedIdentityProperties: ManagedIdentityProperties,
        MonitoringSettingProperties: MonitoringSettingProperties,
        MonitoringSettingResource: MonitoringSettingResource,
        NetworkProfile: NetworkProfile,
        NetworkProfileOutboundIPs: NetworkProfileOutboundIPs,
        PersistentDisk: PersistentDisk,
        ProxyResource: ProxyResource,
        RequiredTraffic: RequiredTraffic,
        Resource: Resource,
        ResourceRequests: ResourceRequests,
        ServiceResource: ServiceResource,
        Sku: Sku,
        TemporaryDisk: TemporaryDisk,
        TrackedResource: TrackedResource,
        UserSourceInfo: UserSourceInfo
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CustomDomains. */
    var CustomDomains = /** @class */ (function () {
        /**
         * Create a CustomDomains.
         * @param {AppPlatformManagementClientContext} client Reference to the service client.
         */
        function CustomDomains(client) {
            this.client = client;
        }
        CustomDomains.prototype.get = function (resourceGroupName, serviceName, appName, domainName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                domainName: domainName,
                options: options
            }, getOperationSpec$6, callback);
        };
        /**
         * Create or update custom domain of one lifecycle application.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param domainName The name of the custom domain resource.
         * @param domainResource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.CustomDomainsCreateOrUpdateResponse>
         */
        CustomDomains.prototype.createOrUpdate = function (resourceGroupName, serviceName, appName, domainName, domainResource, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serviceName, appName, domainName, domainResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Delete the custom domain of one lifecycle application.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param domainName The name of the custom domain resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        CustomDomains.prototype.deleteMethod = function (resourceGroupName, serviceName, appName, domainName, options) {
            return this.beginDeleteMethod(resourceGroupName, serviceName, appName, domainName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Update custom domain of one lifecycle application.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param domainName The name of the custom domain resource.
         * @param domainResource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.CustomDomainsUpdateResponse>
         */
        CustomDomains.prototype.update = function (resourceGroupName, serviceName, appName, domainName, domainResource, options) {
            return this.beginUpdate(resourceGroupName, serviceName, appName, domainName, domainResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        CustomDomains.prototype.list = function (resourceGroupName, serviceName, appName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                options: options
            }, listOperationSpec$4, callback);
        };
        /**
         * Create or update custom domain of one lifecycle application.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param domainName The name of the custom domain resource.
         * @param domainResource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CustomDomains.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, appName, domainName, domainResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                domainName: domainName,
                domainResource: domainResource,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        /**
         * Delete the custom domain of one lifecycle application.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param domainName The name of the custom domain resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CustomDomains.prototype.beginDeleteMethod = function (resourceGroupName, serviceName, appName, domainName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                domainName: domainName,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        /**
         * Update custom domain of one lifecycle application.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param domainName The name of the custom domain resource.
         * @param domainResource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        CustomDomains.prototype.beginUpdate = function (resourceGroupName, serviceName, appName, domainName, domainResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                domainName: domainName,
                domainResource: domainResource,
                options: options
            }, beginUpdateOperationSpec$3, options);
        };
        CustomDomains.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return CustomDomains;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            domainName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CustomDomainResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CustomDomainResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            domainName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "domainResource",
            mapper: __assign(__assign({}, CustomDomainResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CustomDomainResource
            },
            201: {
                bodyMapper: CustomDomainResource
            },
            202: {
                bodyMapper: CustomDomainResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            domainName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginUpdateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            domainName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "domainResource",
            mapper: __assign(__assign({}, CustomDomainResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CustomDomainResource
            },
            202: {
                bodyMapper: CustomDomainResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CustomDomainResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsAgentVersions: ApplicationInsightsAgentVersions,
        AppResource: AppResource,
        AppResourceProperties: AppResourceProperties,
        BaseResource: BaseResource,
        BindingResource: BindingResource,
        BindingResourceProperties: BindingResourceProperties,
        CertificateProperties: CertificateProperties,
        CertificateResource: CertificateResource,
        CloudError: CloudError,
        ClusterResourceProperties: ClusterResourceProperties,
        ConfigServerGitProperty: ConfigServerGitProperty,
        ConfigServerProperties: ConfigServerProperties,
        ConfigServerResource: ConfigServerResource,
        ConfigServerSettings: ConfigServerSettings,
        CustomContainer: CustomContainer,
        CustomDomainProperties: CustomDomainProperties,
        CustomDomainResource: CustomDomainResource,
        DeploymentInstance: DeploymentInstance,
        DeploymentResource: DeploymentResource,
        DeploymentResourceCollection: DeploymentResourceCollection,
        DeploymentResourceProperties: DeploymentResourceProperties,
        DeploymentSettings: DeploymentSettings,
        ErrorModel: ErrorModel,
        GitPatternRepository: GitPatternRepository,
        ImageRegistryCredential: ImageRegistryCredential,
        LogFileUrlResponse: LogFileUrlResponse,
        ManagedIdentityProperties: ManagedIdentityProperties,
        MonitoringSettingProperties: MonitoringSettingProperties,
        MonitoringSettingResource: MonitoringSettingResource,
        NetworkProfile: NetworkProfile,
        NetworkProfileOutboundIPs: NetworkProfileOutboundIPs,
        PersistentDisk: PersistentDisk,
        ProxyResource: ProxyResource,
        RequiredTraffic: RequiredTraffic,
        Resource: Resource,
        ResourceRequests: ResourceRequests,
        ServiceResource: ServiceResource,
        Sku: Sku,
        TemporaryDisk: TemporaryDisk,
        TrackedResource: TrackedResource,
        UserSourceInfo: UserSourceInfo
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Deployments. */
    var Deployments = /** @class */ (function () {
        /**
         * Create a Deployments.
         * @param {AppPlatformManagementClientContext} client Reference to the service client.
         */
        function Deployments(client) {
            this.client = client;
        }
        Deployments.prototype.get = function (resourceGroupName, serviceName, appName, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                deploymentName: deploymentName,
                options: options
            }, getOperationSpec$7, callback);
        };
        /**
         * Create a new Deployment or update an exiting Deployment.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param deploymentName The name of the Deployment resource.
         * @param deploymentResource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsCreateOrUpdateResponse>
         */
        Deployments.prototype.createOrUpdate = function (resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to delete a Deployment.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param deploymentName The name of the Deployment resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Deployments.prototype.deleteMethod = function (resourceGroupName, serviceName, appName, deploymentName, options) {
            return this.beginDeleteMethod(resourceGroupName, serviceName, appName, deploymentName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Operation to update an exiting Deployment.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param deploymentName The name of the Deployment resource.
         * @param deploymentResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<Models.DeploymentsUpdateResponse>
         */
        Deployments.prototype.update = function (resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options) {
            return this.beginUpdate(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.list = function (resourceGroupName, serviceName, appName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                options: options
            }, listOperationSpec$5, callback);
        };
        Deployments.prototype.listForCluster = function (resourceGroupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                options: options
            }, listForClusterOperationSpec, callback);
        };
        /**
         * Start the deployment.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param deploymentName The name of the Deployment resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Deployments.prototype.start = function (resourceGroupName, serviceName, appName, deploymentName, options) {
            return this.beginStart(resourceGroupName, serviceName, appName, deploymentName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Stop the deployment.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param deploymentName The name of the Deployment resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Deployments.prototype.stop = function (resourceGroupName, serviceName, appName, deploymentName, options) {
            return this.beginStop(resourceGroupName, serviceName, appName, deploymentName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Restart the deployment.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param deploymentName The name of the Deployment resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Deployments.prototype.restart = function (resourceGroupName, serviceName, appName, deploymentName, options) {
            return this.beginRestart(resourceGroupName, serviceName, appName, deploymentName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Deployments.prototype.getLogFileUrl = function (resourceGroupName, serviceName, appName, deploymentName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                deploymentName: deploymentName,
                options: options
            }, getLogFileUrlOperationSpec, callback);
        };
        /**
         * Create a new Deployment or update an exiting Deployment.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param deploymentName The name of the Deployment resource.
         * @param deploymentResource Parameters for the create or update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                deploymentName: deploymentName,
                deploymentResource: deploymentResource,
                options: options
            }, beginCreateOrUpdateOperationSpec$5, options);
        };
        /**
         * Operation to delete a Deployment.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param deploymentName The name of the Deployment resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginDeleteMethod = function (resourceGroupName, serviceName, appName, deploymentName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                deploymentName: deploymentName,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        /**
         * Operation to update an exiting Deployment.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param deploymentName The name of the Deployment resource.
         * @param deploymentResource Parameters for the update operation
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginUpdate = function (resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                deploymentName: deploymentName,
                deploymentResource: deploymentResource,
                options: options
            }, beginUpdateOperationSpec$4, options);
        };
        /**
         * Start the deployment.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param deploymentName The name of the Deployment resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginStart = function (resourceGroupName, serviceName, appName, deploymentName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                deploymentName: deploymentName,
                options: options
            }, beginStartOperationSpec, options);
        };
        /**
         * Stop the deployment.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param deploymentName The name of the Deployment resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginStop = function (resourceGroupName, serviceName, appName, deploymentName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                deploymentName: deploymentName,
                options: options
            }, beginStopOperationSpec, options);
        };
        /**
         * Restart the deployment.
         * @param resourceGroupName The name of the resource group that contains the resource. You can
         * obtain this value from the Azure Resource Manager API or the portal.
         * @param serviceName The name of the Service resource.
         * @param appName The name of the App resource.
         * @param deploymentName The name of the Deployment resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Deployments.prototype.beginRestart = function (resourceGroupName, serviceName, appName, deploymentName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceName: serviceName,
                appName: appName,
                deploymentName: deploymentName,
                options: options
            }, beginRestartOperationSpec, options);
        };
        Deployments.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        Deployments.prototype.listForClusterNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listForClusterNextOperationSpec, callback);
        };
        return Deployments;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            deploymentName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName
        ],
        queryParameters: [
            apiVersion,
            version
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listForClusterOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/deployments",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName
        ],
        queryParameters: [
            apiVersion,
            version
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getLogFileUrlOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/getLogFileUrl",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            deploymentName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LogFileUrlResponse
            },
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginCreateOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            deploymentName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "deploymentResource",
            mapper: __assign(__assign({}, DeploymentResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentResource
            },
            201: {
                bodyMapper: DeploymentResource
            },
            202: {
                bodyMapper: DeploymentResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            deploymentName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginUpdateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            deploymentName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "deploymentResource",
            mapper: __assign(__assign({}, DeploymentResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DeploymentResource
            },
            202: {
                bodyMapper: DeploymentResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginStartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/start",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            deploymentName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginStopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/stop",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            deploymentName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginRestartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/restart",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceName,
            appName,
            deploymentName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion,
            version
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listForClusterNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion,
            version
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DeploymentResourceCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AvailableOperations: AvailableOperations,
        CloudError: CloudError,
        LogSpecification: LogSpecification,
        MetricDimension: MetricDimension,
        MetricSpecification: MetricSpecification,
        OperationDetail: OperationDetail,
        OperationDisplay: OperationDisplay,
        OperationProperties: OperationProperties,
        ServiceSpecification: ServiceSpecification
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {AppPlatformManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$6, callback);
        };
        Operations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "providers/Microsoft.AppPlatform/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableOperations
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableOperations
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AvailableRuntimeVersions: AvailableRuntimeVersions,
        CloudError: CloudError,
        SupportedRuntimeVersion: SupportedRuntimeVersion
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a RuntimeVersions. */
    var RuntimeVersions = /** @class */ (function () {
        /**
         * Create a RuntimeVersions.
         * @param {AppPlatformManagementClientContext} client Reference to the service client.
         */
        function RuntimeVersions(client) {
            this.client = client;
        }
        RuntimeVersions.prototype.listRuntimeVersions = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listRuntimeVersionsOperationSpec, callback);
        };
        return RuntimeVersions;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listRuntimeVersionsOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.AppPlatform/runtimeVersions",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableRuntimeVersions
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        ResourceSku: ResourceSku,
        ResourceSkuCapabilities: ResourceSkuCapabilities,
        ResourceSkuCollection: ResourceSkuCollection,
        ResourceSkuLocationInfo: ResourceSkuLocationInfo,
        ResourceSkuRestrictionInfo: ResourceSkuRestrictionInfo,
        ResourceSkuRestrictions: ResourceSkuRestrictions,
        ResourceSkuZoneDetails: ResourceSkuZoneDetails,
        SkuCapacity: SkuCapacity
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Skus. */
    var Skus = /** @class */ (function () {
        /**
         * Create a Skus.
         * @param {AppPlatformManagementClientContext} client Reference to the service client.
         */
        function Skus(client) {
            this.client = client;
        }
        Skus.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$7, callback);
        };
        Skus.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$7, callback);
        };
        return Skus;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/skus",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceSkuCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceSkuCollection
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-appplatform";
    var packageVersion = "1.4.0";
    var AppPlatformManagementClientContext = /** @class */ (function (_super) {
        __extends(AppPlatformManagementClientContext, _super);
        /**
         * Initializes a new instance of the AppPlatformManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Gets subscription ID which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function AppPlatformManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2021-06-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return AppPlatformManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var AppPlatformManagementClient = /** @class */ (function (_super) {
        __extends(AppPlatformManagementClient, _super);
        /**
         * Initializes a new instance of the AppPlatformManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Gets subscription ID which uniquely identify the Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function AppPlatformManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.services = new Services(_this);
            _this.configServers = new ConfigServers(_this);
            _this.monitoringSettings = new MonitoringSettings(_this);
            _this.apps = new Apps(_this);
            _this.bindings = new Bindings(_this);
            _this.certificates = new Certificates(_this);
            _this.customDomains = new CustomDomains(_this);
            _this.deployments = new Deployments(_this);
            _this.operations = new Operations(_this);
            _this.runtimeVersions = new RuntimeVersions(_this);
            _this.skus = new Skus(_this);
            return _this;
        }
        return AppPlatformManagementClient;
    }(AppPlatformManagementClientContext));

    exports.AppPlatformManagementClient = AppPlatformManagementClient;
    exports.AppPlatformManagementClientContext = AppPlatformManagementClientContext;
    exports.AppPlatformManagementMappers = mappers;
    exports.AppPlatformManagementModels = index;
    exports.Apps = Apps;
    exports.Bindings = Bindings;
    exports.Certificates = Certificates;
    exports.ConfigServers = ConfigServers;
    exports.CustomDomains = CustomDomains;
    exports.Deployments = Deployments;
    exports.MonitoringSettings = MonitoringSettings;
    exports.Operations = Operations;
    exports.RuntimeVersions = RuntimeVersions;
    exports.Services = Services;
    exports.Skus = Skus;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-appplatform.js.map
