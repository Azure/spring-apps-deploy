'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var tslib = require('tslib');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    KnownProvisioningState["Creating"] = "Creating";
    KnownProvisioningState["Updating"] = "Updating";
    KnownProvisioningState["Starting"] = "Starting";
    KnownProvisioningState["Stopping"] = "Stopping";
    KnownProvisioningState["Deleting"] = "Deleting";
    KnownProvisioningState["Deleted"] = "Deleted";
    KnownProvisioningState["Succeeded"] = "Succeeded";
    KnownProvisioningState["Failed"] = "Failed";
    KnownProvisioningState["Moving"] = "Moving";
    KnownProvisioningState["Moved"] = "Moved";
    KnownProvisioningState["MoveFailed"] = "MoveFailed";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link TrafficDirection} that the service accepts. */
exports.KnownTrafficDirection = void 0;
(function (KnownTrafficDirection) {
    KnownTrafficDirection["Inbound"] = "Inbound";
    KnownTrafficDirection["Outbound"] = "Outbound";
})(exports.KnownTrafficDirection || (exports.KnownTrafficDirection = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    KnownCreatedByType["User"] = "User";
    KnownCreatedByType["Application"] = "Application";
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link LastModifiedByType} that the service accepts. */
exports.KnownLastModifiedByType = void 0;
(function (KnownLastModifiedByType) {
    KnownLastModifiedByType["User"] = "User";
    KnownLastModifiedByType["Application"] = "Application";
    KnownLastModifiedByType["ManagedIdentity"] = "ManagedIdentity";
    KnownLastModifiedByType["Key"] = "Key";
})(exports.KnownLastModifiedByType || (exports.KnownLastModifiedByType = {}));
/** Known values of {@link TestKeyType} that the service accepts. */
exports.KnownTestKeyType = void 0;
(function (KnownTestKeyType) {
    KnownTestKeyType["Primary"] = "Primary";
    KnownTestKeyType["Secondary"] = "Secondary";
})(exports.KnownTestKeyType || (exports.KnownTestKeyType = {}));
/** Known values of {@link ConfigServerState} that the service accepts. */
exports.KnownConfigServerState = void 0;
(function (KnownConfigServerState) {
    KnownConfigServerState["NotAvailable"] = "NotAvailable";
    KnownConfigServerState["Deleted"] = "Deleted";
    KnownConfigServerState["Failed"] = "Failed";
    KnownConfigServerState["Succeeded"] = "Succeeded";
    KnownConfigServerState["Updating"] = "Updating";
})(exports.KnownConfigServerState || (exports.KnownConfigServerState = {}));
/** Known values of {@link ConfigurationServiceProvisioningState} that the service accepts. */
exports.KnownConfigurationServiceProvisioningState = void 0;
(function (KnownConfigurationServiceProvisioningState) {
    KnownConfigurationServiceProvisioningState["Creating"] = "Creating";
    KnownConfigurationServiceProvisioningState["Updating"] = "Updating";
    KnownConfigurationServiceProvisioningState["Succeeded"] = "Succeeded";
    KnownConfigurationServiceProvisioningState["Failed"] = "Failed";
    KnownConfigurationServiceProvisioningState["Deleting"] = "Deleting";
})(exports.KnownConfigurationServiceProvisioningState || (exports.KnownConfigurationServiceProvisioningState = {}));
/** Known values of {@link ServiceRegistryProvisioningState} that the service accepts. */
exports.KnownServiceRegistryProvisioningState = void 0;
(function (KnownServiceRegistryProvisioningState) {
    KnownServiceRegistryProvisioningState["Creating"] = "Creating";
    KnownServiceRegistryProvisioningState["Updating"] = "Updating";
    KnownServiceRegistryProvisioningState["Succeeded"] = "Succeeded";
    KnownServiceRegistryProvisioningState["Failed"] = "Failed";
    KnownServiceRegistryProvisioningState["Deleting"] = "Deleting";
})(exports.KnownServiceRegistryProvisioningState || (exports.KnownServiceRegistryProvisioningState = {}));
/** Known values of {@link BuildServiceProvisioningState} that the service accepts. */
exports.KnownBuildServiceProvisioningState = void 0;
(function (KnownBuildServiceProvisioningState) {
    KnownBuildServiceProvisioningState["Creating"] = "Creating";
    KnownBuildServiceProvisioningState["Updating"] = "Updating";
    KnownBuildServiceProvisioningState["Succeeded"] = "Succeeded";
    KnownBuildServiceProvisioningState["Failed"] = "Failed";
    KnownBuildServiceProvisioningState["Deleting"] = "Deleting";
})(exports.KnownBuildServiceProvisioningState || (exports.KnownBuildServiceProvisioningState = {}));
/** Known values of {@link BuildProvisioningState} that the service accepts. */
exports.KnownBuildProvisioningState = void 0;
(function (KnownBuildProvisioningState) {
    KnownBuildProvisioningState["Creating"] = "Creating";
    KnownBuildProvisioningState["Updating"] = "Updating";
    KnownBuildProvisioningState["Succeeded"] = "Succeeded";
    KnownBuildProvisioningState["Failed"] = "Failed";
    KnownBuildProvisioningState["Deleting"] = "Deleting";
})(exports.KnownBuildProvisioningState || (exports.KnownBuildProvisioningState = {}));
/** Known values of {@link BindingType} that the service accepts. */
exports.KnownBindingType = void 0;
(function (KnownBindingType) {
    KnownBindingType["ApplicationInsights"] = "ApplicationInsights";
    KnownBindingType["ApacheSkyWalking"] = "ApacheSkyWalking";
    KnownBindingType["AppDynamics"] = "AppDynamics";
    KnownBindingType["Dynatrace"] = "Dynatrace";
    KnownBindingType["NewRelic"] = "NewRelic";
    KnownBindingType["ElasticAPM"] = "ElasticAPM";
})(exports.KnownBindingType || (exports.KnownBindingType = {}));
/** Known values of {@link BuildpackBindingProvisioningState} that the service accepts. */
exports.KnownBuildpackBindingProvisioningState = void 0;
(function (KnownBuildpackBindingProvisioningState) {
    KnownBuildpackBindingProvisioningState["Creating"] = "Creating";
    KnownBuildpackBindingProvisioningState["Updating"] = "Updating";
    KnownBuildpackBindingProvisioningState["Succeeded"] = "Succeeded";
    KnownBuildpackBindingProvisioningState["Failed"] = "Failed";
    KnownBuildpackBindingProvisioningState["Deleting"] = "Deleting";
})(exports.KnownBuildpackBindingProvisioningState || (exports.KnownBuildpackBindingProvisioningState = {}));
/** Known values of {@link BuildResultProvisioningState} that the service accepts. */
exports.KnownBuildResultProvisioningState = void 0;
(function (KnownBuildResultProvisioningState) {
    KnownBuildResultProvisioningState["Queuing"] = "Queuing";
    KnownBuildResultProvisioningState["Building"] = "Building";
    KnownBuildResultProvisioningState["Succeeded"] = "Succeeded";
    KnownBuildResultProvisioningState["Failed"] = "Failed";
    KnownBuildResultProvisioningState["Deleting"] = "Deleting";
})(exports.KnownBuildResultProvisioningState || (exports.KnownBuildResultProvisioningState = {}));
/** Known values of {@link KPackBuildStageProvisioningState} that the service accepts. */
exports.KnownKPackBuildStageProvisioningState = void 0;
(function (KnownKPackBuildStageProvisioningState) {
    KnownKPackBuildStageProvisioningState["NotStarted"] = "NotStarted";
    KnownKPackBuildStageProvisioningState["Running"] = "Running";
    KnownKPackBuildStageProvisioningState["Succeeded"] = "Succeeded";
    KnownKPackBuildStageProvisioningState["Failed"] = "Failed";
})(exports.KnownKPackBuildStageProvisioningState || (exports.KnownKPackBuildStageProvisioningState = {}));
/** Known values of {@link BuilderProvisioningState} that the service accepts. */
exports.KnownBuilderProvisioningState = void 0;
(function (KnownBuilderProvisioningState) {
    KnownBuilderProvisioningState["Creating"] = "Creating";
    KnownBuilderProvisioningState["Updating"] = "Updating";
    KnownBuilderProvisioningState["Succeeded"] = "Succeeded";
    KnownBuilderProvisioningState["Failed"] = "Failed";
    KnownBuilderProvisioningState["Deleting"] = "Deleting";
})(exports.KnownBuilderProvisioningState || (exports.KnownBuilderProvisioningState = {}));
/** Known values of {@link MonitoringSettingState} that the service accepts. */
exports.KnownMonitoringSettingState = void 0;
(function (KnownMonitoringSettingState) {
    KnownMonitoringSettingState["NotAvailable"] = "NotAvailable";
    KnownMonitoringSettingState["Failed"] = "Failed";
    KnownMonitoringSettingState["Succeeded"] = "Succeeded";
    KnownMonitoringSettingState["Updating"] = "Updating";
})(exports.KnownMonitoringSettingState || (exports.KnownMonitoringSettingState = {}));
/** Known values of {@link AppResourceProvisioningState} that the service accepts. */
exports.KnownAppResourceProvisioningState = void 0;
(function (KnownAppResourceProvisioningState) {
    KnownAppResourceProvisioningState["Succeeded"] = "Succeeded";
    KnownAppResourceProvisioningState["Failed"] = "Failed";
    KnownAppResourceProvisioningState["Creating"] = "Creating";
    KnownAppResourceProvisioningState["Updating"] = "Updating";
    KnownAppResourceProvisioningState["Deleting"] = "Deleting";
})(exports.KnownAppResourceProvisioningState || (exports.KnownAppResourceProvisioningState = {}));
/** Known values of {@link ManagedIdentityType} that the service accepts. */
exports.KnownManagedIdentityType = void 0;
(function (KnownManagedIdentityType) {
    KnownManagedIdentityType["None"] = "None";
    KnownManagedIdentityType["SystemAssigned"] = "SystemAssigned";
    KnownManagedIdentityType["UserAssigned"] = "UserAssigned";
    KnownManagedIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned,UserAssigned";
})(exports.KnownManagedIdentityType || (exports.KnownManagedIdentityType = {}));
/** Known values of {@link DeploymentResourceProvisioningState} that the service accepts. */
exports.KnownDeploymentResourceProvisioningState = void 0;
(function (KnownDeploymentResourceProvisioningState) {
    KnownDeploymentResourceProvisioningState["Creating"] = "Creating";
    KnownDeploymentResourceProvisioningState["Updating"] = "Updating";
    KnownDeploymentResourceProvisioningState["Succeeded"] = "Succeeded";
    KnownDeploymentResourceProvisioningState["Failed"] = "Failed";
})(exports.KnownDeploymentResourceProvisioningState || (exports.KnownDeploymentResourceProvisioningState = {}));
/** Known values of {@link DeploymentResourceStatus} that the service accepts. */
exports.KnownDeploymentResourceStatus = void 0;
(function (KnownDeploymentResourceStatus) {
    KnownDeploymentResourceStatus["Stopped"] = "Stopped";
    KnownDeploymentResourceStatus["Running"] = "Running";
})(exports.KnownDeploymentResourceStatus || (exports.KnownDeploymentResourceStatus = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link SupportedRuntimeValue} that the service accepts. */
exports.KnownSupportedRuntimeValue = void 0;
(function (KnownSupportedRuntimeValue) {
    KnownSupportedRuntimeValue["Java8"] = "Java_8";
    KnownSupportedRuntimeValue["Java11"] = "Java_11";
    KnownSupportedRuntimeValue["Java17"] = "Java_17";
    KnownSupportedRuntimeValue["NetCore31"] = "NetCore_31";
})(exports.KnownSupportedRuntimeValue || (exports.KnownSupportedRuntimeValue = {}));
/** Known values of {@link SupportedRuntimePlatform} that the service accepts. */
exports.KnownSupportedRuntimePlatform = void 0;
(function (KnownSupportedRuntimePlatform) {
    KnownSupportedRuntimePlatform["Java"] = "Java";
    KnownSupportedRuntimePlatform["NETCore"] = ".NET Core";
})(exports.KnownSupportedRuntimePlatform || (exports.KnownSupportedRuntimePlatform = {}));
/** Known values of {@link SkuScaleType} that the service accepts. */
exports.KnownSkuScaleType = void 0;
(function (KnownSkuScaleType) {
    KnownSkuScaleType["None"] = "None";
    KnownSkuScaleType["Manual"] = "Manual";
    KnownSkuScaleType["Automatic"] = "Automatic";
})(exports.KnownSkuScaleType || (exports.KnownSkuScaleType = {}));
/** Known values of {@link ResourceSkuRestrictionsType} that the service accepts. */
exports.KnownResourceSkuRestrictionsType = void 0;
(function (KnownResourceSkuRestrictionsType) {
    KnownResourceSkuRestrictionsType["Location"] = "Location";
    KnownResourceSkuRestrictionsType["Zone"] = "Zone";
})(exports.KnownResourceSkuRestrictionsType || (exports.KnownResourceSkuRestrictionsType = {}));
/** Known values of {@link ResourceSkuRestrictionsReasonCode} that the service accepts. */
exports.KnownResourceSkuRestrictionsReasonCode = void 0;
(function (KnownResourceSkuRestrictionsReasonCode) {
    KnownResourceSkuRestrictionsReasonCode["QuotaId"] = "QuotaId";
    KnownResourceSkuRestrictionsReasonCode["NotAvailableForSubscription"] = "NotAvailableForSubscription";
})(exports.KnownResourceSkuRestrictionsReasonCode || (exports.KnownResourceSkuRestrictionsReasonCode = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const ClusterResourceProperties = {
    type: {
        name: "Composite",
        className: "ClusterResourceProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            networkProfile: {
                serializedName: "networkProfile",
                type: {
                    name: "Composite",
                    className: "NetworkProfile"
                }
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            serviceId: {
                serializedName: "serviceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            zoneRedundant: {
                defaultValue: false,
                serializedName: "zoneRedundant",
                type: {
                    name: "Boolean"
                }
            },
            fqdn: {
                serializedName: "fqdn",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NetworkProfile = {
    type: {
        name: "Composite",
        className: "NetworkProfile",
        modelProperties: {
            serviceRuntimeSubnetId: {
                serializedName: "serviceRuntimeSubnetId",
                type: {
                    name: "String"
                }
            },
            appSubnetId: {
                serializedName: "appSubnetId",
                type: {
                    name: "String"
                }
            },
            serviceCidr: {
                serializedName: "serviceCidr",
                type: {
                    name: "String"
                }
            },
            serviceRuntimeNetworkResourceGroup: {
                serializedName: "serviceRuntimeNetworkResourceGroup",
                type: {
                    name: "String"
                }
            },
            appNetworkResourceGroup: {
                serializedName: "appNetworkResourceGroup",
                type: {
                    name: "String"
                }
            },
            outboundIPs: {
                serializedName: "outboundIPs",
                type: {
                    name: "Composite",
                    className: "NetworkProfileOutboundIPs"
                }
            },
            requiredTraffics: {
                serializedName: "requiredTraffics",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RequiredTraffic"
                        }
                    }
                }
            }
        }
    }
};
const NetworkProfileOutboundIPs = {
    type: {
        name: "Composite",
        className: "NetworkProfileOutboundIPs",
        modelProperties: {
            publicIPs: {
                serializedName: "publicIPs",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const RequiredTraffic = {
    type: {
        name: "Composite",
        className: "RequiredTraffic",
        modelProperties: {
            protocol: {
                serializedName: "protocol",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            port: {
                serializedName: "port",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            ips: {
                serializedName: "ips",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            fqdns: {
                serializedName: "fqdns",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            direction: {
                serializedName: "direction",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                defaultValue: "S0",
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            tier: {
                defaultValue: "Standard",
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudErrorBody"
                        }
                    }
                }
            }
        }
    }
};
const TestKeys = {
    type: {
        name: "Composite",
        className: "TestKeys",
        modelProperties: {
            primaryKey: {
                serializedName: "primaryKey",
                type: {
                    name: "String"
                }
            },
            secondaryKey: {
                serializedName: "secondaryKey",
                type: {
                    name: "String"
                }
            },
            primaryTestEndpoint: {
                serializedName: "primaryTestEndpoint",
                type: {
                    name: "String"
                }
            },
            secondaryTestEndpoint: {
                serializedName: "secondaryTestEndpoint",
                type: {
                    name: "String"
                }
            },
            enabled: {
                serializedName: "enabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const RegenerateTestKeyRequestPayload = {
    type: {
        name: "Composite",
        className: "RegenerateTestKeyRequestPayload",
        modelProperties: {
            keyType: {
                serializedName: "keyType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigServerProperties = {
    type: {
        name: "Composite",
        className: "ConfigServerProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            },
            configServer: {
                serializedName: "configServer",
                type: {
                    name: "Composite",
                    className: "ConfigServerSettings"
                }
            }
        }
    }
};
const ErrorModel = {
    type: {
        name: "Composite",
        className: "ErrorModel",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigServerSettings = {
    type: {
        name: "Composite",
        className: "ConfigServerSettings",
        modelProperties: {
            gitProperty: {
                serializedName: "gitProperty",
                type: {
                    name: "Composite",
                    className: "ConfigServerGitProperty"
                }
            }
        }
    }
};
const ConfigServerGitProperty = {
    type: {
        name: "Composite",
        className: "ConfigServerGitProperty",
        modelProperties: {
            repositories: {
                serializedName: "repositories",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GitPatternRepository"
                        }
                    }
                }
            },
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            searchPaths: {
                serializedName: "searchPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            },
            hostKey: {
                serializedName: "hostKey",
                type: {
                    name: "String"
                }
            },
            hostKeyAlgorithm: {
                serializedName: "hostKeyAlgorithm",
                type: {
                    name: "String"
                }
            },
            privateKey: {
                serializedName: "privateKey",
                type: {
                    name: "String"
                }
            },
            strictHostKeyChecking: {
                serializedName: "strictHostKeyChecking",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const GitPatternRepository = {
    type: {
        name: "Composite",
        className: "GitPatternRepository",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            pattern: {
                serializedName: "pattern",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            searchPaths: {
                serializedName: "searchPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            },
            hostKey: {
                serializedName: "hostKey",
                type: {
                    name: "String"
                }
            },
            hostKeyAlgorithm: {
                serializedName: "hostKeyAlgorithm",
                type: {
                    name: "String"
                }
            },
            privateKey: {
                serializedName: "privateKey",
                type: {
                    name: "String"
                }
            },
            strictHostKeyChecking: {
                serializedName: "strictHostKeyChecking",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ConfigServerSettingsValidateResult = {
    type: {
        name: "Composite",
        className: "ConfigServerSettingsValidateResult",
        modelProperties: {
            isValid: {
                serializedName: "isValid",
                type: {
                    name: "Boolean"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigServerSettingsErrorRecord"
                        }
                    }
                }
            }
        }
    }
};
const ConfigServerSettingsErrorRecord = {
    type: {
        name: "Composite",
        className: "ConfigServerSettingsErrorRecord",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            uri: {
                serializedName: "uri",
                type: {
                    name: "String"
                }
            },
            messages: {
                serializedName: "messages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ConfigurationServiceProperties = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "ConfigurationServiceResourceRequests"
                }
            },
            instances: {
                serializedName: "instances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigurationServiceInstance"
                        }
                    }
                }
            },
            settings: {
                serializedName: "settings",
                type: {
                    name: "Composite",
                    className: "ConfigurationServiceSettings"
                }
            }
        }
    }
};
const ConfigurationServiceResourceRequests = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            instanceCount: {
                serializedName: "instanceCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ConfigurationServiceInstance = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceInstance",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigurationServiceSettings = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceSettings",
        modelProperties: {
            gitProperty: {
                serializedName: "gitProperty",
                type: {
                    name: "Composite",
                    className: "ConfigurationServiceGitProperty"
                }
            }
        }
    }
};
const ConfigurationServiceGitProperty = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceGitProperty",
        modelProperties: {
            repositories: {
                serializedName: "repositories",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigurationServiceGitRepository"
                        }
                    }
                }
            }
        }
    }
};
const ConfigurationServiceGitRepository = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceGitRepository",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            patterns: {
                serializedName: "patterns",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            searchPaths: {
                serializedName: "searchPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            },
            hostKey: {
                serializedName: "hostKey",
                type: {
                    name: "String"
                }
            },
            hostKeyAlgorithm: {
                serializedName: "hostKeyAlgorithm",
                type: {
                    name: "String"
                }
            },
            privateKey: {
                serializedName: "privateKey",
                type: {
                    name: "String"
                }
            },
            strictHostKeyChecking: {
                serializedName: "strictHostKeyChecking",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ConfigurationServiceResourceCollection = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigurationServiceResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigurationServiceSettingsValidateResult = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceSettingsValidateResult",
        modelProperties: {
            gitPropertyValidationResult: {
                serializedName: "gitPropertyValidationResult",
                type: {
                    name: "Composite",
                    className: "ConfigurationServiceGitPropertyValidateResult"
                }
            }
        }
    }
};
const ConfigurationServiceGitPropertyValidateResult = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceGitPropertyValidateResult",
        modelProperties: {
            isValid: {
                serializedName: "isValid",
                type: {
                    name: "Boolean"
                }
            },
            gitReposValidationResult: {
                serializedName: "gitReposValidationResult",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidationMessages"
                        }
                    }
                }
            }
        }
    }
};
const ValidationMessages = {
    type: {
        name: "Composite",
        className: "ValidationMessages",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            messages: {
                serializedName: "messages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ServiceRegistryProperties = {
    type: {
        name: "Composite",
        className: "ServiceRegistryProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "ServiceRegistryResourceRequests"
                }
            },
            instances: {
                serializedName: "instances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceRegistryInstance"
                        }
                    }
                }
            }
        }
    }
};
const ServiceRegistryResourceRequests = {
    type: {
        name: "Composite",
        className: "ServiceRegistryResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            instanceCount: {
                serializedName: "instanceCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ServiceRegistryInstance = {
    type: {
        name: "Composite",
        className: "ServiceRegistryInstance",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceRegistryResourceCollection = {
    type: {
        name: "Composite",
        className: "ServiceRegistryResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceRegistryResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildServiceCollection = {
    type: {
        name: "Composite",
        className: "BuildServiceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildService"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildServiceProperties = {
    type: {
        name: "Composite",
        className: "BuildServiceProperties",
        modelProperties: {
            kPackVersion: {
                serializedName: "kPackVersion",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "BuildServicePropertiesResourceRequests"
                }
            }
        }
    }
};
const BuildServicePropertiesResourceRequests = {
    type: {
        name: "Composite",
        className: "BuildServicePropertiesResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildCollection = {
    type: {
        name: "Composite",
        className: "BuildCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Build"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildProperties = {
    type: {
        name: "Composite",
        className: "BuildProperties",
        modelProperties: {
            relativePath: {
                serializedName: "relativePath",
                type: {
                    name: "String"
                }
            },
            builder: {
                serializedName: "builder",
                type: {
                    name: "String"
                }
            },
            agentPool: {
                serializedName: "agentPool",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            env: {
                serializedName: "env",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            triggeredBuildResult: {
                serializedName: "triggeredBuildResult",
                type: {
                    name: "Composite",
                    className: "TriggeredBuildResult"
                }
            }
        }
    }
};
const TriggeredBuildResult = {
    type: {
        name: "Composite",
        className: "TriggeredBuildResult",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildpackBindingProperties = {
    type: {
        name: "Composite",
        className: "BuildpackBindingProperties",
        modelProperties: {
            bindingType: {
                serializedName: "bindingType",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            launchProperties: {
                serializedName: "launchProperties",
                type: {
                    name: "Composite",
                    className: "BuildpackBindingLaunchProperties"
                }
            }
        }
    }
};
const BuildpackBindingLaunchProperties = {
    type: {
        name: "Composite",
        className: "BuildpackBindingLaunchProperties",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            secrets: {
                serializedName: "secrets",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const BuildpackBindingResourceCollection = {
    type: {
        name: "Composite",
        className: "BuildpackBindingResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildpackBindingResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildResultCollection = {
    type: {
        name: "Composite",
        className: "BuildResultCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildResult"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildResultProperties = {
    type: {
        name: "Composite",
        className: "BuildResultProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            buildPodName: {
                serializedName: "buildPodName",
                type: {
                    name: "String"
                }
            },
            buildStages: {
                serializedName: "buildStages",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildStageProperties"
                        }
                    }
                }
            }
        }
    }
};
const BuildStageProperties = {
    type: {
        name: "Composite",
        className: "BuildStageProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildResultLog = {
    type: {
        name: "Composite",
        className: "BuildResultLog",
        modelProperties: {
            blobUrl: {
                serializedName: "blobUrl",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuilderProperties = {
    type: {
        name: "Composite",
        className: "BuilderProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            stack: {
                serializedName: "stack",
                type: {
                    name: "Composite",
                    className: "StackProperties"
                }
            },
            buildpackGroups: {
                serializedName: "buildpackGroups",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildpacksGroupProperties"
                        }
                    }
                }
            }
        }
    }
};
const StackProperties = {
    type: {
        name: "Composite",
        className: "StackProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildpacksGroupProperties = {
    type: {
        name: "Composite",
        className: "BuildpacksGroupProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            buildpacks: {
                serializedName: "buildpacks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildpackProperties"
                        }
                    }
                }
            }
        }
    }
};
const BuildpackProperties = {
    type: {
        name: "Composite",
        className: "BuildpackProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuilderResourceCollection = {
    type: {
        name: "Composite",
        className: "BuilderResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuilderResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceUploadDefinition = {
    type: {
        name: "Composite",
        className: "ResourceUploadDefinition",
        modelProperties: {
            relativePath: {
                serializedName: "relativePath",
                type: {
                    name: "String"
                }
            },
            uploadUrl: {
                serializedName: "uploadUrl",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SupportedBuildpacksCollection = {
    type: {
        name: "Composite",
        className: "SupportedBuildpacksCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SupportedBuildpackResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SupportedBuildpackResourceProperties = {
    type: {
        name: "Composite",
        className: "SupportedBuildpackResourceProperties",
        modelProperties: {
            buildpackId: {
                serializedName: "buildpackId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SupportedStacksCollection = {
    type: {
        name: "Composite",
        className: "SupportedStacksCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SupportedStackResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SupportedStackResourceProperties = {
    type: {
        name: "Composite",
        className: "SupportedStackResourceProperties",
        modelProperties: {
            stackId: {
                serializedName: "stackId",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildServiceAgentPoolResourceCollection = {
    type: {
        name: "Composite",
        className: "BuildServiceAgentPoolResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildServiceAgentPoolResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildServiceAgentPoolProperties = {
    type: {
        name: "Composite",
        className: "BuildServiceAgentPoolProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            poolSize: {
                serializedName: "poolSize",
                type: {
                    name: "Composite",
                    className: "BuildServiceAgentPoolSizeProperties"
                }
            }
        }
    }
};
const BuildServiceAgentPoolSizeProperties = {
    type: {
        name: "Composite",
        className: "BuildServiceAgentPoolSizeProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitoringSettingProperties = {
    type: {
        name: "Composite",
        className: "MonitoringSettingProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            },
            traceEnabled: {
                serializedName: "traceEnabled",
                type: {
                    name: "Boolean"
                }
            },
            appInsightsInstrumentationKey: {
                serializedName: "appInsightsInstrumentationKey",
                type: {
                    name: "String"
                }
            },
            appInsightsSamplingRate: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "appInsightsSamplingRate",
                type: {
                    name: "Number"
                }
            },
            appInsightsAgentVersions: {
                serializedName: "appInsightsAgentVersions",
                type: {
                    name: "Composite",
                    className: "ApplicationInsightsAgentVersions"
                }
            }
        }
    }
};
const ApplicationInsightsAgentVersions = {
    type: {
        name: "Composite",
        className: "ApplicationInsightsAgentVersions",
        modelProperties: {
            java: {
                serializedName: "java",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppResourceProperties = {
    type: {
        name: "Composite",
        className: "AppResourceProperties",
        modelProperties: {
            public: {
                serializedName: "public",
                type: {
                    name: "Boolean"
                }
            },
            url: {
                serializedName: "url",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            addonConfigs: {
                serializedName: "addonConfigs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: { name: "Dictionary", value: { type: { name: "any" } } }
                            }
                        }
                    }
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            fqdn: {
                serializedName: "fqdn",
                type: {
                    name: "String"
                }
            },
            httpsOnly: {
                defaultValue: false,
                serializedName: "httpsOnly",
                type: {
                    name: "Boolean"
                }
            },
            temporaryDisk: {
                serializedName: "temporaryDisk",
                type: {
                    name: "Composite",
                    className: "TemporaryDisk"
                }
            },
            persistentDisk: {
                serializedName: "persistentDisk",
                type: {
                    name: "Composite",
                    className: "PersistentDisk"
                }
            },
            enableEndToEndTLS: {
                defaultValue: false,
                serializedName: "enableEndToEndTLS",
                type: {
                    name: "Boolean"
                }
            },
            loadedCertificates: {
                serializedName: "loadedCertificates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LoadedCertificate"
                        }
                    }
                }
            }
        }
    }
};
const TemporaryDisk = {
    type: {
        name: "Composite",
        className: "TemporaryDisk",
        modelProperties: {
            sizeInGB: {
                constraints: {
                    InclusiveMaximum: 5,
                    InclusiveMinimum: 0
                },
                serializedName: "sizeInGB",
                type: {
                    name: "Number"
                }
            },
            mountPath: {
                defaultValue: "/tmp",
                serializedName: "mountPath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PersistentDisk = {
    type: {
        name: "Composite",
        className: "PersistentDisk",
        modelProperties: {
            sizeInGB: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 0
                },
                serializedName: "sizeInGB",
                type: {
                    name: "Number"
                }
            },
            usedInGB: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 0
                },
                serializedName: "usedInGB",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            mountPath: {
                serializedName: "mountPath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LoadedCertificate = {
    type: {
        name: "Composite",
        className: "LoadedCertificate",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            loadTrustStore: {
                defaultValue: false,
                serializedName: "loadTrustStore",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ManagedIdentityProperties = {
    type: {
        name: "Composite",
        className: "ManagedIdentityProperties",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppResourceCollection = {
    type: {
        name: "Composite",
        className: "AppResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AppResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ActiveDeploymentCollection = {
    type: {
        name: "Composite",
        className: "ActiveDeploymentCollection",
        modelProperties: {
            activeDeploymentNames: {
                serializedName: "activeDeploymentNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const BindingResourceProperties = {
    type: {
        name: "Composite",
        className: "BindingResourceProperties",
        modelProperties: {
            resourceName: {
                serializedName: "resourceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            key: {
                serializedName: "key",
                type: {
                    name: "String"
                }
            },
            bindingParameters: {
                serializedName: "bindingParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            },
            generatedProperties: {
                serializedName: "generatedProperties",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            updatedAt: {
                serializedName: "updatedAt",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BindingResourceCollection = {
    type: {
        name: "Composite",
        className: "BindingResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BindingResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CertificateProperties = {
    type: {
        name: "Composite",
        className: "CertificateProperties",
        uberParent: "CertificateProperties",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            thumbprint: {
                serializedName: "thumbprint",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            issuer: {
                serializedName: "issuer",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            issuedDate: {
                serializedName: "issuedDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            expirationDate: {
                serializedName: "expirationDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            activateDate: {
                serializedName: "activateDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            subjectName: {
                serializedName: "subjectName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dnsNames: {
                serializedName: "dnsNames",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const CertificateResourceCollection = {
    type: {
        name: "Composite",
        className: "CertificateResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CertificateResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NameAvailabilityParameters = {
    type: {
        name: "Composite",
        className: "NameAvailabilityParameters",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NameAvailability = {
    type: {
        name: "Composite",
        className: "NameAvailability",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomDomainProperties = {
    type: {
        name: "Composite",
        className: "CustomDomainProperties",
        modelProperties: {
            thumbprint: {
                serializedName: "thumbprint",
                type: {
                    name: "String"
                }
            },
            appName: {
                serializedName: "appName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            certName: {
                serializedName: "certName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomDomainResourceCollection = {
    type: {
        name: "Composite",
        className: "CustomDomainResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomDomainResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomDomainValidatePayload = {
    type: {
        name: "Composite",
        className: "CustomDomainValidatePayload",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomDomainValidateResult = {
    type: {
        name: "Composite",
        className: "CustomDomainValidateResult",
        modelProperties: {
            isValid: {
                serializedName: "isValid",
                type: {
                    name: "Boolean"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentResourceProperties = {
    type: {
        name: "Composite",
        className: "DeploymentResourceProperties",
        modelProperties: {
            source: {
                serializedName: "source",
                type: {
                    name: "Composite",
                    className: "UserSourceInfo"
                }
            },
            deploymentSettings: {
                serializedName: "deploymentSettings",
                type: {
                    name: "Composite",
                    className: "DeploymentSettings"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            active: {
                serializedName: "active",
                type: {
                    name: "Boolean"
                }
            },
            instances: {
                serializedName: "instances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeploymentInstance"
                        }
                    }
                }
            }
        }
    }
};
const UserSourceInfo = {
    type: {
        name: "Composite",
        className: "UserSourceInfo",
        uberParent: "UserSourceInfo",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentSettings = {
    type: {
        name: "Composite",
        className: "DeploymentSettings",
        modelProperties: {
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "ResourceRequests"
                }
            },
            environmentVariables: {
                serializedName: "environmentVariables",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            addonConfigs: {
                serializedName: "addonConfigs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: { name: "Dictionary", value: { type: { name: "any" } } }
                            }
                        }
                    }
                }
            }
        }
    }
};
const ResourceRequests = {
    type: {
        name: "Composite",
        className: "ResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentInstance = {
    type: {
        name: "Composite",
        className: "DeploymentInstance",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            reason: {
                serializedName: "reason",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            discoveryStatus: {
                serializedName: "discoveryStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            zone: {
                serializedName: "zone",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentResourceCollection = {
    type: {
        name: "Composite",
        className: "DeploymentResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeploymentResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LogFileUrlResponse = {
    type: {
        name: "Composite",
        className: "LogFileUrlResponse",
        modelProperties: {
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DiagnosticParameters = {
    type: {
        name: "Composite",
        className: "DiagnosticParameters",
        modelProperties: {
            appInstance: {
                serializedName: "appInstance",
                type: {
                    name: "String"
                }
            },
            filePath: {
                serializedName: "filePath",
                type: {
                    name: "String"
                }
            },
            duration: {
                serializedName: "duration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceResourceList = {
    type: {
        name: "Composite",
        className: "ServiceResourceList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AvailableOperations = {
    type: {
        name: "Composite",
        className: "AvailableOperations",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationDetail"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDetail = {
    type: {
        name: "Composite",
        className: "OperationDetail",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "OperationProperties"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationProperties = {
    type: {
        name: "Composite",
        className: "OperationProperties",
        modelProperties: {
            serviceSpecification: {
                serializedName: "serviceSpecification",
                type: {
                    name: "Composite",
                    className: "ServiceSpecification"
                }
            }
        }
    }
};
const ServiceSpecification = {
    type: {
        name: "Composite",
        className: "ServiceSpecification",
        modelProperties: {
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LogSpecification"
                        }
                    }
                }
            },
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricSpecification"
                        }
                    }
                }
            }
        }
    }
};
const LogSpecification = {
    type: {
        name: "Composite",
        className: "LogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetricSpecification = {
    type: {
        name: "Composite",
        className: "MetricSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            category: {
                serializedName: "category",
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            supportedAggregationTypes: {
                serializedName: "supportedAggregationTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            supportedTimeGrainTypes: {
                serializedName: "supportedTimeGrainTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            fillGapWithZero: {
                serializedName: "fillGapWithZero",
                type: {
                    name: "Boolean"
                }
            },
            dimensions: {
                serializedName: "dimensions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricDimension"
                        }
                    }
                }
            },
            sourceMdmNamespace: {
                serializedName: "sourceMdmNamespace",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetricDimension = {
    type: {
        name: "Composite",
        className: "MetricDimension",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            toBeExportedForShoebox: {
                serializedName: "toBeExportedForShoebox",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const AvailableRuntimeVersions = {
    type: {
        name: "Composite",
        className: "AvailableRuntimeVersions",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SupportedRuntimeVersion"
                        }
                    }
                }
            }
        }
    }
};
const SupportedRuntimeVersion = {
    type: {
        name: "Composite",
        className: "SupportedRuntimeVersion",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            platform: {
                serializedName: "platform",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceSkuCollection = {
    type: {
        name: "Composite",
        className: "ResourceSkuCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSku"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceSku = {
    type: {
        name: "Composite",
        className: "ResourceSku",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Composite",
                    className: "SkuCapacity"
                }
            },
            locations: {
                serializedName: "locations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            locationInfo: {
                serializedName: "locationInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuLocationInfo"
                        }
                    }
                }
            },
            restrictions: {
                serializedName: "restrictions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuRestrictions"
                        }
                    }
                }
            }
        }
    }
};
const SkuCapacity = {
    type: {
        name: "Composite",
        className: "SkuCapacity",
        modelProperties: {
            minimum: {
                serializedName: "minimum",
                required: true,
                type: {
                    name: "Number"
                }
            },
            maximum: {
                serializedName: "maximum",
                type: {
                    name: "Number"
                }
            },
            default: {
                serializedName: "default",
                type: {
                    name: "Number"
                }
            },
            scaleType: {
                serializedName: "scaleType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceSkuLocationInfo = {
    type: {
        name: "Composite",
        className: "ResourceSkuLocationInfo",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            zoneDetails: {
                serializedName: "zoneDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuZoneDetails"
                        }
                    }
                }
            }
        }
    }
};
const ResourceSkuZoneDetails = {
    type: {
        name: "Composite",
        className: "ResourceSkuZoneDetails",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            capabilities: {
                serializedName: "capabilities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuCapabilities"
                        }
                    }
                }
            }
        }
    }
};
const ResourceSkuCapabilities = {
    type: {
        name: "Composite",
        className: "ResourceSkuCapabilities",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceSkuRestrictions = {
    type: {
        name: "Composite",
        className: "ResourceSkuRestrictions",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            restrictionInfo: {
                serializedName: "restrictionInfo",
                type: {
                    name: "Composite",
                    className: "ResourceSkuRestrictionInfo"
                }
            },
            reasonCode: {
                serializedName: "reasonCode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceSkuRestrictionInfo = {
    type: {
        name: "Composite",
        className: "ResourceSkuRestrictionInfo",
        modelProperties: {
            locations: {
                serializedName: "locations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const KeyVaultCertificateProperties = {
    serializedName: "KeyVaultCertificate",
    type: {
        name: "Composite",
        className: "KeyVaultCertificateProperties",
        uberParent: "CertificateProperties",
        polymorphicDiscriminator: CertificateProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CertificateProperties.type.modelProperties), { vaultUri: {
                serializedName: "vaultUri",
                required: true,
                type: {
                    name: "String"
                }
            }, keyVaultCertName: {
                serializedName: "keyVaultCertName",
                required: true,
                type: {
                    name: "String"
                }
            }, certVersion: {
                serializedName: "certVersion",
                type: {
                    name: "String"
                }
            }, excludePrivateKey: {
                defaultValue: false,
                serializedName: "excludePrivateKey",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const ContentCertificateProperties = {
    serializedName: "ContentCertificate",
    type: {
        name: "Composite",
        className: "ContentCertificateProperties",
        uberParent: "CertificateProperties",
        polymorphicDiscriminator: CertificateProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CertificateProperties.type.modelProperties), { content: {
                serializedName: "content",
                type: {
                    name: "String"
                }
            } })
    }
};
const UploadedUserSourceInfo = {
    serializedName: "UploadedUserSourceInfo",
    type: {
        name: "Composite",
        className: "UploadedUserSourceInfo",
        uberParent: "UserSourceInfo",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: Object.assign(Object.assign({}, UserSourceInfo.type.modelProperties), { relativePath: {
                serializedName: "relativePath",
                type: {
                    name: "String"
                }
            } })
    }
};
const BuildResultUserSourceInfo = {
    serializedName: "BuildResult",
    type: {
        name: "Composite",
        className: "BuildResultUserSourceInfo",
        uberParent: "UserSourceInfo",
        polymorphicDiscriminator: UserSourceInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UserSourceInfo.type.modelProperties), { buildResultId: {
                serializedName: "buildResultId",
                type: {
                    name: "String"
                }
            } })
    }
};
const ServiceResource = {
    type: {
        name: "Composite",
        className: "ServiceResource",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ClusterResourceProperties"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
const ConfigServerResource = {
    type: {
        name: "Composite",
        className: "ConfigServerResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ConfigServerProperties"
                }
            } })
    }
};
const ConfigurationServiceResource = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ConfigurationServiceProperties"
                }
            } })
    }
};
const ServiceRegistryResource = {
    type: {
        name: "Composite",
        className: "ServiceRegistryResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ServiceRegistryProperties"
                }
            } })
    }
};
const BuildService = {
    type: {
        name: "Composite",
        className: "BuildService",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BuildServiceProperties"
                }
            } })
    }
};
const Build = {
    type: {
        name: "Composite",
        className: "Build",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BuildProperties"
                }
            } })
    }
};
const BuildpackBindingResource = {
    type: {
        name: "Composite",
        className: "BuildpackBindingResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BuildpackBindingProperties"
                }
            } })
    }
};
const BuildResult = {
    type: {
        name: "Composite",
        className: "BuildResult",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BuildResultProperties"
                }
            } })
    }
};
const BuilderResource = {
    type: {
        name: "Composite",
        className: "BuilderResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BuilderProperties"
                }
            } })
    }
};
const SupportedBuildpackResource = {
    type: {
        name: "Composite",
        className: "SupportedBuildpackResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SupportedBuildpackResourceProperties"
                }
            } })
    }
};
const SupportedStackResource = {
    type: {
        name: "Composite",
        className: "SupportedStackResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SupportedStackResourceProperties"
                }
            } })
    }
};
const BuildServiceAgentPoolResource = {
    type: {
        name: "Composite",
        className: "BuildServiceAgentPoolResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BuildServiceAgentPoolProperties"
                }
            } })
    }
};
const MonitoringSettingResource = {
    type: {
        name: "Composite",
        className: "MonitoringSettingResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MonitoringSettingProperties"
                }
            } })
    }
};
const AppResource = {
    type: {
        name: "Composite",
        className: "AppResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AppResourceProperties"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ManagedIdentityProperties"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            } })
    }
};
const BindingResource = {
    type: {
        name: "Composite",
        className: "BindingResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BindingResourceProperties"
                }
            } })
    }
};
const CertificateResource = {
    type: {
        name: "Composite",
        className: "CertificateResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CertificateProperties"
                }
            } })
    }
};
const CustomDomainResource = {
    type: {
        name: "Composite",
        className: "CustomDomainResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CustomDomainProperties"
                }
            } })
    }
};
const DeploymentResource = {
    type: {
        name: "Composite",
        className: "DeploymentResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DeploymentResourceProperties"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
const JarUploadedUserSourceInfo = {
    serializedName: "Jar",
    type: {
        name: "Composite",
        className: "JarUploadedUserSourceInfo",
        uberParent: "UserSourceInfo",
        polymorphicDiscriminator: UserSourceInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UploadedUserSourceInfo.type.modelProperties), { runtimeVersion: {
                serializedName: "runtimeVersion",
                type: {
                    name: "String"
                }
            }, jvmOptions: {
                serializedName: "jvmOptions",
                type: {
                    name: "String"
                }
            } })
    }
};
const SourceUploadedUserSourceInfo = {
    serializedName: "Source",
    type: {
        name: "Composite",
        className: "SourceUploadedUserSourceInfo",
        uberParent: "UserSourceInfo",
        polymorphicDiscriminator: UserSourceInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UploadedUserSourceInfo.type.modelProperties), { artifactSelector: {
                serializedName: "artifactSelector",
                type: {
                    name: "String"
                }
            }, runtimeVersion: {
                serializedName: "runtimeVersion",
                type: {
                    name: "String"
                }
            } })
    }
};
const NetCoreZipUploadedUserSourceInfo = {
    serializedName: "NetCoreZip",
    type: {
        name: "Composite",
        className: "NetCoreZipUploadedUserSourceInfo",
        uberParent: "UserSourceInfo",
        polymorphicDiscriminator: UserSourceInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UploadedUserSourceInfo.type.modelProperties), { netCoreMainEntryPath: {
                serializedName: "netCoreMainEntryPath",
                type: {
                    name: "String"
                }
            }, runtimeVersion: {
                serializedName: "runtimeVersion",
                type: {
                    name: "String"
                }
            } })
    }
};
let discriminators = {
    CertificateProperties: CertificateProperties,
    UserSourceInfo: UserSourceInfo,
    "CertificateProperties.KeyVaultCertificate": KeyVaultCertificateProperties,
    "CertificateProperties.ContentCertificate": ContentCertificateProperties,
    "UserSourceInfo.UploadedUserSourceInfo": UploadedUserSourceInfo,
    "UserSourceInfo.BuildResult": BuildResultUserSourceInfo,
    "UserSourceInfo.Jar": JarUploadedUserSourceInfo,
    "UserSourceInfo.Source": SourceUploadedUserSourceInfo,
    "UserSourceInfo.NetCoreZip": NetCoreZipUploadedUserSourceInfo
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ClusterResourceProperties: ClusterResourceProperties,
    NetworkProfile: NetworkProfile,
    NetworkProfileOutboundIPs: NetworkProfileOutboundIPs,
    RequiredTraffic: RequiredTraffic,
    Sku: Sku,
    Resource: Resource,
    SystemData: SystemData,
    CloudError: CloudError,
    CloudErrorBody: CloudErrorBody,
    TestKeys: TestKeys,
    RegenerateTestKeyRequestPayload: RegenerateTestKeyRequestPayload,
    ConfigServerProperties: ConfigServerProperties,
    ErrorModel: ErrorModel,
    ConfigServerSettings: ConfigServerSettings,
    ConfigServerGitProperty: ConfigServerGitProperty,
    GitPatternRepository: GitPatternRepository,
    ConfigServerSettingsValidateResult: ConfigServerSettingsValidateResult,
    ConfigServerSettingsErrorRecord: ConfigServerSettingsErrorRecord,
    ConfigurationServiceProperties: ConfigurationServiceProperties,
    ConfigurationServiceResourceRequests: ConfigurationServiceResourceRequests,
    ConfigurationServiceInstance: ConfigurationServiceInstance,
    ConfigurationServiceSettings: ConfigurationServiceSettings,
    ConfigurationServiceGitProperty: ConfigurationServiceGitProperty,
    ConfigurationServiceGitRepository: ConfigurationServiceGitRepository,
    ConfigurationServiceResourceCollection: ConfigurationServiceResourceCollection,
    ConfigurationServiceSettingsValidateResult: ConfigurationServiceSettingsValidateResult,
    ConfigurationServiceGitPropertyValidateResult: ConfigurationServiceGitPropertyValidateResult,
    ValidationMessages: ValidationMessages,
    ServiceRegistryProperties: ServiceRegistryProperties,
    ServiceRegistryResourceRequests: ServiceRegistryResourceRequests,
    ServiceRegistryInstance: ServiceRegistryInstance,
    ServiceRegistryResourceCollection: ServiceRegistryResourceCollection,
    BuildServiceCollection: BuildServiceCollection,
    BuildServiceProperties: BuildServiceProperties,
    BuildServicePropertiesResourceRequests: BuildServicePropertiesResourceRequests,
    BuildCollection: BuildCollection,
    BuildProperties: BuildProperties,
    TriggeredBuildResult: TriggeredBuildResult,
    BuildpackBindingProperties: BuildpackBindingProperties,
    BuildpackBindingLaunchProperties: BuildpackBindingLaunchProperties,
    BuildpackBindingResourceCollection: BuildpackBindingResourceCollection,
    BuildResultCollection: BuildResultCollection,
    BuildResultProperties: BuildResultProperties,
    BuildStageProperties: BuildStageProperties,
    BuildResultLog: BuildResultLog,
    BuilderProperties: BuilderProperties,
    StackProperties: StackProperties,
    BuildpacksGroupProperties: BuildpacksGroupProperties,
    BuildpackProperties: BuildpackProperties,
    BuilderResourceCollection: BuilderResourceCollection,
    ResourceUploadDefinition: ResourceUploadDefinition,
    SupportedBuildpacksCollection: SupportedBuildpacksCollection,
    SupportedBuildpackResourceProperties: SupportedBuildpackResourceProperties,
    SupportedStacksCollection: SupportedStacksCollection,
    SupportedStackResourceProperties: SupportedStackResourceProperties,
    BuildServiceAgentPoolResourceCollection: BuildServiceAgentPoolResourceCollection,
    BuildServiceAgentPoolProperties: BuildServiceAgentPoolProperties,
    BuildServiceAgentPoolSizeProperties: BuildServiceAgentPoolSizeProperties,
    MonitoringSettingProperties: MonitoringSettingProperties,
    ApplicationInsightsAgentVersions: ApplicationInsightsAgentVersions,
    AppResourceProperties: AppResourceProperties,
    TemporaryDisk: TemporaryDisk,
    PersistentDisk: PersistentDisk,
    LoadedCertificate: LoadedCertificate,
    ManagedIdentityProperties: ManagedIdentityProperties,
    AppResourceCollection: AppResourceCollection,
    ActiveDeploymentCollection: ActiveDeploymentCollection,
    BindingResourceProperties: BindingResourceProperties,
    BindingResourceCollection: BindingResourceCollection,
    CertificateProperties: CertificateProperties,
    CertificateResourceCollection: CertificateResourceCollection,
    NameAvailabilityParameters: NameAvailabilityParameters,
    NameAvailability: NameAvailability,
    CustomDomainProperties: CustomDomainProperties,
    CustomDomainResourceCollection: CustomDomainResourceCollection,
    CustomDomainValidatePayload: CustomDomainValidatePayload,
    CustomDomainValidateResult: CustomDomainValidateResult,
    DeploymentResourceProperties: DeploymentResourceProperties,
    UserSourceInfo: UserSourceInfo,
    DeploymentSettings: DeploymentSettings,
    ResourceRequests: ResourceRequests,
    DeploymentInstance: DeploymentInstance,
    DeploymentResourceCollection: DeploymentResourceCollection,
    LogFileUrlResponse: LogFileUrlResponse,
    DiagnosticParameters: DiagnosticParameters,
    ServiceResourceList: ServiceResourceList,
    AvailableOperations: AvailableOperations,
    OperationDetail: OperationDetail,
    OperationDisplay: OperationDisplay,
    OperationProperties: OperationProperties,
    ServiceSpecification: ServiceSpecification,
    LogSpecification: LogSpecification,
    MetricSpecification: MetricSpecification,
    MetricDimension: MetricDimension,
    AvailableRuntimeVersions: AvailableRuntimeVersions,
    SupportedRuntimeVersion: SupportedRuntimeVersion,
    ResourceSkuCollection: ResourceSkuCollection,
    ResourceSku: ResourceSku,
    SkuCapacity: SkuCapacity,
    ResourceSkuLocationInfo: ResourceSkuLocationInfo,
    ResourceSkuZoneDetails: ResourceSkuZoneDetails,
    ResourceSkuCapabilities: ResourceSkuCapabilities,
    ResourceSkuRestrictions: ResourceSkuRestrictions,
    ResourceSkuRestrictionInfo: ResourceSkuRestrictionInfo,
    TrackedResource: TrackedResource,
    ProxyResource: ProxyResource,
    KeyVaultCertificateProperties: KeyVaultCertificateProperties,
    ContentCertificateProperties: ContentCertificateProperties,
    UploadedUserSourceInfo: UploadedUserSourceInfo,
    BuildResultUserSourceInfo: BuildResultUserSourceInfo,
    ServiceResource: ServiceResource,
    ConfigServerResource: ConfigServerResource,
    ConfigurationServiceResource: ConfigurationServiceResource,
    ServiceRegistryResource: ServiceRegistryResource,
    BuildService: BuildService,
    Build: Build,
    BuildpackBindingResource: BuildpackBindingResource,
    BuildResult: BuildResult,
    BuilderResource: BuilderResource,
    SupportedBuildpackResource: SupportedBuildpackResource,
    SupportedStackResource: SupportedStackResource,
    BuildServiceAgentPoolResource: BuildServiceAgentPoolResource,
    MonitoringSettingResource: MonitoringSettingResource,
    AppResource: AppResource,
    BindingResource: BindingResource,
    CertificateResource: CertificateResource,
    CustomDomainResource: CustomDomainResource,
    DeploymentResource: DeploymentResource,
    JarUploadedUserSourceInfo: JarUploadedUserSourceInfo,
    SourceUploadedUserSourceInfo: SourceUploadedUserSourceInfo,
    NetCoreZipUploadedUserSourceInfo: NetCoreZipUploadedUserSourceInfo,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const serviceName = {
    parameterPath: "serviceName",
    mapper: {
        serializedName: "serviceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const resource = {
    parameterPath: "resource",
    mapper: ServiceResource
};
const regenerateTestKeyRequest = {
    parameterPath: "regenerateTestKeyRequest",
    mapper: RegenerateTestKeyRequestPayload
};
const availabilityParameters = {
    parameterPath: "availabilityParameters",
    mapper: NameAvailabilityParameters
};
const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const configServerResource = {
    parameterPath: "configServerResource",
    mapper: ConfigServerResource
};
const configServerSettings = {
    parameterPath: "configServerSettings",
    mapper: ConfigServerSettings
};
const configurationServiceName = {
    parameterPath: "configurationServiceName",
    mapper: {
        serializedName: "configurationServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const configurationServiceResource = {
    parameterPath: "configurationServiceResource",
    mapper: ConfigurationServiceResource
};
const settings = {
    parameterPath: "settings",
    mapper: ConfigurationServiceSettings
};
const serviceRegistryName = {
    parameterPath: "serviceRegistryName",
    mapper: {
        serializedName: "serviceRegistryName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const buildServiceName = {
    parameterPath: "buildServiceName",
    mapper: {
        serializedName: "buildServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const buildName = {
    parameterPath: "buildName",
    mapper: {
        serializedName: "buildName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const build = {
    parameterPath: "build",
    mapper: Build
};
const buildResultName = {
    parameterPath: "buildResultName",
    mapper: {
        serializedName: "buildResultName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const buildpackName = {
    parameterPath: "buildpackName",
    mapper: {
        serializedName: "buildpackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const stackName = {
    parameterPath: "stackName",
    mapper: {
        serializedName: "stackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const builderName = {
    parameterPath: "builderName",
    mapper: {
        serializedName: "builderName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const buildpackBindingName = {
    parameterPath: "buildpackBindingName",
    mapper: {
        serializedName: "buildpackBindingName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const buildpackBinding = {
    parameterPath: "buildpackBinding",
    mapper: BuildpackBindingResource
};
const builderResource = {
    parameterPath: "builderResource",
    mapper: BuilderResource
};
const agentPoolName = {
    parameterPath: "agentPoolName",
    mapper: {
        serializedName: "agentPoolName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const agentPoolResource = {
    parameterPath: "agentPoolResource",
    mapper: BuildServiceAgentPoolResource
};
const monitoringSettingResource = {
    parameterPath: "monitoringSettingResource",
    mapper: MonitoringSettingResource
};
const appName = {
    parameterPath: "appName",
    mapper: {
        serializedName: "appName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const syncStatus = {
    parameterPath: ["options", "syncStatus"],
    mapper: {
        serializedName: "syncStatus",
        type: {
            name: "String"
        }
    }
};
const appResource = {
    parameterPath: "appResource",
    mapper: AppResource
};
const activeDeploymentCollection = {
    parameterPath: "activeDeploymentCollection",
    mapper: ActiveDeploymentCollection
};
const validatePayload = {
    parameterPath: "validatePayload",
    mapper: CustomDomainValidatePayload
};
const bindingName = {
    parameterPath: "bindingName",
    mapper: {
        serializedName: "bindingName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const bindingResource = {
    parameterPath: "bindingResource",
    mapper: BindingResource
};
const certificateName = {
    parameterPath: "certificateName",
    mapper: {
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const certificateResource = {
    parameterPath: "certificateResource",
    mapper: CertificateResource
};
const domainName = {
    parameterPath: "domainName",
    mapper: {
        serializedName: "domainName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const domainResource = {
    parameterPath: "domainResource",
    mapper: CustomDomainResource
};
const deploymentName = {
    parameterPath: "deploymentName",
    mapper: {
        serializedName: "deploymentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const deploymentResource = {
    parameterPath: "deploymentResource",
    mapper: DeploymentResource
};
const version = {
    parameterPath: ["options", "version"],
    mapper: {
        serializedName: "version",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: "Multi"
};
const diagnosticParameters = {
    parameterPath: "diagnosticParameters",
    mapper: DiagnosticParameters
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Services operations. */
class ServicesImpl {
    /**
     * Initialize a new instance of the class Services class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBySubscriptionPagingPage(options);
            }
        };
    }
    listBySubscriptionPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result = yield tslib.__await(this._listBySubscription(options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param options The options parameters.
     */
    list(resourceGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get a Service and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, getOperationSpec$c);
    }
    /**
     * Create a new Service or update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, resource, options }, createOrUpdateOperationSpec$9);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new Service or update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, resource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, options }, deleteOperationSpec$9);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serviceName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, resource, options }, updateOperationSpec$4);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serviceName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serviceName, resource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List test keys for a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    listTestKeys(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listTestKeysOperationSpec);
    }
    /**
     * Regenerate a test key for a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param regenerateTestKeyRequest Parameters for the operation
     * @param options The options parameters.
     */
    regenerateTestKey(resourceGroupName, serviceName, regenerateTestKeyRequest, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, regenerateTestKeyRequest, options }, regenerateTestKeyOperationSpec);
    }
    /**
     * Disable test endpoint functionality for a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    disableTestEndpoint(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, disableTestEndpointOperationSpec);
    }
    /**
     * Enable test endpoint functionality for a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    enableTestEndpoint(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, enableTestEndpointOperationSpec);
    }
    /**
     * Checks that the resource name is valid and is not already in use.
     * @param location the region
     * @param availabilityParameters Parameters supplied to the operation.
     * @param options The options parameters.
     */
    checkNameAvailability(location, availabilityParameters, options) {
        return this.client.sendOperationRequest({ location, availabilityParameters, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param options The options parameters.
     */
    _list(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec$c);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listNextOperationSpec$c);
    }
}
// Operation Specifications
const serializer$g = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const createOrUpdateOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ServiceResource
        },
        201: {
            bodyMapper: ServiceResource
        },
        202: {
            bodyMapper: ServiceResource
        },
        204: {
            bodyMapper: ServiceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: resource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const deleteOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const updateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ServiceResource
        },
        201: {
            bodyMapper: ServiceResource
        },
        202: {
            bodyMapper: ServiceResource
        },
        204: {
            bodyMapper: ServiceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: resource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const listTestKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/listTestKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TestKeys
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const regenerateTestKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/regenerateTestKey",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TestKeys
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: regenerateTestKeyRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const disableTestEndpointOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/disableTestEndpoint",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const enableTestEndpointOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/enableTestEndpoint",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TestKeys
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/locations/{location}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: NameAvailability
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: availabilityParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/Spring",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$g
};
const listOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const listNextOperationSpec$c = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$g
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ConfigServers operations. */
class ConfigServersImpl {
    /**
     * Initialize a new instance of the class ConfigServers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the config server and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, getOperationSpec$b);
    }
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePut(resourceGroupName, serviceName, configServerResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, configServerResource, options }, updatePutOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePutAndWait(resourceGroupName, serviceName, configServerResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdatePut(resourceGroupName, serviceName, configServerResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePatch(resourceGroupName, serviceName, configServerResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, configServerResource, options }, updatePatchOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePatchAndWait(resourceGroupName, serviceName, configServerResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdatePatch(resourceGroupName, serviceName, configServerResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Check if the config server settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerSettings Config server settings to be validated
     * @param options The options parameters.
     */
    beginValidate(resourceGroupName, serviceName, configServerSettings, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, configServerSettings, options }, validateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Check if the config server settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerSettings Config server settings to be validated
     * @param options The options parameters.
     */
    beginValidateAndWait(resourceGroupName, serviceName, configServerSettings, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginValidate(resourceGroupName, serviceName, configServerSettings, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$f = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigServerResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const updatePutOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConfigServerResource
        },
        201: {
            bodyMapper: ConfigServerResource
        },
        202: {
            bodyMapper: ConfigServerResource
        },
        204: {
            bodyMapper: ConfigServerResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: configServerResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};
const updatePatchOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ConfigServerResource
        },
        201: {
            bodyMapper: ConfigServerResource
        },
        202: {
            bodyMapper: ConfigServerResource
        },
        204: {
            bodyMapper: ConfigServerResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: configServerResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};
const validateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/validate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ConfigServerSettingsValidateResult
        },
        201: {
            bodyMapper: ConfigServerSettingsValidateResult
        },
        202: {
            bodyMapper: ConfigServerSettingsValidateResult
        },
        204: {
            bodyMapper: ConfigServerSettingsValidateResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: configServerSettings,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigurationServices operations. */
class ConfigurationServicesImpl {
    /**
     * Initialize a new instance of the class ConfigurationServices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, serviceName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the Application Configuration Service and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, configurationServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, configurationServiceName, options }, getOperationSpec$a);
    }
    /**
     * Create the default Application Configuration Service or update the existing Application
     * Configuration Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param configurationServiceResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, configurationServiceName, configurationServiceResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                configurationServiceName,
                configurationServiceResource,
                options
            }, createOrUpdateOperationSpec$8);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create the default Application Configuration Service or update the existing Application
     * Configuration Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param configurationServiceResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, configurationServiceName, configurationServiceResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, configurationServiceName, configurationServiceResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Disable the default Application Configuration Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, configurationServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, configurationServiceName, options }, deleteOperationSpec$8);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Disable the default Application Configuration Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, configurationServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, configurationServiceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$b);
    }
    /**
     * Check if the Application Configuration Service settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param settings Application Configuration Service settings to be validated
     * @param options The options parameters.
     */
    beginValidate(resourceGroupName, serviceName, configurationServiceName, settings, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                configurationServiceName,
                settings,
                options
            }, validateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Check if the Application Configuration Service settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param settings Application Configuration Service settings to be validated
     * @param options The options parameters.
     */
    beginValidateAndWait(resourceGroupName, serviceName, configurationServiceName, settings, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginValidate(resourceGroupName, serviceName, configurationServiceName, settings, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$b);
    }
}
// Operation Specifications
const serializer$e = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configurationServices/{configurationServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationServiceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        configurationServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const createOrUpdateOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configurationServices/{configurationServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConfigurationServiceResource
        },
        201: {
            bodyMapper: ConfigurationServiceResource
        },
        202: {
            bodyMapper: ConfigurationServiceResource
        },
        204: {
            bodyMapper: ConfigurationServiceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: configurationServiceResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        configurationServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e
};
const deleteOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configurationServices/{configurationServiceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        configurationServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const listOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configurationServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationServiceResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const validateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configurationServices/{configurationServiceName}/validate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ConfigurationServiceSettingsValidateResult
        },
        201: {
            bodyMapper: ConfigurationServiceSettingsValidateResult
        },
        202: {
            bodyMapper: ConfigurationServiceSettingsValidateResult
        },
        204: {
            bodyMapper: ConfigurationServiceSettingsValidateResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: settings,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        configurationServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e
};
const listNextOperationSpec$b = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationServiceResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$e
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ServiceRegistries operations. */
class ServiceRegistriesImpl {
    /**
     * Initialize a new instance of the class ServiceRegistries class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, serviceName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the Service Registry and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, serviceRegistryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, serviceRegistryName, options }, getOperationSpec$9);
    }
    /**
     * Create the default Service Registry or update the existing Service Registry.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, serviceRegistryName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, serviceRegistryName, options }, createOrUpdateOperationSpec$7);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create the default Service Registry or update the existing Service Registry.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, serviceRegistryName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, serviceRegistryName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Disable the default Service Registry.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, serviceRegistryName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, serviceRegistryName, options }, deleteOperationSpec$7);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Disable the default Service Registry.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, serviceRegistryName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, serviceRegistryName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$a);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$a);
    }
}
// Operation Specifications
const serializer$d = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/serviceRegistries/{serviceRegistryName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceRegistryResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        serviceRegistryName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const createOrUpdateOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/serviceRegistries/{serviceRegistryName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ServiceRegistryResource
        },
        201: {
            bodyMapper: ServiceRegistryResource
        },
        202: {
            bodyMapper: ServiceRegistryResource
        },
        204: {
            bodyMapper: ServiceRegistryResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        serviceRegistryName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const deleteOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/serviceRegistries/{serviceRegistryName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        serviceRegistryName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const listOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/serviceRegistries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceRegistryResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const listNextOperationSpec$a = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceRegistryResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$d
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BuildServiceOperations operations. */
class BuildServiceOperationsImpl {
    /**
     * Initialize a new instance of the class BuildServiceOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List build services resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    listBuildServices(resourceGroupName, serviceName, options) {
        const iter = this.listBuildServicesPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBuildServicesPagingPage(resourceGroupName, serviceName, options);
            }
        };
    }
    listBuildServicesPagingPage(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBuildServicesPagingPage_1() {
            let result = yield tslib.__await(this._listBuildServices(resourceGroupName, serviceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listBuildServicesNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listBuildServicesPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBuildServicesPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBuildServicesPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List KPack builds.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    listBuilds(resourceGroupName, serviceName, buildServiceName, options) {
        const iter = this.listBuildsPagingAll(resourceGroupName, serviceName, buildServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBuildsPagingPage(resourceGroupName, serviceName, buildServiceName, options);
            }
        };
    }
    listBuildsPagingPage(resourceGroupName, serviceName, buildServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBuildsPagingPage_1() {
            let result = yield tslib.__await(this._listBuilds(resourceGroupName, serviceName, buildServiceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listBuildsNext(resourceGroupName, serviceName, buildServiceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listBuildsPagingAll(resourceGroupName, serviceName, buildServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBuildsPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBuildsPagingPage(resourceGroupName, serviceName, buildServiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List KPack build results.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    listBuildResults(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        const iter = this.listBuildResultsPagingAll(resourceGroupName, serviceName, buildServiceName, buildName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBuildResultsPagingPage(resourceGroupName, serviceName, buildServiceName, buildName, options);
            }
        };
    }
    listBuildResultsPagingPage(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBuildResultsPagingPage_1() {
            let result = yield tslib.__await(this._listBuildResults(resourceGroupName, serviceName, buildServiceName, buildName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listBuildResultsNext(resourceGroupName, serviceName, buildServiceName, buildName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listBuildResultsPagingAll(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBuildResultsPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBuildResultsPagingPage(resourceGroupName, serviceName, buildServiceName, buildName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * List build services resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _listBuildServices(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listBuildServicesOperationSpec);
    }
    /**
     * Get a build service resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    getBuildService(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, getBuildServiceOperationSpec);
    }
    /**
     * List KPack builds.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    _listBuilds(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listBuildsOperationSpec);
    }
    /**
     * Get a KPack build.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    getBuild(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, buildName, options }, getBuildOperationSpec);
    }
    /**
     * Create or update a KPack build.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param build Parameters for the create or update operation
     * @param options The options parameters.
     */
    createOrUpdateBuild(resourceGroupName, serviceName, buildServiceName, buildName, build, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildName,
            build,
            options
        }, createOrUpdateBuildOperationSpec);
    }
    /**
     * List KPack build results.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    _listBuildResults(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, buildName, options }, listBuildResultsOperationSpec);
    }
    /**
     * Get a KPack build result.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param buildResultName The name of the build result resource.
     * @param options The options parameters.
     */
    getBuildResult(resourceGroupName, serviceName, buildServiceName, buildName, buildResultName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildName,
            buildResultName,
            options
        }, getBuildResultOperationSpec);
    }
    /**
     * Get a KPack build result log download URL.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param buildResultName The name of the build result resource.
     * @param options The options parameters.
     */
    getBuildResultLog(resourceGroupName, serviceName, buildServiceName, buildName, buildResultName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildName,
            buildResultName,
            options
        }, getBuildResultLogOperationSpec);
    }
    /**
     * Get an resource upload URL for build service, which may be artifacts or source archive.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    getResourceUploadUrl(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, getResourceUploadUrlOperationSpec$1);
    }
    /**
     * Get all supported buildpacks.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    listSupportedBuildpacks(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listSupportedBuildpacksOperationSpec);
    }
    /**
     * Get the supported buildpack resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildpackName The name of the buildpack resource.
     * @param options The options parameters.
     */
    getSupportedBuildpack(resourceGroupName, serviceName, buildServiceName, buildpackName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildpackName,
            options
        }, getSupportedBuildpackOperationSpec);
    }
    /**
     * Get all supported stacks.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    listSupportedStacks(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listSupportedStacksOperationSpec);
    }
    /**
     * Get the supported stack resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param stackName The name of the stack resource.
     * @param options The options parameters.
     */
    getSupportedStack(resourceGroupName, serviceName, buildServiceName, stackName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, stackName, options }, getSupportedStackOperationSpec);
    }
    /**
     * ListBuildServicesNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the ListBuildServices method.
     * @param options The options parameters.
     */
    _listBuildServicesNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listBuildServicesNextOperationSpec);
    }
    /**
     * ListBuildsNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param nextLink The nextLink from the previous successful call to the ListBuilds method.
     * @param options The options parameters.
     */
    _listBuildsNext(resourceGroupName, serviceName, buildServiceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, nextLink, options }, listBuildsNextOperationSpec);
    }
    /**
     * ListBuildResultsNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param nextLink The nextLink from the previous successful call to the ListBuildResults method.
     * @param options The options parameters.
     */
    _listBuildResultsNext(resourceGroupName, serviceName, buildServiceName, buildName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildName,
            nextLink,
            options
        }, listBuildResultsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBuildServicesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildServiceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const getBuildServiceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildService
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listBuildsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const getBuildOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Build
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const createOrUpdateBuildOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Build
        },
        201: {
            bodyMapper: Build
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: build,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const listBuildResultsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}/results",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildResultCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const getBuildResultOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}/results/{buildResultName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName,
        buildResultName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const getBuildResultLogOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}/results/{buildResultName}/getLogFileUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: BuildResultLog
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName,
        buildResultName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const getResourceUploadUrlOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/getResourceUploadUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResourceUploadDefinition
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listSupportedBuildpacksOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedBuildpacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SupportedBuildpacksCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const getSupportedBuildpackOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedBuildpacks/{buildpackName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SupportedBuildpackResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildpackName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listSupportedStacksOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedStacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SupportedStacksCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const getSupportedStackOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedStacks/{stackName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SupportedStackResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        stackName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listBuildServicesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildServiceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listBuildsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listBuildResultsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildResultCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        buildServiceName,
        buildName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BuildpackBinding operations. */
class BuildpackBindingImpl {
    /**
     * Initialize a new instance of the class BuildpackBinding class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all buildpack bindings in a builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, buildServiceName, builderName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, serviceName, buildServiceName, builderName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, serviceName, buildServiceName, builderName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, buildServiceName, builderName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, buildServiceName, builderName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a buildpack binding by name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            builderName,
            buildpackBindingName,
            options
        }, getOperationSpec$8);
    }
    /**
     * Create or update a buildpack binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param buildpackBinding The target buildpack binding for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, buildpackBinding, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                buildServiceName,
                builderName,
                buildpackBindingName,
                buildpackBinding,
                options
            }, createOrUpdateOperationSpec$6);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a buildpack binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param buildpackBinding The target buildpack binding for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, buildpackBinding, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, buildpackBinding, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete a Buildpack Binding
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                buildServiceName,
                builderName,
                buildpackBindingName,
                options
            }, deleteOperationSpec$6);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete a Buildpack Binding
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all buildpack bindings in a builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            builderName,
            options
        }, listOperationSpec$9);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, buildServiceName, builderName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            builderName,
            nextLink,
            options
        }, listNextOperationSpec$9);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}/buildpackBindings/{buildpackBindingName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildpackBindingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName,
        buildpackBindingName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const createOrUpdateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}/buildpackBindings/{buildpackBindingName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BuildpackBindingResource
        },
        201: {
            bodyMapper: BuildpackBindingResource
        },
        202: {
            bodyMapper: BuildpackBindingResource
        },
        204: {
            bodyMapper: BuildpackBindingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: buildpackBinding,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName,
        buildpackBindingName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}/buildpackBindings/{buildpackBindingName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName,
        buildpackBindingName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}/buildpackBindings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildpackBindingResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listNextOperationSpec$9 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildpackBindingResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        buildServiceName,
        builderName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BuildServiceBuilder operations. */
class BuildServiceBuilderImpl {
    /**
     * Initialize a new instance of the class BuildServiceBuilder class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List KPack builders result.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, buildServiceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, buildServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, serviceName, buildServiceName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, buildServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, serviceName, buildServiceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, buildServiceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, buildServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, buildServiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            builderName,
            options
        }, getOperationSpec$7);
    }
    /**
     * Create or update a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param builderResource The target builder for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, buildServiceName, builderName, builderResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                buildServiceName,
                builderName,
                builderResource,
                options
            }, createOrUpdateOperationSpec$5);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param builderResource The target builder for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, buildServiceName, builderName, builderResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, buildServiceName, builderName, builderResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                buildServiceName,
                builderName,
                options
            }, deleteOperationSpec$5);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, buildServiceName, builderName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List KPack builders result.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listOperationSpec$8);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, buildServiceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, nextLink, options }, listNextOperationSpec$8);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuilderResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const createOrUpdateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BuilderResource
        },
        201: {
            bodyMapper: BuilderResource
        },
        202: {
            bodyMapper: BuilderResource
        },
        204: {
            bodyMapper: BuilderResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: builderResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuilderResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listNextOperationSpec$8 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuilderResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BuildServiceAgentPool operations. */
class BuildServiceAgentPoolImpl {
    /**
     * Initialize a new instance of the class BuildServiceAgentPool class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, buildServiceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, buildServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, serviceName, buildServiceName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, buildServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, serviceName, buildServiceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, buildServiceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, buildServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, buildServiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listOperationSpec$7);
    }
    /**
     * Get build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param agentPoolName The name of the build service agent pool resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, buildServiceName, agentPoolName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            agentPoolName,
            options
        }, getOperationSpec$6);
    }
    /**
     * Create or update build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param agentPoolName The name of the build service agent pool resource.
     * @param agentPoolResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePut(resourceGroupName, serviceName, buildServiceName, agentPoolName, agentPoolResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                buildServiceName,
                agentPoolName,
                agentPoolResource,
                options
            }, updatePutOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param agentPoolName The name of the build service agent pool resource.
     * @param agentPoolResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePutAndWait(resourceGroupName, serviceName, buildServiceName, agentPoolName, agentPoolResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdatePut(resourceGroupName, serviceName, buildServiceName, agentPoolName, agentPoolResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, buildServiceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, nextLink, options }, listNextOperationSpec$7);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/agentPools",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildServiceAgentPoolResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/agentPools/{agentPoolName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildServiceAgentPoolResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        agentPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const updatePutOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/agentPools/{agentPoolName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BuildServiceAgentPoolResource
        },
        201: {
            bodyMapper: BuildServiceAgentPoolResource
        },
        202: {
            bodyMapper: BuildServiceAgentPoolResource
        },
        204: {
            bodyMapper: BuildServiceAgentPoolResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: agentPoolResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        agentPoolName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const listNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildServiceAgentPoolResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing MonitoringSettings operations. */
class MonitoringSettingsImpl {
    /**
     * Initialize a new instance of the class MonitoringSettings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the Monitoring Setting and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, getOperationSpec$5);
    }
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePut(resourceGroupName, serviceName, monitoringSettingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, monitoringSettingResource, options }, updatePutOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePutAndWait(resourceGroupName, serviceName, monitoringSettingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdatePut(resourceGroupName, serviceName, monitoringSettingResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePatch(resourceGroupName, serviceName, monitoringSettingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, monitoringSettingResource, options }, updatePatchOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePatchAndWait(resourceGroupName, serviceName, monitoringSettingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdatePatch(resourceGroupName, serviceName, monitoringSettingResource, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/monitoringSettings/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitoringSettingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const updatePutOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/monitoringSettings/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: MonitoringSettingResource
        },
        201: {
            bodyMapper: MonitoringSettingResource
        },
        202: {
            bodyMapper: MonitoringSettingResource
        },
        204: {
            bodyMapper: MonitoringSettingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: monitoringSettingResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const updatePatchOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/monitoringSettings/default",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: MonitoringSettingResource
        },
        201: {
            bodyMapper: MonitoringSettingResource
        },
        202: {
            bodyMapper: MonitoringSettingResource
        },
        204: {
            bodyMapper: MonitoringSettingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: monitoringSettingResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Apps operations. */
class AppsImpl {
    /**
     * Initialize a new instance of the class Apps class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, serviceName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get an App and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, appName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, options }, getOperationSpec$4);
    }
    /**
     * Create a new App or update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, appName, appResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, appName, appResource, options }, createOrUpdateOperationSpec$4);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new App or update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, appName, appResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, appName, appResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, appName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, appName, options }, deleteOperationSpec$4);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, appName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, appName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serviceName, appName, appResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, appName, appResource, options }, updateOperationSpec$3);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serviceName, appName, appResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serviceName, appName, appResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$6);
    }
    /**
     * Get an resource upload URL for an App, which may be artifacts or source archive.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    getResourceUploadUrl(resourceGroupName, serviceName, appName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, options }, getResourceUploadUrlOperationSpec);
    }
    /**
     * Set existing Deployment under the app as active
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param activeDeploymentCollection A list of Deployment name to be active.
     * @param options The options parameters.
     */
    beginSetActiveDeployments(resourceGroupName, serviceName, appName, activeDeploymentCollection, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                appName,
                activeDeploymentCollection,
                options
            }, setActiveDeploymentsOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Set existing Deployment under the app as active
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param activeDeploymentCollection A list of Deployment name to be active.
     * @param options The options parameters.
     */
    beginSetActiveDeploymentsAndWait(resourceGroupName, serviceName, appName, activeDeploymentCollection, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginSetActiveDeployments(resourceGroupName, serviceName, appName, activeDeploymentCollection, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Check the resource name is valid as well as not in use.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param validatePayload Custom domain payload to be validated
     * @param options The options parameters.
     */
    validateDomain(resourceGroupName, serviceName, appName, validatePayload, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, validatePayload, options }, validateDomainOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$6);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AppResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, syncStatus],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOrUpdateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AppResource
        },
        201: {
            bodyMapper: AppResource
        },
        202: {
            bodyMapper: AppResource
        },
        204: {
            bodyMapper: AppResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: appResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const updateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: AppResource
        },
        201: {
            bodyMapper: AppResource
        },
        202: {
            bodyMapper: AppResource
        },
        204: {
            bodyMapper: AppResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: appResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const listOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AppResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const getResourceUploadUrlOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/getResourceUploadUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResourceUploadDefinition
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const setActiveDeploymentsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/setActiveDeployments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AppResource
        },
        201: {
            bodyMapper: AppResource
        },
        202: {
            bodyMapper: AppResource
        },
        204: {
            bodyMapper: AppResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: activeDeploymentCollection,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const validateDomainOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/validateDomain",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CustomDomainValidateResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: validatePayload,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const listNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AppResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Bindings operations. */
class BindingsImpl {
    /**
     * Initialize a new instance of the class Bindings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, appName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, appName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, serviceName, appName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, appName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, serviceName, appName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, appName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, appName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, appName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a Binding and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, appName, bindingName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, bindingName, options }, getOperationSpec$3);
    }
    /**
     * Create a new Binding or update an exiting Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param bindingResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, appName, bindingName, bindingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                appName,
                bindingName,
                bindingResource,
                options
            }, createOrUpdateOperationSpec$3);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new Binding or update an exiting Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param bindingResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, appName, bindingName, bindingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, appName, bindingName, bindingResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete a Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, appName, bindingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, appName, bindingName, options }, deleteOperationSpec$3);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete a Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, appName, bindingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, appName, bindingName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an exiting Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param bindingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serviceName, appName, bindingName, bindingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                appName,
                bindingName,
                bindingResource,
                options
            }, updateOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an exiting Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param bindingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serviceName, appName, bindingName, bindingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serviceName, appName, bindingName, bindingResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, appName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, options }, listOperationSpec$5);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, appName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, nextLink, options }, listNextOperationSpec$5);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BindingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        bindingName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BindingResource
        },
        201: {
            bodyMapper: BindingResource
        },
        202: {
            bodyMapper: BindingResource
        },
        204: {
            bodyMapper: BindingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: bindingResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        bindingName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        bindingName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: BindingResource
        },
        201: {
            bodyMapper: BindingResource
        },
        202: {
            bodyMapper: BindingResource
        },
        204: {
            bodyMapper: BindingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: bindingResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        bindingName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BindingResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BindingResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Certificates operations. */
class CertificatesImpl {
    /**
     * Initialize a new instance of the class Certificates class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the certificates of one user.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, serviceName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, certificateName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, certificateName, options }, getOperationSpec$2);
    }
    /**
     * Create or update certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, certificateName, certificateResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                certificateName,
                certificateResource,
                options
            }, createOrUpdateOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, certificateName, certificateResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, certificateName, certificateResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, certificateName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, certificateName, options }, deleteOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, certificateName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, certificateName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all the certificates of one user.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$4);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CertificateResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        certificateName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CertificateResource
        },
        201: {
            bodyMapper: CertificateResource
        },
        202: {
            bodyMapper: CertificateResource
        },
        204: {
            bodyMapper: CertificateResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: certificateResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        certificateName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        certificateName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CertificateResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CertificateResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing CustomDomains operations. */
class CustomDomainsImpl {
    /**
     * Initialize a new instance of the class CustomDomains class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List the custom domains of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, appName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, appName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, serviceName, appName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, appName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, serviceName, appName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, appName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, appName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, appName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, appName, domainName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, domainName, options }, getOperationSpec$1);
    }
    /**
     * Create or update custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param domainResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, appName, domainName, domainResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                appName,
                domainName,
                domainResource,
                options
            }, createOrUpdateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param domainResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, appName, domainName, domainResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, appName, domainName, domainResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, appName, domainName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, appName, domainName, options }, deleteOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, appName, domainName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, appName, domainName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param domainResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serviceName, appName, domainName, domainResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                appName,
                domainName,
                domainResource,
                options
            }, updateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param domainResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serviceName, appName, domainName, domainResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serviceName, appName, domainName, domainResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List the custom domains of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, appName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, options }, listOperationSpec$3);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, appName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomDomainResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        domainName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CustomDomainResource
        },
        201: {
            bodyMapper: CustomDomainResource
        },
        202: {
            bodyMapper: CustomDomainResource
        },
        204: {
            bodyMapper: CustomDomainResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: domainResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        domainName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        domainName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: CustomDomainResource
        },
        201: {
            bodyMapper: CustomDomainResource
        },
        202: {
            bodyMapper: CustomDomainResource
        },
        204: {
            bodyMapper: CustomDomainResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: domainResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        domainName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomDomainResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomDomainResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Deployments operations. */
class DeploymentsImpl {
    /**
     * Initialize a new instance of the class Deployments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, appName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, appName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, serviceName, appName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, appName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, serviceName, appName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, appName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, appName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, appName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List deployments for a certain service
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    listForCluster(resourceGroupName, serviceName, options) {
        const iter = this.listForClusterPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listForClusterPagingPage(resourceGroupName, serviceName, options);
            }
        };
    }
    listForClusterPagingPage(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForClusterPagingPage_1() {
            let result = yield tslib.__await(this._listForCluster(resourceGroupName, serviceName, options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listForClusterNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listForClusterPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForClusterPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listForClusterPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get a Deployment and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, appName, deploymentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, deploymentName, options }, getOperationSpec);
    }
    /**
     * Create a new Deployment or update an exiting Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param deploymentResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                appName,
                deploymentName,
                deploymentResource,
                options
            }, createOrUpdateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new Deployment or update an exiting Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param deploymentResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete a Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, appName, deploymentName, options }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete a Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, appName, deploymentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an exiting Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param deploymentResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                appName,
                deploymentName,
                deploymentResource,
                options
            }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an exiting Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param deploymentResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, appName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, options }, listOperationSpec$2);
    }
    /**
     * List deployments for a certain service
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _listForCluster(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listForClusterOperationSpec);
    }
    /**
     * Start the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, appName, deploymentName, options }, startOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Start the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStart(resourceGroupName, serviceName, appName, deploymentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Stop the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, appName, deploymentName, options }, stopOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Stop the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStop(resourceGroupName, serviceName, appName, deploymentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Restart the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, serviceName, appName, deploymentName, options }, restartOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Restart the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRestart(resourceGroupName, serviceName, appName, deploymentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get deployment log file URL
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    getLogFileUrl(resourceGroupName, serviceName, appName, deploymentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, deploymentName, options }, getLogFileUrlOperationSpec);
    }
    /**
     * Generate Heap Dump
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginGenerateHeapDump(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                appName,
                deploymentName,
                diagnosticParameters,
                options
            }, generateHeapDumpOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Generate Heap Dump
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginGenerateHeapDumpAndWait(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginGenerateHeapDump(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Generate Thread Dump
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginGenerateThreadDump(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                appName,
                deploymentName,
                diagnosticParameters,
                options
            }, generateThreadDumpOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Generate Thread Dump
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginGenerateThreadDumpAndWait(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginGenerateThreadDump(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Start JFR
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginStartJFR(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                serviceName,
                appName,
                deploymentName,
                diagnosticParameters,
                options
            }, startJFROperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Start JFR
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginStartJFRAndWait(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStartJFR(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, appName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, nextLink, options }, listNextOperationSpec$2);
    }
    /**
     * ListForClusterNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the ListForCluster method.
     * @param options The options parameters.
     */
    _listForClusterNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listForClusterNextOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DeploymentResource
        },
        201: {
            bodyMapper: DeploymentResource
        },
        202: {
            bodyMapper: DeploymentResource
        },
        204: {
            bodyMapper: DeploymentResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: deploymentResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: DeploymentResource
        },
        201: {
            bodyMapper: DeploymentResource
        },
        202: {
            bodyMapper: DeploymentResource
        },
        204: {
            bodyMapper: DeploymentResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: deploymentResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, version],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listForClusterOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/deployments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, version],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const startOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const stopOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const restartOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/restart",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getLogFileUrlOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/getLogFileUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: LogFileUrlResponse
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const generateHeapDumpOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/generateHeapDump",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: diagnosticParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const generateThreadDumpOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/generateThreadDump",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: diagnosticParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const startJFROperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/startJFR",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: diagnosticParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, version],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listForClusterNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, version],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available REST API operations of the Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(options);
            }
        };
    }
    listPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available REST API operations of the Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.AppPlatform/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailableOperations
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailableOperations
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing RuntimeVersions operations. */
class RuntimeVersionsImpl {
    /**
     * Initialize a new instance of the class RuntimeVersions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available runtime versions supported by Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    listRuntimeVersions(options) {
        return this.client.sendOperationRequest({ options }, listRuntimeVersionsOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listRuntimeVersionsOperationSpec = {
    path: "/providers/Microsoft.AppPlatform/runtimeVersions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailableRuntimeVersions
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Skus operations. */
class SkusImpl {
    /**
     * Initialize a new instance of the class Skus class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available skus of the Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(options);
            }
        };
    }
    listPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib.__await(result.value || []);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available skus of the Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceSkuCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceSkuCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AppPlatformManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AppPlatformManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Gets subscription ID which uniquely identify the Microsoft Azure subscription.
     *                       The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-appplatform/2.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
        }
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
            if (!bearerTokenAuthenticationPolicyFound) {
                this.pipeline.removePolicy({
                    name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
                });
                this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                    scopes: `${optionsWithDefaults.baseUri}/.default`,
                    challengeCallbacks: {
                        authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                    }
                }));
            }
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-04-01";
        this.services = new ServicesImpl(this);
        this.configServers = new ConfigServersImpl(this);
        this.configurationServices = new ConfigurationServicesImpl(this);
        this.serviceRegistries = new ServiceRegistriesImpl(this);
        this.buildServiceOperations = new BuildServiceOperationsImpl(this);
        this.buildpackBinding = new BuildpackBindingImpl(this);
        this.buildServiceBuilder = new BuildServiceBuilderImpl(this);
        this.buildServiceAgentPool = new BuildServiceAgentPoolImpl(this);
        this.monitoringSettings = new MonitoringSettingsImpl(this);
        this.apps = new AppsImpl(this);
        this.bindings = new BindingsImpl(this);
        this.certificates = new CertificatesImpl(this);
        this.customDomains = new CustomDomainsImpl(this);
        this.deployments = new DeploymentsImpl(this);
        this.operations = new OperationsImpl(this);
        this.runtimeVersions = new RuntimeVersionsImpl(this);
        this.skus = new SkusImpl(this);
    }
}

exports.AppPlatformManagementClient = AppPlatformManagementClient;
//# sourceMappingURL=index.js.map
