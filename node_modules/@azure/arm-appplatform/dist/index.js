'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
    /** Starting */
    KnownProvisioningState["Starting"] = "Starting";
    /** Stopping */
    KnownProvisioningState["Stopping"] = "Stopping";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Deleted */
    KnownProvisioningState["Deleted"] = "Deleted";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Moving */
    KnownProvisioningState["Moving"] = "Moving";
    /** Moved */
    KnownProvisioningState["Moved"] = "Moved";
    /** MoveFailed */
    KnownProvisioningState["MoveFailed"] = "MoveFailed";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link TrafficDirection} that the service accepts. */
exports.KnownTrafficDirection = void 0;
(function (KnownTrafficDirection) {
    /** Inbound */
    KnownTrafficDirection["Inbound"] = "Inbound";
    /** Outbound */
    KnownTrafficDirection["Outbound"] = "Outbound";
})(exports.KnownTrafficDirection || (exports.KnownTrafficDirection = {}));
/** Known values of {@link PowerState} that the service accepts. */
exports.KnownPowerState = void 0;
(function (KnownPowerState) {
    /** Running */
    KnownPowerState["Running"] = "Running";
    /** Stopped */
    KnownPowerState["Stopped"] = "Stopped";
})(exports.KnownPowerState || (exports.KnownPowerState = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link LastModifiedByType} that the service accepts. */
exports.KnownLastModifiedByType = void 0;
(function (KnownLastModifiedByType) {
    /** User */
    KnownLastModifiedByType["User"] = "User";
    /** Application */
    KnownLastModifiedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownLastModifiedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownLastModifiedByType["Key"] = "Key";
})(exports.KnownLastModifiedByType || (exports.KnownLastModifiedByType = {}));
/** Known values of {@link TestKeyType} that the service accepts. */
exports.KnownTestKeyType = void 0;
(function (KnownTestKeyType) {
    /** Primary */
    KnownTestKeyType["Primary"] = "Primary";
    /** Secondary */
    KnownTestKeyType["Secondary"] = "Secondary";
})(exports.KnownTestKeyType || (exports.KnownTestKeyType = {}));
/** Known values of {@link ConfigServerState} that the service accepts. */
exports.KnownConfigServerState = void 0;
(function (KnownConfigServerState) {
    /** NotAvailable */
    KnownConfigServerState["NotAvailable"] = "NotAvailable";
    /** Deleted */
    KnownConfigServerState["Deleted"] = "Deleted";
    /** Failed */
    KnownConfigServerState["Failed"] = "Failed";
    /** Succeeded */
    KnownConfigServerState["Succeeded"] = "Succeeded";
    /** Updating */
    KnownConfigServerState["Updating"] = "Updating";
})(exports.KnownConfigServerState || (exports.KnownConfigServerState = {}));
/** Known values of {@link ConfigurationServiceProvisioningState} that the service accepts. */
exports.KnownConfigurationServiceProvisioningState = void 0;
(function (KnownConfigurationServiceProvisioningState) {
    /** Creating */
    KnownConfigurationServiceProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownConfigurationServiceProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownConfigurationServiceProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownConfigurationServiceProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownConfigurationServiceProvisioningState["Deleting"] = "Deleting";
})(exports.KnownConfigurationServiceProvisioningState || (exports.KnownConfigurationServiceProvisioningState = {}));
/** Known values of {@link ServiceRegistryProvisioningState} that the service accepts. */
exports.KnownServiceRegistryProvisioningState = void 0;
(function (KnownServiceRegistryProvisioningState) {
    /** Creating */
    KnownServiceRegistryProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownServiceRegistryProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownServiceRegistryProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownServiceRegistryProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownServiceRegistryProvisioningState["Deleting"] = "Deleting";
})(exports.KnownServiceRegistryProvisioningState || (exports.KnownServiceRegistryProvisioningState = {}));
/** Known values of {@link ApplicationLiveViewProvisioningState} that the service accepts. */
exports.KnownApplicationLiveViewProvisioningState = void 0;
(function (KnownApplicationLiveViewProvisioningState) {
    /** Creating */
    KnownApplicationLiveViewProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownApplicationLiveViewProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownApplicationLiveViewProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownApplicationLiveViewProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownApplicationLiveViewProvisioningState["Deleting"] = "Deleting";
    /** Canceled */
    KnownApplicationLiveViewProvisioningState["Canceled"] = "Canceled";
})(exports.KnownApplicationLiveViewProvisioningState || (exports.KnownApplicationLiveViewProvisioningState = {}));
/** Known values of {@link DevToolPortalProvisioningState} that the service accepts. */
exports.KnownDevToolPortalProvisioningState = void 0;
(function (KnownDevToolPortalProvisioningState) {
    /** Creating */
    KnownDevToolPortalProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownDevToolPortalProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownDevToolPortalProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownDevToolPortalProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownDevToolPortalProvisioningState["Deleting"] = "Deleting";
    /** Canceled */
    KnownDevToolPortalProvisioningState["Canceled"] = "Canceled";
})(exports.KnownDevToolPortalProvisioningState || (exports.KnownDevToolPortalProvisioningState = {}));
/** Known values of {@link DevToolPortalFeatureState} that the service accepts. */
exports.KnownDevToolPortalFeatureState = void 0;
(function (KnownDevToolPortalFeatureState) {
    /** Enable the plugin in Dev Tool Portal. */
    KnownDevToolPortalFeatureState["Enabled"] = "Enabled";
    /** Disable the plugin in Dev Tool Portal. */
    KnownDevToolPortalFeatureState["Disabled"] = "Disabled";
})(exports.KnownDevToolPortalFeatureState || (exports.KnownDevToolPortalFeatureState = {}));
/** Known values of {@link ContainerRegistryProvisioningState} that the service accepts. */
exports.KnownContainerRegistryProvisioningState = void 0;
(function (KnownContainerRegistryProvisioningState) {
    /** Creating */
    KnownContainerRegistryProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownContainerRegistryProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownContainerRegistryProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownContainerRegistryProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownContainerRegistryProvisioningState["Canceled"] = "Canceled";
})(exports.KnownContainerRegistryProvisioningState || (exports.KnownContainerRegistryProvisioningState = {}));
/** Known values of {@link BuildServiceProvisioningState} that the service accepts. */
exports.KnownBuildServiceProvisioningState = void 0;
(function (KnownBuildServiceProvisioningState) {
    /** Creating */
    KnownBuildServiceProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownBuildServiceProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownBuildServiceProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownBuildServiceProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownBuildServiceProvisioningState["Deleting"] = "Deleting";
})(exports.KnownBuildServiceProvisioningState || (exports.KnownBuildServiceProvisioningState = {}));
/** Known values of {@link BuildProvisioningState} that the service accepts. */
exports.KnownBuildProvisioningState = void 0;
(function (KnownBuildProvisioningState) {
    /** Creating */
    KnownBuildProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownBuildProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownBuildProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownBuildProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownBuildProvisioningState["Deleting"] = "Deleting";
})(exports.KnownBuildProvisioningState || (exports.KnownBuildProvisioningState = {}));
/** Known values of {@link BindingType} that the service accepts. */
exports.KnownBindingType = void 0;
(function (KnownBindingType) {
    /** ApplicationInsights */
    KnownBindingType["ApplicationInsights"] = "ApplicationInsights";
    /** ApacheSkyWalking */
    KnownBindingType["ApacheSkyWalking"] = "ApacheSkyWalking";
    /** AppDynamics */
    KnownBindingType["AppDynamics"] = "AppDynamics";
    /** Dynatrace */
    KnownBindingType["Dynatrace"] = "Dynatrace";
    /** NewRelic */
    KnownBindingType["NewRelic"] = "NewRelic";
    /** ElasticAPM */
    KnownBindingType["ElasticAPM"] = "ElasticAPM";
    /** CACertificates */
    KnownBindingType["CACertificates"] = "CACertificates";
})(exports.KnownBindingType || (exports.KnownBindingType = {}));
/** Known values of {@link BuildpackBindingProvisioningState} that the service accepts. */
exports.KnownBuildpackBindingProvisioningState = void 0;
(function (KnownBuildpackBindingProvisioningState) {
    /** Creating */
    KnownBuildpackBindingProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownBuildpackBindingProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownBuildpackBindingProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownBuildpackBindingProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownBuildpackBindingProvisioningState["Deleting"] = "Deleting";
})(exports.KnownBuildpackBindingProvisioningState || (exports.KnownBuildpackBindingProvisioningState = {}));
/** Known values of {@link BuildResultProvisioningState} that the service accepts. */
exports.KnownBuildResultProvisioningState = void 0;
(function (KnownBuildResultProvisioningState) {
    /** Queuing */
    KnownBuildResultProvisioningState["Queuing"] = "Queuing";
    /** Building */
    KnownBuildResultProvisioningState["Building"] = "Building";
    /** Succeeded */
    KnownBuildResultProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownBuildResultProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownBuildResultProvisioningState["Deleting"] = "Deleting";
})(exports.KnownBuildResultProvisioningState || (exports.KnownBuildResultProvisioningState = {}));
/** Known values of {@link KPackBuildStageProvisioningState} that the service accepts. */
exports.KnownKPackBuildStageProvisioningState = void 0;
(function (KnownKPackBuildStageProvisioningState) {
    /** NotStarted */
    KnownKPackBuildStageProvisioningState["NotStarted"] = "NotStarted";
    /** Running */
    KnownKPackBuildStageProvisioningState["Running"] = "Running";
    /** Succeeded */
    KnownKPackBuildStageProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownKPackBuildStageProvisioningState["Failed"] = "Failed";
})(exports.KnownKPackBuildStageProvisioningState || (exports.KnownKPackBuildStageProvisioningState = {}));
/** Known values of {@link BuilderProvisioningState} that the service accepts. */
exports.KnownBuilderProvisioningState = void 0;
(function (KnownBuilderProvisioningState) {
    /** Creating */
    KnownBuilderProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownBuilderProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownBuilderProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownBuilderProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownBuilderProvisioningState["Deleting"] = "Deleting";
})(exports.KnownBuilderProvisioningState || (exports.KnownBuilderProvisioningState = {}));
/** Known values of {@link MonitoringSettingState} that the service accepts. */
exports.KnownMonitoringSettingState = void 0;
(function (KnownMonitoringSettingState) {
    /** NotAvailable */
    KnownMonitoringSettingState["NotAvailable"] = "NotAvailable";
    /** Failed */
    KnownMonitoringSettingState["Failed"] = "Failed";
    /** Succeeded */
    KnownMonitoringSettingState["Succeeded"] = "Succeeded";
    /** Updating */
    KnownMonitoringSettingState["Updating"] = "Updating";
})(exports.KnownMonitoringSettingState || (exports.KnownMonitoringSettingState = {}));
/** Known values of {@link AppResourceProvisioningState} that the service accepts. */
exports.KnownAppResourceProvisioningState = void 0;
(function (KnownAppResourceProvisioningState) {
    /** Succeeded */
    KnownAppResourceProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownAppResourceProvisioningState["Failed"] = "Failed";
    /** Creating */
    KnownAppResourceProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownAppResourceProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownAppResourceProvisioningState["Deleting"] = "Deleting";
})(exports.KnownAppResourceProvisioningState || (exports.KnownAppResourceProvisioningState = {}));
/** Known values of {@link Type} that the service accepts. */
exports.KnownType = void 0;
(function (KnownType) {
    /** AzureFileVolume */
    KnownType["AzureFileVolume"] = "AzureFileVolume";
})(exports.KnownType || (exports.KnownType = {}));
/** Known values of {@link SessionAffinity} that the service accepts. */
exports.KnownSessionAffinity = void 0;
(function (KnownSessionAffinity) {
    /** Cookie */
    KnownSessionAffinity["Cookie"] = "Cookie";
    /** None */
    KnownSessionAffinity["None"] = "None";
})(exports.KnownSessionAffinity || (exports.KnownSessionAffinity = {}));
/** Known values of {@link BackendProtocol} that the service accepts. */
exports.KnownBackendProtocol = void 0;
(function (KnownBackendProtocol) {
    /** Grpc */
    KnownBackendProtocol["Grpc"] = "GRPC";
    /** Default */
    KnownBackendProtocol["Default"] = "Default";
})(exports.KnownBackendProtocol || (exports.KnownBackendProtocol = {}));
/** Known values of {@link ManagedIdentityType} that the service accepts. */
exports.KnownManagedIdentityType = void 0;
(function (KnownManagedIdentityType) {
    /** None */
    KnownManagedIdentityType["None"] = "None";
    /** SystemAssigned */
    KnownManagedIdentityType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownManagedIdentityType["UserAssigned"] = "UserAssigned";
    /** SystemAssignedUserAssigned */
    KnownManagedIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned,UserAssigned";
})(exports.KnownManagedIdentityType || (exports.KnownManagedIdentityType = {}));
/** Known values of {@link StorageType} that the service accepts. */
exports.KnownStorageType = void 0;
(function (KnownStorageType) {
    /** StorageAccount */
    KnownStorageType["StorageAccount"] = "StorageAccount";
})(exports.KnownStorageType || (exports.KnownStorageType = {}));
/** Known values of {@link CertificateResourceProvisioningState} that the service accepts. */
exports.KnownCertificateResourceProvisioningState = void 0;
(function (KnownCertificateResourceProvisioningState) {
    /** Creating */
    KnownCertificateResourceProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownCertificateResourceProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownCertificateResourceProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownCertificateResourceProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownCertificateResourceProvisioningState["Deleting"] = "Deleting";
})(exports.KnownCertificateResourceProvisioningState || (exports.KnownCertificateResourceProvisioningState = {}));
/** Known values of {@link CustomDomainResourceProvisioningState} that the service accepts. */
exports.KnownCustomDomainResourceProvisioningState = void 0;
(function (KnownCustomDomainResourceProvisioningState) {
    /** Creating */
    KnownCustomDomainResourceProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownCustomDomainResourceProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownCustomDomainResourceProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownCustomDomainResourceProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownCustomDomainResourceProvisioningState["Deleting"] = "Deleting";
})(exports.KnownCustomDomainResourceProvisioningState || (exports.KnownCustomDomainResourceProvisioningState = {}));
/** Known values of {@link ProbeActionType} that the service accepts. */
exports.KnownProbeActionType = void 0;
(function (KnownProbeActionType) {
    /** HttpGetAction */
    KnownProbeActionType["HttpGetAction"] = "HTTPGetAction";
    /** TCPSocketAction */
    KnownProbeActionType["TCPSocketAction"] = "TCPSocketAction";
    /** ExecAction */
    KnownProbeActionType["ExecAction"] = "ExecAction";
})(exports.KnownProbeActionType || (exports.KnownProbeActionType = {}));
/** Known values of {@link DeploymentResourceProvisioningState} that the service accepts. */
exports.KnownDeploymentResourceProvisioningState = void 0;
(function (KnownDeploymentResourceProvisioningState) {
    /** Creating */
    KnownDeploymentResourceProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownDeploymentResourceProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownDeploymentResourceProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownDeploymentResourceProvisioningState["Failed"] = "Failed";
})(exports.KnownDeploymentResourceProvisioningState || (exports.KnownDeploymentResourceProvisioningState = {}));
/** Known values of {@link DeploymentResourceStatus} that the service accepts. */
exports.KnownDeploymentResourceStatus = void 0;
(function (KnownDeploymentResourceStatus) {
    /** Stopped */
    KnownDeploymentResourceStatus["Stopped"] = "Stopped";
    /** Running */
    KnownDeploymentResourceStatus["Running"] = "Running";
})(exports.KnownDeploymentResourceStatus || (exports.KnownDeploymentResourceStatus = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link SupportedRuntimeValue} that the service accepts. */
exports.KnownSupportedRuntimeValue = void 0;
(function (KnownSupportedRuntimeValue) {
    /** Java8 */
    KnownSupportedRuntimeValue["Java8"] = "Java_8";
    /** Java11 */
    KnownSupportedRuntimeValue["Java11"] = "Java_11";
    /** Java17 */
    KnownSupportedRuntimeValue["Java17"] = "Java_17";
    /** NetCore31 */
    KnownSupportedRuntimeValue["NetCore31"] = "NetCore_31";
})(exports.KnownSupportedRuntimeValue || (exports.KnownSupportedRuntimeValue = {}));
/** Known values of {@link SupportedRuntimePlatform} that the service accepts. */
exports.KnownSupportedRuntimePlatform = void 0;
(function (KnownSupportedRuntimePlatform) {
    /** Java */
    KnownSupportedRuntimePlatform["Java"] = "Java";
    /** NETCore */
    KnownSupportedRuntimePlatform["NETCore"] = ".NET Core";
})(exports.KnownSupportedRuntimePlatform || (exports.KnownSupportedRuntimePlatform = {}));
/** Known values of {@link SkuScaleType} that the service accepts. */
exports.KnownSkuScaleType = void 0;
(function (KnownSkuScaleType) {
    /** None */
    KnownSkuScaleType["None"] = "None";
    /** Manual */
    KnownSkuScaleType["Manual"] = "Manual";
    /** Automatic */
    KnownSkuScaleType["Automatic"] = "Automatic";
})(exports.KnownSkuScaleType || (exports.KnownSkuScaleType = {}));
/** Known values of {@link ResourceSkuRestrictionsType} that the service accepts. */
exports.KnownResourceSkuRestrictionsType = void 0;
(function (KnownResourceSkuRestrictionsType) {
    /** Location */
    KnownResourceSkuRestrictionsType["Location"] = "Location";
    /** Zone */
    KnownResourceSkuRestrictionsType["Zone"] = "Zone";
})(exports.KnownResourceSkuRestrictionsType || (exports.KnownResourceSkuRestrictionsType = {}));
/** Known values of {@link ResourceSkuRestrictionsReasonCode} that the service accepts. */
exports.KnownResourceSkuRestrictionsReasonCode = void 0;
(function (KnownResourceSkuRestrictionsReasonCode) {
    /** QuotaId */
    KnownResourceSkuRestrictionsReasonCode["QuotaId"] = "QuotaId";
    /** NotAvailableForSubscription */
    KnownResourceSkuRestrictionsReasonCode["NotAvailableForSubscription"] = "NotAvailableForSubscription";
})(exports.KnownResourceSkuRestrictionsReasonCode || (exports.KnownResourceSkuRestrictionsReasonCode = {}));
/** Known values of {@link GatewayProvisioningState} that the service accepts. */
exports.KnownGatewayProvisioningState = void 0;
(function (KnownGatewayProvisioningState) {
    /** Creating */
    KnownGatewayProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownGatewayProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownGatewayProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownGatewayProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownGatewayProvisioningState["Deleting"] = "Deleting";
})(exports.KnownGatewayProvisioningState || (exports.KnownGatewayProvisioningState = {}));
/** Known values of {@link GatewayCertificateVerification} that the service accepts. */
exports.KnownGatewayCertificateVerification = void 0;
(function (KnownGatewayCertificateVerification) {
    /** Enable certificate verification in Spring Cloud Gateway. */
    KnownGatewayCertificateVerification["Enabled"] = "Enabled";
    /** Disable certificate verification in Spring Cloud Gateway. */
    KnownGatewayCertificateVerification["Disabled"] = "Disabled";
})(exports.KnownGatewayCertificateVerification || (exports.KnownGatewayCertificateVerification = {}));
/** Known values of {@link ApmType} that the service accepts. */
exports.KnownApmType = void 0;
(function (KnownApmType) {
    /** ApplicationInsights */
    KnownApmType["ApplicationInsights"] = "ApplicationInsights";
    /** AppDynamics */
    KnownApmType["AppDynamics"] = "AppDynamics";
    /** Dynatrace */
    KnownApmType["Dynatrace"] = "Dynatrace";
    /** NewRelic */
    KnownApmType["NewRelic"] = "NewRelic";
    /** ElasticAPM */
    KnownApmType["ElasticAPM"] = "ElasticAPM";
})(exports.KnownApmType || (exports.KnownApmType = {}));
/** Known values of {@link GatewayRouteConfigProtocol} that the service accepts. */
exports.KnownGatewayRouteConfigProtocol = void 0;
(function (KnownGatewayRouteConfigProtocol) {
    /** Http */
    KnownGatewayRouteConfigProtocol["Http"] = "HTTP";
    /** Https */
    KnownGatewayRouteConfigProtocol["Https"] = "HTTPS";
})(exports.KnownGatewayRouteConfigProtocol || (exports.KnownGatewayRouteConfigProtocol = {}));
/** Known values of {@link ApiPortalProvisioningState} that the service accepts. */
exports.KnownApiPortalProvisioningState = void 0;
(function (KnownApiPortalProvisioningState) {
    /** Creating */
    KnownApiPortalProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownApiPortalProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownApiPortalProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownApiPortalProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownApiPortalProvisioningState["Deleting"] = "Deleting";
})(exports.KnownApiPortalProvisioningState || (exports.KnownApiPortalProvisioningState = {}));
/** Known values of {@link ApplicationAcceleratorProvisioningState} that the service accepts. */
exports.KnownApplicationAcceleratorProvisioningState = void 0;
(function (KnownApplicationAcceleratorProvisioningState) {
    /** Creating */
    KnownApplicationAcceleratorProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownApplicationAcceleratorProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownApplicationAcceleratorProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownApplicationAcceleratorProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownApplicationAcceleratorProvisioningState["Deleting"] = "Deleting";
})(exports.KnownApplicationAcceleratorProvisioningState || (exports.KnownApplicationAcceleratorProvisioningState = {}));
/** Known values of {@link CustomizedAcceleratorProvisioningState} that the service accepts. */
exports.KnownCustomizedAcceleratorProvisioningState = void 0;
(function (KnownCustomizedAcceleratorProvisioningState) {
    /** Creating */
    KnownCustomizedAcceleratorProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownCustomizedAcceleratorProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownCustomizedAcceleratorProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownCustomizedAcceleratorProvisioningState["Failed"] = "Failed";
    /** Deleting */
    KnownCustomizedAcceleratorProvisioningState["Deleting"] = "Deleting";
})(exports.KnownCustomizedAcceleratorProvisioningState || (exports.KnownCustomizedAcceleratorProvisioningState = {}));
/** Known values of {@link CustomizedAcceleratorValidateResultState} that the service accepts. */
exports.KnownCustomizedAcceleratorValidateResultState = void 0;
(function (KnownCustomizedAcceleratorValidateResultState) {
    /** Customized accelerator properties are valid. */
    KnownCustomizedAcceleratorValidateResultState["Valid"] = "Valid";
    /** Customized accelerator properties are invalid. */
    KnownCustomizedAcceleratorValidateResultState["Invalid"] = "Invalid";
})(exports.KnownCustomizedAcceleratorValidateResultState || (exports.KnownCustomizedAcceleratorValidateResultState = {}));
/** Known values of {@link PredefinedAcceleratorProvisioningState} that the service accepts. */
exports.KnownPredefinedAcceleratorProvisioningState = void 0;
(function (KnownPredefinedAcceleratorProvisioningState) {
    /** Creating */
    KnownPredefinedAcceleratorProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownPredefinedAcceleratorProvisioningState["Updating"] = "Updating";
    /** Succeeded */
    KnownPredefinedAcceleratorProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownPredefinedAcceleratorProvisioningState["Failed"] = "Failed";
})(exports.KnownPredefinedAcceleratorProvisioningState || (exports.KnownPredefinedAcceleratorProvisioningState = {}));
/** Known values of {@link PredefinedAcceleratorState} that the service accepts. */
exports.KnownPredefinedAcceleratorState = void 0;
(function (KnownPredefinedAcceleratorState) {
    /** Enable the predefined accelerator. */
    KnownPredefinedAcceleratorState["Enabled"] = "Enabled";
    /** Disable the predefined accelerator. */
    KnownPredefinedAcceleratorState["Disabled"] = "Disabled";
})(exports.KnownPredefinedAcceleratorState || (exports.KnownPredefinedAcceleratorState = {}));
/** Known values of {@link HttpSchemeType} that the service accepts. */
exports.KnownHttpSchemeType = void 0;
(function (KnownHttpSchemeType) {
    /** Http */
    KnownHttpSchemeType["Http"] = "HTTP";
    /** Https */
    KnownHttpSchemeType["Https"] = "HTTPS";
})(exports.KnownHttpSchemeType || (exports.KnownHttpSchemeType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const ClusterResourceProperties = {
    type: {
        name: "Composite",
        className: "ClusterResourceProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            networkProfile: {
                serializedName: "networkProfile",
                type: {
                    name: "Composite",
                    className: "NetworkProfile"
                }
            },
            vnetAddons: {
                serializedName: "vnetAddons",
                type: {
                    name: "Composite",
                    className: "ServiceVNetAddons"
                }
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            serviceId: {
                serializedName: "serviceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            managedEnvironmentId: {
                serializedName: "managedEnvironmentId",
                type: {
                    name: "String"
                }
            },
            infraResourceGroup: {
                serializedName: "infraResourceGroup",
                type: {
                    name: "String"
                }
            },
            powerState: {
                serializedName: "powerState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            zoneRedundant: {
                defaultValue: false,
                serializedName: "zoneRedundant",
                type: {
                    name: "Boolean"
                }
            },
            fqdn: {
                serializedName: "fqdn",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            marketplaceResource: {
                serializedName: "marketplaceResource",
                type: {
                    name: "Composite",
                    className: "MarketplaceResource"
                }
            }
        }
    }
};
const NetworkProfile = {
    type: {
        name: "Composite",
        className: "NetworkProfile",
        modelProperties: {
            serviceRuntimeSubnetId: {
                serializedName: "serviceRuntimeSubnetId",
                type: {
                    name: "String"
                }
            },
            appSubnetId: {
                serializedName: "appSubnetId",
                type: {
                    name: "String"
                }
            },
            serviceCidr: {
                serializedName: "serviceCidr",
                type: {
                    name: "String"
                }
            },
            serviceRuntimeNetworkResourceGroup: {
                serializedName: "serviceRuntimeNetworkResourceGroup",
                type: {
                    name: "String"
                }
            },
            appNetworkResourceGroup: {
                serializedName: "appNetworkResourceGroup",
                type: {
                    name: "String"
                }
            },
            outboundIPs: {
                serializedName: "outboundIPs",
                type: {
                    name: "Composite",
                    className: "NetworkProfileOutboundIPs"
                }
            },
            requiredTraffics: {
                serializedName: "requiredTraffics",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RequiredTraffic"
                        }
                    }
                }
            },
            ingressConfig: {
                serializedName: "ingressConfig",
                type: {
                    name: "Composite",
                    className: "IngressConfig"
                }
            },
            outboundType: {
                serializedName: "outboundType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NetworkProfileOutboundIPs = {
    type: {
        name: "Composite",
        className: "NetworkProfileOutboundIPs",
        modelProperties: {
            publicIPs: {
                serializedName: "publicIPs",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const RequiredTraffic = {
    type: {
        name: "Composite",
        className: "RequiredTraffic",
        modelProperties: {
            protocol: {
                serializedName: "protocol",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            port: {
                serializedName: "port",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            ips: {
                serializedName: "ips",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            fqdns: {
                serializedName: "fqdns",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            direction: {
                serializedName: "direction",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IngressConfig = {
    type: {
        name: "Composite",
        className: "IngressConfig",
        modelProperties: {
            readTimeoutInSeconds: {
                serializedName: "readTimeoutInSeconds",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ServiceVNetAddons = {
    type: {
        name: "Composite",
        className: "ServiceVNetAddons",
        modelProperties: {
            logStreamPublicEndpoint: {
                defaultValue: false,
                serializedName: "logStreamPublicEndpoint",
                type: {
                    name: "Boolean"
                }
            },
            dataPlanePublicEndpoint: {
                defaultValue: false,
                serializedName: "dataPlanePublicEndpoint",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const MarketplaceResource = {
    type: {
        name: "Composite",
        className: "MarketplaceResource",
        modelProperties: {
            plan: {
                serializedName: "plan",
                type: {
                    name: "String"
                }
            },
            publisher: {
                serializedName: "publisher",
                type: {
                    name: "String"
                }
            },
            product: {
                serializedName: "product",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                defaultValue: "S0",
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            tier: {
                defaultValue: "Standard",
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudErrorBody"
                        }
                    }
                }
            }
        }
    }
};
const TestKeys = {
    type: {
        name: "Composite",
        className: "TestKeys",
        modelProperties: {
            primaryKey: {
                serializedName: "primaryKey",
                type: {
                    name: "String"
                }
            },
            secondaryKey: {
                serializedName: "secondaryKey",
                type: {
                    name: "String"
                }
            },
            primaryTestEndpoint: {
                serializedName: "primaryTestEndpoint",
                type: {
                    name: "String"
                }
            },
            secondaryTestEndpoint: {
                serializedName: "secondaryTestEndpoint",
                type: {
                    name: "String"
                }
            },
            enabled: {
                serializedName: "enabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const RegenerateTestKeyRequestPayload = {
    type: {
        name: "Composite",
        className: "RegenerateTestKeyRequestPayload",
        modelProperties: {
            keyType: {
                serializedName: "keyType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigServerProperties = {
    type: {
        name: "Composite",
        className: "ConfigServerProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            },
            configServer: {
                serializedName: "configServer",
                type: {
                    name: "Composite",
                    className: "ConfigServerSettings"
                }
            }
        }
    }
};
const ErrorModel = {
    type: {
        name: "Composite",
        className: "ErrorModel",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigServerSettings = {
    type: {
        name: "Composite",
        className: "ConfigServerSettings",
        modelProperties: {
            gitProperty: {
                serializedName: "gitProperty",
                type: {
                    name: "Composite",
                    className: "ConfigServerGitProperty"
                }
            }
        }
    }
};
const ConfigServerGitProperty = {
    type: {
        name: "Composite",
        className: "ConfigServerGitProperty",
        modelProperties: {
            repositories: {
                serializedName: "repositories",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GitPatternRepository"
                        }
                    }
                }
            },
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            searchPaths: {
                serializedName: "searchPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            },
            hostKey: {
                serializedName: "hostKey",
                type: {
                    name: "String"
                }
            },
            hostKeyAlgorithm: {
                serializedName: "hostKeyAlgorithm",
                type: {
                    name: "String"
                }
            },
            privateKey: {
                serializedName: "privateKey",
                type: {
                    name: "String"
                }
            },
            strictHostKeyChecking: {
                serializedName: "strictHostKeyChecking",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const GitPatternRepository = {
    type: {
        name: "Composite",
        className: "GitPatternRepository",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            pattern: {
                serializedName: "pattern",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            searchPaths: {
                serializedName: "searchPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            },
            hostKey: {
                serializedName: "hostKey",
                type: {
                    name: "String"
                }
            },
            hostKeyAlgorithm: {
                serializedName: "hostKeyAlgorithm",
                type: {
                    name: "String"
                }
            },
            privateKey: {
                serializedName: "privateKey",
                type: {
                    name: "String"
                }
            },
            strictHostKeyChecking: {
                serializedName: "strictHostKeyChecking",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ConfigServerSettingsValidateResult = {
    type: {
        name: "Composite",
        className: "ConfigServerSettingsValidateResult",
        modelProperties: {
            isValid: {
                serializedName: "isValid",
                type: {
                    name: "Boolean"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigServerSettingsErrorRecord"
                        }
                    }
                }
            }
        }
    }
};
const ConfigServerSettingsErrorRecord = {
    type: {
        name: "Composite",
        className: "ConfigServerSettingsErrorRecord",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            uri: {
                serializedName: "uri",
                type: {
                    name: "String"
                }
            },
            messages: {
                serializedName: "messages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ConfigurationServiceProperties = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "ConfigurationServiceResourceRequests"
                }
            },
            instances: {
                serializedName: "instances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigurationServiceInstance"
                        }
                    }
                }
            },
            settings: {
                serializedName: "settings",
                type: {
                    name: "Composite",
                    className: "ConfigurationServiceSettings"
                }
            }
        }
    }
};
const ConfigurationServiceResourceRequests = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            instanceCount: {
                serializedName: "instanceCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ConfigurationServiceInstance = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceInstance",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigurationServiceSettings = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceSettings",
        modelProperties: {
            gitProperty: {
                serializedName: "gitProperty",
                type: {
                    name: "Composite",
                    className: "ConfigurationServiceGitProperty"
                }
            }
        }
    }
};
const ConfigurationServiceGitProperty = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceGitProperty",
        modelProperties: {
            repositories: {
                serializedName: "repositories",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigurationServiceGitRepository"
                        }
                    }
                }
            }
        }
    }
};
const ConfigurationServiceGitRepository = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceGitRepository",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            patterns: {
                serializedName: "patterns",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            searchPaths: {
                serializedName: "searchPaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            },
            hostKey: {
                serializedName: "hostKey",
                type: {
                    name: "String"
                }
            },
            hostKeyAlgorithm: {
                serializedName: "hostKeyAlgorithm",
                type: {
                    name: "String"
                }
            },
            privateKey: {
                serializedName: "privateKey",
                type: {
                    name: "String"
                }
            },
            strictHostKeyChecking: {
                serializedName: "strictHostKeyChecking",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ConfigurationServiceResourceCollection = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigurationServiceResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigurationServiceSettingsValidateResult = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceSettingsValidateResult",
        modelProperties: {
            gitPropertyValidationResult: {
                serializedName: "gitPropertyValidationResult",
                type: {
                    name: "Composite",
                    className: "ConfigurationServiceGitPropertyValidateResult"
                }
            }
        }
    }
};
const ConfigurationServiceGitPropertyValidateResult = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceGitPropertyValidateResult",
        modelProperties: {
            isValid: {
                serializedName: "isValid",
                type: {
                    name: "Boolean"
                }
            },
            gitReposValidationResult: {
                serializedName: "gitReposValidationResult",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidationMessages"
                        }
                    }
                }
            }
        }
    }
};
const ValidationMessages = {
    type: {
        name: "Composite",
        className: "ValidationMessages",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            messages: {
                serializedName: "messages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ServiceRegistryProperties = {
    type: {
        name: "Composite",
        className: "ServiceRegistryProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "ServiceRegistryResourceRequests"
                }
            },
            instances: {
                serializedName: "instances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceRegistryInstance"
                        }
                    }
                }
            }
        }
    }
};
const ServiceRegistryResourceRequests = {
    type: {
        name: "Composite",
        className: "ServiceRegistryResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            instanceCount: {
                serializedName: "instanceCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ServiceRegistryInstance = {
    type: {
        name: "Composite",
        className: "ServiceRegistryInstance",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceRegistryResourceCollection = {
    type: {
        name: "Composite",
        className: "ServiceRegistryResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceRegistryResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationLiveViewResourceCollection = {
    type: {
        name: "Composite",
        className: "ApplicationLiveViewResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationLiveViewResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationLiveViewProperties = {
    type: {
        name: "Composite",
        className: "ApplicationLiveViewProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            components: {
                serializedName: "components",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationLiveViewComponent"
                        }
                    }
                }
            }
        }
    }
};
const ApplicationLiveViewComponent = {
    type: {
        name: "Composite",
        className: "ApplicationLiveViewComponent",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "any"
                }
            },
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "ApplicationLiveViewResourceRequests"
                }
            },
            instances: {
                serializedName: "instances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationLiveViewInstance"
                        }
                    }
                }
            }
        }
    }
};
const ApplicationLiveViewResourceRequests = {
    type: {
        name: "Composite",
        className: "ApplicationLiveViewResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            instanceCount: {
                serializedName: "instanceCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ApplicationLiveViewInstance = {
    type: {
        name: "Composite",
        className: "ApplicationLiveViewInstance",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DevToolPortalResourceCollection = {
    type: {
        name: "Composite",
        className: "DevToolPortalResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DevToolPortalResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DevToolPortalProperties = {
    type: {
        name: "Composite",
        className: "DevToolPortalProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "DevToolPortalResourceRequests"
                }
            },
            instances: {
                serializedName: "instances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DevToolPortalInstance"
                        }
                    }
                }
            },
            public: {
                defaultValue: false,
                serializedName: "public",
                type: {
                    name: "Boolean"
                }
            },
            url: {
                serializedName: "url",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            ssoProperties: {
                serializedName: "ssoProperties",
                type: {
                    name: "Composite",
                    className: "DevToolPortalSsoProperties"
                }
            },
            features: {
                serializedName: "features",
                type: {
                    name: "Composite",
                    className: "DevToolPortalFeatureSettings"
                }
            }
        }
    }
};
const DevToolPortalResourceRequests = {
    type: {
        name: "Composite",
        className: "DevToolPortalResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            instanceCount: {
                serializedName: "instanceCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const DevToolPortalInstance = {
    type: {
        name: "Composite",
        className: "DevToolPortalInstance",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DevToolPortalSsoProperties = {
    type: {
        name: "Composite",
        className: "DevToolPortalSsoProperties",
        modelProperties: {
            scopes: {
                serializedName: "scopes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            clientId: {
                serializedName: "clientId",
                type: {
                    name: "String"
                }
            },
            clientSecret: {
                serializedName: "clientSecret",
                type: {
                    name: "String"
                }
            },
            metadataUrl: {
                serializedName: "metadataUrl",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DevToolPortalFeatureSettings = {
    type: {
        name: "Composite",
        className: "DevToolPortalFeatureSettings",
        modelProperties: {
            applicationAccelerator: {
                serializedName: "applicationAccelerator",
                type: {
                    name: "Composite",
                    className: "DevToolPortalFeatureDetail"
                }
            },
            applicationLiveView: {
                serializedName: "applicationLiveView",
                type: {
                    name: "Composite",
                    className: "DevToolPortalFeatureDetail"
                }
            }
        }
    }
};
const DevToolPortalFeatureDetail = {
    type: {
        name: "Composite",
        className: "DevToolPortalFeatureDetail",
        modelProperties: {
            state: {
                defaultValue: "Enabled",
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            route: {
                serializedName: "route",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRegistryResourceCollection = {
    type: {
        name: "Composite",
        className: "ContainerRegistryResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContainerRegistryResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRegistryProperties = {
    type: {
        name: "Composite",
        className: "ContainerRegistryProperties",
        modelProperties: {
            credentials: {
                serializedName: "credentials",
                type: {
                    name: "Composite",
                    className: "ContainerRegistryCredentials"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRegistryCredentials = {
    type: {
        name: "Composite",
        className: "ContainerRegistryCredentials",
        uberParent: "ContainerRegistryCredentials",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildServiceCollection = {
    type: {
        name: "Composite",
        className: "BuildServiceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildService"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildServiceProperties = {
    type: {
        name: "Composite",
        className: "BuildServiceProperties",
        modelProperties: {
            containerRegistry: {
                serializedName: "containerRegistry",
                type: {
                    name: "String"
                }
            },
            kPackVersion: {
                serializedName: "kPackVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "BuildServicePropertiesResourceRequests"
                }
            }
        }
    }
};
const BuildServicePropertiesResourceRequests = {
    type: {
        name: "Composite",
        className: "BuildServicePropertiesResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildCollection = {
    type: {
        name: "Composite",
        className: "BuildCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Build"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildProperties = {
    type: {
        name: "Composite",
        className: "BuildProperties",
        modelProperties: {
            relativePath: {
                serializedName: "relativePath",
                type: {
                    name: "String"
                }
            },
            builder: {
                serializedName: "builder",
                type: {
                    name: "String"
                }
            },
            agentPool: {
                serializedName: "agentPool",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            env: {
                serializedName: "env",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            triggeredBuildResult: {
                serializedName: "triggeredBuildResult",
                type: {
                    name: "Composite",
                    className: "TriggeredBuildResult"
                }
            },
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "BuildResourceRequests"
                }
            }
        }
    }
};
const TriggeredBuildResult = {
    type: {
        name: "Composite",
        className: "TriggeredBuildResult",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildResourceRequests = {
    type: {
        name: "Composite",
        className: "BuildResourceRequests",
        modelProperties: {
            cpu: {
                defaultValue: "1",
                serializedName: "cpu",
                type: {
                    name: "String"
                }
            },
            memory: {
                defaultValue: "2Gi",
                serializedName: "memory",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildpackBindingResourceCollection = {
    type: {
        name: "Composite",
        className: "BuildpackBindingResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildpackBindingResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildpackBindingProperties = {
    type: {
        name: "Composite",
        className: "BuildpackBindingProperties",
        modelProperties: {
            bindingType: {
                serializedName: "bindingType",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            launchProperties: {
                serializedName: "launchProperties",
                type: {
                    name: "Composite",
                    className: "BuildpackBindingLaunchProperties"
                }
            }
        }
    }
};
const BuildpackBindingLaunchProperties = {
    type: {
        name: "Composite",
        className: "BuildpackBindingLaunchProperties",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            secrets: {
                serializedName: "secrets",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const BuildResultCollection = {
    type: {
        name: "Composite",
        className: "BuildResultCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildResult"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildResultProperties = {
    type: {
        name: "Composite",
        className: "BuildResultProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            },
            buildPodName: {
                serializedName: "buildPodName",
                type: {
                    name: "String"
                }
            },
            buildStages: {
                serializedName: "buildStages",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildStageProperties"
                        }
                    }
                }
            },
            image: {
                serializedName: "image",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildStageProperties = {
    type: {
        name: "Composite",
        className: "BuildStageProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            exitCode: {
                serializedName: "exitCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            reason: {
                serializedName: "reason",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildResultLog = {
    type: {
        name: "Composite",
        className: "BuildResultLog",
        modelProperties: {
            blobUrl: {
                serializedName: "blobUrl",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuilderProperties = {
    type: {
        name: "Composite",
        className: "BuilderProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            stack: {
                serializedName: "stack",
                type: {
                    name: "Composite",
                    className: "StackProperties"
                }
            },
            buildpackGroups: {
                serializedName: "buildpackGroups",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildpacksGroupProperties"
                        }
                    }
                }
            }
        }
    }
};
const StackProperties = {
    type: {
        name: "Composite",
        className: "StackProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildpacksGroupProperties = {
    type: {
        name: "Composite",
        className: "BuildpacksGroupProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            buildpacks: {
                serializedName: "buildpacks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildpackProperties"
                        }
                    }
                }
            }
        }
    }
};
const BuildpackProperties = {
    type: {
        name: "Composite",
        className: "BuildpackProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuilderResourceCollection = {
    type: {
        name: "Composite",
        className: "BuilderResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuilderResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceUploadDefinition = {
    type: {
        name: "Composite",
        className: "ResourceUploadDefinition",
        modelProperties: {
            relativePath: {
                serializedName: "relativePath",
                type: {
                    name: "String"
                }
            },
            uploadUrl: {
                serializedName: "uploadUrl",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SupportedBuildpacksCollection = {
    type: {
        name: "Composite",
        className: "SupportedBuildpacksCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SupportedBuildpackResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SupportedBuildpackResourceProperties = {
    type: {
        name: "Composite",
        className: "SupportedBuildpackResourceProperties",
        modelProperties: {
            buildpackId: {
                serializedName: "buildpackId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SupportedStacksCollection = {
    type: {
        name: "Composite",
        className: "SupportedStacksCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SupportedStackResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SupportedStackResourceProperties = {
    type: {
        name: "Composite",
        className: "SupportedStackResourceProperties",
        modelProperties: {
            stackId: {
                serializedName: "stackId",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildServiceAgentPoolResourceCollection = {
    type: {
        name: "Composite",
        className: "BuildServiceAgentPoolResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BuildServiceAgentPoolResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BuildServiceAgentPoolProperties = {
    type: {
        name: "Composite",
        className: "BuildServiceAgentPoolProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            poolSize: {
                serializedName: "poolSize",
                type: {
                    name: "Composite",
                    className: "BuildServiceAgentPoolSizeProperties"
                }
            }
        }
    }
};
const BuildServiceAgentPoolSizeProperties = {
    type: {
        name: "Composite",
        className: "BuildServiceAgentPoolSizeProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitoringSettingProperties = {
    type: {
        name: "Composite",
        className: "MonitoringSettingProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            },
            traceEnabled: {
                serializedName: "traceEnabled",
                type: {
                    name: "Boolean"
                }
            },
            appInsightsInstrumentationKey: {
                serializedName: "appInsightsInstrumentationKey",
                type: {
                    name: "String"
                }
            },
            appInsightsSamplingRate: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "appInsightsSamplingRate",
                type: {
                    name: "Number"
                }
            },
            appInsightsAgentVersions: {
                serializedName: "appInsightsAgentVersions",
                type: {
                    name: "Composite",
                    className: "ApplicationInsightsAgentVersions"
                }
            }
        }
    }
};
const ApplicationInsightsAgentVersions = {
    type: {
        name: "Composite",
        className: "ApplicationInsightsAgentVersions",
        modelProperties: {
            java: {
                serializedName: "java",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppResourceProperties = {
    type: {
        name: "Composite",
        className: "AppResourceProperties",
        modelProperties: {
            public: {
                serializedName: "public",
                type: {
                    name: "Boolean"
                }
            },
            url: {
                serializedName: "url",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            addonConfigs: {
                serializedName: "addonConfigs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            fqdn: {
                serializedName: "fqdn",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            httpsOnly: {
                defaultValue: false,
                serializedName: "httpsOnly",
                type: {
                    name: "Boolean"
                }
            },
            temporaryDisk: {
                serializedName: "temporaryDisk",
                type: {
                    name: "Composite",
                    className: "TemporaryDisk"
                }
            },
            persistentDisk: {
                serializedName: "persistentDisk",
                type: {
                    name: "Composite",
                    className: "PersistentDisk"
                }
            },
            customPersistentDisks: {
                serializedName: "customPersistentDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomPersistentDiskResource"
                        }
                    }
                }
            },
            enableEndToEndTLS: {
                defaultValue: false,
                serializedName: "enableEndToEndTLS",
                type: {
                    name: "Boolean"
                }
            },
            loadedCertificates: {
                serializedName: "loadedCertificates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LoadedCertificate"
                        }
                    }
                }
            },
            vnetAddons: {
                serializedName: "vnetAddons",
                type: {
                    name: "Composite",
                    className: "AppVNetAddons"
                }
            },
            ingressSettings: {
                serializedName: "ingressSettings",
                type: {
                    name: "Composite",
                    className: "IngressSettings"
                }
            },
            secrets: {
                serializedName: "secrets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Secret"
                        }
                    }
                }
            }
        }
    }
};
const TemporaryDisk = {
    type: {
        name: "Composite",
        className: "TemporaryDisk",
        modelProperties: {
            sizeInGB: {
                constraints: {
                    InclusiveMaximum: 5,
                    InclusiveMinimum: 0
                },
                serializedName: "sizeInGB",
                type: {
                    name: "Number"
                }
            },
            mountPath: {
                defaultValue: "/tmp",
                serializedName: "mountPath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PersistentDisk = {
    type: {
        name: "Composite",
        className: "PersistentDisk",
        modelProperties: {
            sizeInGB: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 0
                },
                serializedName: "sizeInGB",
                type: {
                    name: "Number"
                }
            },
            usedInGB: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 0
                },
                serializedName: "usedInGB",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            mountPath: {
                serializedName: "mountPath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomPersistentDiskResource = {
    type: {
        name: "Composite",
        className: "CustomPersistentDiskResource",
        modelProperties: {
            customPersistentDiskProperties: {
                serializedName: "customPersistentDiskProperties",
                type: {
                    name: "Composite",
                    className: "CustomPersistentDiskProperties"
                }
            },
            storageId: {
                serializedName: "storageId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomPersistentDiskProperties = {
    type: {
        name: "Composite",
        className: "CustomPersistentDiskProperties",
        uberParent: "CustomPersistentDiskProperties",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            mountPath: {
                serializedName: "mountPath",
                required: true,
                type: {
                    name: "String"
                }
            },
            readOnly: {
                serializedName: "readOnly",
                type: {
                    name: "Boolean"
                }
            },
            enableSubPath: {
                defaultValue: false,
                serializedName: "enableSubPath",
                type: {
                    name: "Boolean"
                }
            },
            mountOptions: {
                serializedName: "mountOptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const LoadedCertificate = {
    type: {
        name: "Composite",
        className: "LoadedCertificate",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            loadTrustStore: {
                defaultValue: false,
                serializedName: "loadTrustStore",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const AppVNetAddons = {
    type: {
        name: "Composite",
        className: "AppVNetAddons",
        modelProperties: {
            publicEndpoint: {
                defaultValue: false,
                serializedName: "publicEndpoint",
                type: {
                    name: "Boolean"
                }
            },
            publicEndpointUrl: {
                serializedName: "publicEndpointUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IngressSettings = {
    type: {
        name: "Composite",
        className: "IngressSettings",
        modelProperties: {
            readTimeoutInSeconds: {
                serializedName: "readTimeoutInSeconds",
                type: {
                    name: "Number"
                }
            },
            sendTimeoutInSeconds: {
                serializedName: "sendTimeoutInSeconds",
                type: {
                    name: "Number"
                }
            },
            sessionAffinity: {
                serializedName: "sessionAffinity",
                type: {
                    name: "String"
                }
            },
            sessionCookieMaxAge: {
                serializedName: "sessionCookieMaxAge",
                type: {
                    name: "Number"
                }
            },
            backendProtocol: {
                serializedName: "backendProtocol",
                type: {
                    name: "String"
                }
            },
            clientAuth: {
                serializedName: "clientAuth",
                type: {
                    name: "Composite",
                    className: "IngressSettingsClientAuth"
                }
            }
        }
    }
};
const IngressSettingsClientAuth = {
    type: {
        name: "Composite",
        className: "IngressSettingsClientAuth",
        modelProperties: {
            certificates: {
                serializedName: "certificates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const Secret = {
    type: {
        name: "Composite",
        className: "Secret",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedIdentityProperties = {
    type: {
        name: "Composite",
        className: "ManagedIdentityProperties",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "UserAssignedManagedIdentity"
                        }
                    }
                }
            }
        }
    }
};
const UserAssignedManagedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedManagedIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppResourceCollection = {
    type: {
        name: "Composite",
        className: "AppResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AppResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ActiveDeploymentCollection = {
    type: {
        name: "Composite",
        className: "ActiveDeploymentCollection",
        modelProperties: {
            activeDeploymentNames: {
                serializedName: "activeDeploymentNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const BindingResourceProperties = {
    type: {
        name: "Composite",
        className: "BindingResourceProperties",
        modelProperties: {
            resourceName: {
                serializedName: "resourceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            key: {
                serializedName: "key",
                type: {
                    name: "String"
                }
            },
            bindingParameters: {
                serializedName: "bindingParameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            generatedProperties: {
                serializedName: "generatedProperties",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            updatedAt: {
                serializedName: "updatedAt",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BindingResourceCollection = {
    type: {
        name: "Composite",
        className: "BindingResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BindingResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageProperties = {
    type: {
        name: "Composite",
        className: "StorageProperties",
        uberParent: "StorageProperties",
        polymorphicDiscriminator: {
            serializedName: "storageType",
            clientName: "storageType"
        },
        modelProperties: {
            storageType: {
                serializedName: "storageType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageResourceCollection = {
    type: {
        name: "Composite",
        className: "StorageResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CertificateProperties = {
    type: {
        name: "Composite",
        className: "CertificateProperties",
        uberParent: "CertificateProperties",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            thumbprint: {
                serializedName: "thumbprint",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            issuer: {
                serializedName: "issuer",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            issuedDate: {
                serializedName: "issuedDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            expirationDate: {
                serializedName: "expirationDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            activateDate: {
                serializedName: "activateDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            subjectName: {
                serializedName: "subjectName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dnsNames: {
                serializedName: "dnsNames",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CertificateResourceCollection = {
    type: {
        name: "Composite",
        className: "CertificateResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CertificateResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NameAvailabilityParameters = {
    type: {
        name: "Composite",
        className: "NameAvailabilityParameters",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NameAvailability = {
    type: {
        name: "Composite",
        className: "NameAvailability",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomDomainProperties = {
    type: {
        name: "Composite",
        className: "CustomDomainProperties",
        modelProperties: {
            thumbprint: {
                serializedName: "thumbprint",
                type: {
                    name: "String"
                }
            },
            appName: {
                serializedName: "appName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            certName: {
                serializedName: "certName",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomDomainResourceCollection = {
    type: {
        name: "Composite",
        className: "CustomDomainResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomDomainResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomDomainValidatePayload = {
    type: {
        name: "Composite",
        className: "CustomDomainValidatePayload",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomDomainValidateResult = {
    type: {
        name: "Composite",
        className: "CustomDomainValidateResult",
        modelProperties: {
            isValid: {
                serializedName: "isValid",
                type: {
                    name: "Boolean"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentResourceProperties = {
    type: {
        name: "Composite",
        className: "DeploymentResourceProperties",
        modelProperties: {
            source: {
                serializedName: "source",
                type: {
                    name: "Composite",
                    className: "UserSourceInfo"
                }
            },
            deploymentSettings: {
                serializedName: "deploymentSettings",
                type: {
                    name: "Composite",
                    className: "DeploymentSettings"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            active: {
                serializedName: "active",
                type: {
                    name: "Boolean"
                }
            },
            instances: {
                serializedName: "instances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeploymentInstance"
                        }
                    }
                }
            }
        }
    }
};
const UserSourceInfo = {
    type: {
        name: "Composite",
        className: "UserSourceInfo",
        uberParent: "UserSourceInfo",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentSettings = {
    type: {
        name: "Composite",
        className: "DeploymentSettings",
        modelProperties: {
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "ResourceRequests"
                }
            },
            environmentVariables: {
                serializedName: "environmentVariables",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            addonConfigs: {
                serializedName: "addonConfigs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            },
            livenessProbe: {
                serializedName: "livenessProbe",
                type: {
                    name: "Composite",
                    className: "Probe"
                }
            },
            readinessProbe: {
                serializedName: "readinessProbe",
                type: {
                    name: "Composite",
                    className: "Probe"
                }
            },
            startupProbe: {
                serializedName: "startupProbe",
                type: {
                    name: "Composite",
                    className: "Probe"
                }
            },
            terminationGracePeriodSeconds: {
                defaultValue: 90,
                serializedName: "terminationGracePeriodSeconds",
                type: {
                    name: "Number"
                }
            },
            scale: {
                serializedName: "scale",
                type: {
                    name: "Composite",
                    className: "Scale"
                }
            },
            containerProbeSettings: {
                serializedName: "containerProbeSettings",
                type: {
                    name: "Composite",
                    className: "ContainerProbeSettings"
                }
            }
        }
    }
};
const ResourceRequests = {
    type: {
        name: "Composite",
        className: "ResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Probe = {
    type: {
        name: "Composite",
        className: "Probe",
        modelProperties: {
            probeAction: {
                serializedName: "probeAction",
                type: {
                    name: "Composite",
                    className: "ProbeAction"
                }
            },
            disableProbe: {
                defaultValue: false,
                serializedName: "disableProbe",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            initialDelaySeconds: {
                serializedName: "initialDelaySeconds",
                type: {
                    name: "Number"
                }
            },
            periodSeconds: {
                serializedName: "periodSeconds",
                type: {
                    name: "Number"
                }
            },
            timeoutSeconds: {
                serializedName: "timeoutSeconds",
                type: {
                    name: "Number"
                }
            },
            failureThreshold: {
                serializedName: "failureThreshold",
                type: {
                    name: "Number"
                }
            },
            successThreshold: {
                serializedName: "successThreshold",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ProbeAction = {
    type: {
        name: "Composite",
        className: "ProbeAction",
        uberParent: "ProbeAction",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Scale = {
    type: {
        name: "Composite",
        className: "Scale",
        modelProperties: {
            minReplicas: {
                serializedName: "minReplicas",
                type: {
                    name: "Number"
                }
            },
            maxReplicas: {
                defaultValue: 10,
                serializedName: "maxReplicas",
                type: {
                    name: "Number"
                }
            },
            rules: {
                serializedName: "rules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScaleRule"
                        }
                    }
                }
            }
        }
    }
};
const ScaleRule = {
    type: {
        name: "Composite",
        className: "ScaleRule",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            azureQueue: {
                serializedName: "azureQueue",
                type: {
                    name: "Composite",
                    className: "QueueScaleRule"
                }
            },
            custom: {
                serializedName: "custom",
                type: {
                    name: "Composite",
                    className: "CustomScaleRule"
                }
            },
            http: {
                serializedName: "http",
                type: {
                    name: "Composite",
                    className: "HttpScaleRule"
                }
            },
            tcp: {
                serializedName: "tcp",
                type: {
                    name: "Composite",
                    className: "TcpScaleRule"
                }
            }
        }
    }
};
const QueueScaleRule = {
    type: {
        name: "Composite",
        className: "QueueScaleRule",
        modelProperties: {
            queueName: {
                serializedName: "queueName",
                type: {
                    name: "String"
                }
            },
            queueLength: {
                serializedName: "queueLength",
                type: {
                    name: "Number"
                }
            },
            auth: {
                serializedName: "auth",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScaleRuleAuth"
                        }
                    }
                }
            }
        }
    }
};
const ScaleRuleAuth = {
    type: {
        name: "Composite",
        className: "ScaleRuleAuth",
        modelProperties: {
            secretRef: {
                serializedName: "secretRef",
                type: {
                    name: "String"
                }
            },
            triggerParameter: {
                serializedName: "triggerParameter",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomScaleRule = {
    type: {
        name: "Composite",
        className: "CustomScaleRule",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            auth: {
                serializedName: "auth",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScaleRuleAuth"
                        }
                    }
                }
            }
        }
    }
};
const HttpScaleRule = {
    type: {
        name: "Composite",
        className: "HttpScaleRule",
        modelProperties: {
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            auth: {
                serializedName: "auth",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScaleRuleAuth"
                        }
                    }
                }
            }
        }
    }
};
const TcpScaleRule = {
    type: {
        name: "Composite",
        className: "TcpScaleRule",
        modelProperties: {
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            auth: {
                serializedName: "auth",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScaleRuleAuth"
                        }
                    }
                }
            }
        }
    }
};
const ContainerProbeSettings = {
    type: {
        name: "Composite",
        className: "ContainerProbeSettings",
        modelProperties: {
            disableProbe: {
                serializedName: "disableProbe",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const DeploymentInstance = {
    type: {
        name: "Composite",
        className: "DeploymentInstance",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            reason: {
                serializedName: "reason",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            discoveryStatus: {
                serializedName: "discoveryStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            zone: {
                serializedName: "zone",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentResourceCollection = {
    type: {
        name: "Composite",
        className: "DeploymentResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeploymentResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeploymentList = {
    type: {
        name: "Composite",
        className: "DeploymentList",
        modelProperties: {
            deployments: {
                serializedName: "deployments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const RemoteDebuggingPayload = {
    type: {
        name: "Composite",
        className: "RemoteDebuggingPayload",
        modelProperties: {
            port: {
                serializedName: "port",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const RemoteDebugging = {
    type: {
        name: "Composite",
        className: "RemoteDebugging",
        modelProperties: {
            port: {
                serializedName: "port",
                type: {
                    name: "Number"
                }
            },
            enabled: {
                serializedName: "enabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const LogFileUrlResponse = {
    type: {
        name: "Composite",
        className: "LogFileUrlResponse",
        modelProperties: {
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DiagnosticParameters = {
    type: {
        name: "Composite",
        className: "DiagnosticParameters",
        modelProperties: {
            appInstance: {
                serializedName: "appInstance",
                type: {
                    name: "String"
                }
            },
            filePath: {
                serializedName: "filePath",
                type: {
                    name: "String"
                }
            },
            duration: {
                serializedName: "duration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceResourceList = {
    type: {
        name: "Composite",
        className: "ServiceResourceList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AvailableOperations = {
    type: {
        name: "Composite",
        className: "AvailableOperations",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationDetail"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDetail = {
    type: {
        name: "Composite",
        className: "OperationDetail",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "OperationProperties"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationProperties = {
    type: {
        name: "Composite",
        className: "OperationProperties",
        modelProperties: {
            serviceSpecification: {
                serializedName: "serviceSpecification",
                type: {
                    name: "Composite",
                    className: "ServiceSpecification"
                }
            }
        }
    }
};
const ServiceSpecification = {
    type: {
        name: "Composite",
        className: "ServiceSpecification",
        modelProperties: {
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LogSpecification"
                        }
                    }
                }
            },
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricSpecification"
                        }
                    }
                }
            }
        }
    }
};
const LogSpecification = {
    type: {
        name: "Composite",
        className: "LogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetricSpecification = {
    type: {
        name: "Composite",
        className: "MetricSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            category: {
                serializedName: "category",
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            supportedAggregationTypes: {
                serializedName: "supportedAggregationTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            supportedTimeGrainTypes: {
                serializedName: "supportedTimeGrainTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            fillGapWithZero: {
                serializedName: "fillGapWithZero",
                type: {
                    name: "Boolean"
                }
            },
            dimensions: {
                serializedName: "dimensions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricDimension"
                        }
                    }
                }
            },
            sourceMdmNamespace: {
                serializedName: "sourceMdmNamespace",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetricDimension = {
    type: {
        name: "Composite",
        className: "MetricDimension",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            toBeExportedForShoebox: {
                serializedName: "toBeExportedForShoebox",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const AvailableRuntimeVersions = {
    type: {
        name: "Composite",
        className: "AvailableRuntimeVersions",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SupportedRuntimeVersion"
                        }
                    }
                }
            }
        }
    }
};
const SupportedRuntimeVersion = {
    type: {
        name: "Composite",
        className: "SupportedRuntimeVersion",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            platform: {
                serializedName: "platform",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceSkuCollection = {
    type: {
        name: "Composite",
        className: "ResourceSkuCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSku"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceSku = {
    type: {
        name: "Composite",
        className: "ResourceSku",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Composite",
                    className: "SkuCapacity"
                }
            },
            locations: {
                serializedName: "locations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            locationInfo: {
                serializedName: "locationInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuLocationInfo"
                        }
                    }
                }
            },
            restrictions: {
                serializedName: "restrictions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuRestrictions"
                        }
                    }
                }
            }
        }
    }
};
const SkuCapacity = {
    type: {
        name: "Composite",
        className: "SkuCapacity",
        modelProperties: {
            minimum: {
                serializedName: "minimum",
                required: true,
                type: {
                    name: "Number"
                }
            },
            maximum: {
                serializedName: "maximum",
                type: {
                    name: "Number"
                }
            },
            default: {
                serializedName: "default",
                type: {
                    name: "Number"
                }
            },
            scaleType: {
                serializedName: "scaleType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceSkuLocationInfo = {
    type: {
        name: "Composite",
        className: "ResourceSkuLocationInfo",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            zoneDetails: {
                serializedName: "zoneDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuZoneDetails"
                        }
                    }
                }
            }
        }
    }
};
const ResourceSkuZoneDetails = {
    type: {
        name: "Composite",
        className: "ResourceSkuZoneDetails",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            capabilities: {
                serializedName: "capabilities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuCapabilities"
                        }
                    }
                }
            }
        }
    }
};
const ResourceSkuCapabilities = {
    type: {
        name: "Composite",
        className: "ResourceSkuCapabilities",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceSkuRestrictions = {
    type: {
        name: "Composite",
        className: "ResourceSkuRestrictions",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            restrictionInfo: {
                serializedName: "restrictionInfo",
                type: {
                    name: "Composite",
                    className: "ResourceSkuRestrictionInfo"
                }
            },
            reasonCode: {
                serializedName: "reasonCode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceSkuRestrictionInfo = {
    type: {
        name: "Composite",
        className: "ResourceSkuRestrictionInfo",
        modelProperties: {
            locations: {
                serializedName: "locations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const GatewayProperties = {
    type: {
        name: "Composite",
        className: "GatewayProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            public: {
                defaultValue: false,
                serializedName: "public",
                type: {
                    name: "Boolean"
                }
            },
            url: {
                serializedName: "url",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            httpsOnly: {
                defaultValue: false,
                serializedName: "httpsOnly",
                type: {
                    name: "Boolean"
                }
            },
            ssoProperties: {
                serializedName: "ssoProperties",
                type: {
                    name: "Composite",
                    className: "SsoProperties"
                }
            },
            apiMetadataProperties: {
                serializedName: "apiMetadataProperties",
                type: {
                    name: "Composite",
                    className: "GatewayApiMetadataProperties"
                }
            },
            corsProperties: {
                serializedName: "corsProperties",
                type: {
                    name: "Composite",
                    className: "GatewayCorsProperties"
                }
            },
            clientAuth: {
                serializedName: "clientAuth",
                type: {
                    name: "Composite",
                    className: "GatewayPropertiesClientAuth"
                }
            },
            apmTypes: {
                constraints: {
                    UniqueItems: true
                },
                serializedName: "apmTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            environmentVariables: {
                serializedName: "environmentVariables",
                type: {
                    name: "Composite",
                    className: "GatewayPropertiesEnvironmentVariables"
                }
            },
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "GatewayResourceRequests"
                }
            },
            instances: {
                serializedName: "instances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GatewayInstance"
                        }
                    }
                }
            },
            operatorProperties: {
                serializedName: "operatorProperties",
                type: {
                    name: "Composite",
                    className: "GatewayOperatorProperties"
                }
            }
        }
    }
};
const SsoProperties = {
    type: {
        name: "Composite",
        className: "SsoProperties",
        modelProperties: {
            scope: {
                serializedName: "scope",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            clientId: {
                serializedName: "clientId",
                type: {
                    name: "String"
                }
            },
            clientSecret: {
                serializedName: "clientSecret",
                type: {
                    name: "String"
                }
            },
            issuerUri: {
                serializedName: "issuerUri",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GatewayApiMetadataProperties = {
    type: {
        name: "Composite",
        className: "GatewayApiMetadataProperties",
        modelProperties: {
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            documentation: {
                serializedName: "documentation",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            serverUrl: {
                serializedName: "serverUrl",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GatewayCorsProperties = {
    type: {
        name: "Composite",
        className: "GatewayCorsProperties",
        modelProperties: {
            allowedOrigins: {
                serializedName: "allowedOrigins",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            allowedMethods: {
                serializedName: "allowedMethods",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            allowedHeaders: {
                serializedName: "allowedHeaders",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            maxAge: {
                serializedName: "maxAge",
                type: {
                    name: "Number"
                }
            },
            allowCredentials: {
                serializedName: "allowCredentials",
                type: {
                    name: "Boolean"
                }
            },
            exposedHeaders: {
                serializedName: "exposedHeaders",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const GatewayPropertiesClientAuth = {
    type: {
        name: "Composite",
        className: "GatewayPropertiesClientAuth",
        modelProperties: {
            certificates: {
                constraints: {
                    UniqueItems: true
                },
                serializedName: "certificates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            certificateVerification: {
                defaultValue: "Disabled",
                serializedName: "certificateVerification",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GatewayPropertiesEnvironmentVariables = {
    type: {
        name: "Composite",
        className: "GatewayPropertiesEnvironmentVariables",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            secrets: {
                serializedName: "secrets",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const GatewayResourceRequests = {
    type: {
        name: "Composite",
        className: "GatewayResourceRequests",
        modelProperties: {
            cpu: {
                defaultValue: "1",
                serializedName: "cpu",
                type: {
                    name: "String"
                }
            },
            memory: {
                defaultValue: "2Gi",
                serializedName: "memory",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GatewayInstance = {
    type: {
        name: "Composite",
        className: "GatewayInstance",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GatewayOperatorProperties = {
    type: {
        name: "Composite",
        className: "GatewayOperatorProperties",
        modelProperties: {
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "GatewayOperatorResourceRequests"
                }
            },
            instances: {
                serializedName: "instances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GatewayInstance"
                        }
                    }
                }
            }
        }
    }
};
const GatewayOperatorResourceRequests = {
    type: {
        name: "Composite",
        className: "GatewayOperatorResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            instanceCount: {
                serializedName: "instanceCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SkuObject = {
    type: {
        name: "Composite",
        className: "SkuObject",
        modelProperties: {
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }
        }
    }
};
const GatewayResourceCollection = {
    type: {
        name: "Composite",
        className: "GatewayResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GatewayResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GatewayRouteConfigProperties = {
    type: {
        name: "Composite",
        className: "GatewayRouteConfigProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            appResourceId: {
                serializedName: "appResourceId",
                type: {
                    name: "String"
                }
            },
            openApi: {
                serializedName: "openApi",
                type: {
                    name: "Composite",
                    className: "GatewayRouteConfigOpenApiProperties"
                }
            },
            protocol: {
                defaultValue: "HTTP",
                serializedName: "protocol",
                type: {
                    name: "String"
                }
            },
            routes: {
                serializedName: "routes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GatewayApiRoute"
                        }
                    }
                }
            },
            ssoEnabled: {
                serializedName: "ssoEnabled",
                type: {
                    name: "Boolean"
                }
            },
            predicates: {
                serializedName: "predicates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            filters: {
                serializedName: "filters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const GatewayRouteConfigOpenApiProperties = {
    type: {
        name: "Composite",
        className: "GatewayRouteConfigOpenApiProperties",
        modelProperties: {
            uri: {
                serializedName: "uri",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GatewayApiRoute = {
    type: {
        name: "Composite",
        className: "GatewayApiRoute",
        modelProperties: {
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            uri: {
                serializedName: "uri",
                type: {
                    name: "String"
                }
            },
            ssoEnabled: {
                serializedName: "ssoEnabled",
                type: {
                    name: "Boolean"
                }
            },
            tokenRelay: {
                serializedName: "tokenRelay",
                type: {
                    name: "Boolean"
                }
            },
            predicates: {
                serializedName: "predicates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            filters: {
                serializedName: "filters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            order: {
                serializedName: "order",
                type: {
                    name: "Number"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const GatewayRouteConfigResourceCollection = {
    type: {
        name: "Composite",
        className: "GatewayRouteConfigResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GatewayRouteConfigResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GatewayCustomDomainProperties = {
    type: {
        name: "Composite",
        className: "GatewayCustomDomainProperties",
        modelProperties: {
            thumbprint: {
                serializedName: "thumbprint",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GatewayCustomDomainResourceCollection = {
    type: {
        name: "Composite",
        className: "GatewayCustomDomainResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GatewayCustomDomainResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiPortalProperties = {
    type: {
        name: "Composite",
        className: "ApiPortalProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            public: {
                defaultValue: false,
                serializedName: "public",
                type: {
                    name: "Boolean"
                }
            },
            url: {
                serializedName: "url",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            httpsOnly: {
                defaultValue: false,
                serializedName: "httpsOnly",
                type: {
                    name: "Boolean"
                }
            },
            gatewayIds: {
                serializedName: "gatewayIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            sourceUrls: {
                serializedName: "sourceUrls",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            ssoProperties: {
                serializedName: "ssoProperties",
                type: {
                    name: "Composite",
                    className: "SsoProperties"
                }
            },
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "ApiPortalResourceRequests"
                }
            },
            instances: {
                serializedName: "instances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApiPortalInstance"
                        }
                    }
                }
            }
        }
    }
};
const ApiPortalResourceRequests = {
    type: {
        name: "Composite",
        className: "ApiPortalResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiPortalInstance = {
    type: {
        name: "Composite",
        className: "ApiPortalInstance",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiPortalResourceCollection = {
    type: {
        name: "Composite",
        className: "ApiPortalResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApiPortalResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiPortalCustomDomainProperties = {
    type: {
        name: "Composite",
        className: "ApiPortalCustomDomainProperties",
        modelProperties: {
            thumbprint: {
                serializedName: "thumbprint",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiPortalCustomDomainResourceCollection = {
    type: {
        name: "Composite",
        className: "ApiPortalCustomDomainResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApiPortalCustomDomainResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationAcceleratorResourceCollection = {
    type: {
        name: "Composite",
        className: "ApplicationAcceleratorResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationAcceleratorResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationAcceleratorProperties = {
    type: {
        name: "Composite",
        className: "ApplicationAcceleratorProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            components: {
                serializedName: "components",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationAcceleratorComponent"
                        }
                    }
                }
            }
        }
    }
};
const ApplicationAcceleratorComponent = {
    type: {
        name: "Composite",
        className: "ApplicationAcceleratorComponent",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceRequests: {
                serializedName: "resourceRequests",
                type: {
                    name: "Composite",
                    className: "ApplicationAcceleratorResourceRequests"
                }
            },
            instances: {
                serializedName: "instances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationAcceleratorInstance"
                        }
                    }
                }
            }
        }
    }
};
const ApplicationAcceleratorResourceRequests = {
    type: {
        name: "Composite",
        className: "ApplicationAcceleratorResourceRequests",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            memory: {
                serializedName: "memory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            instanceCount: {
                serializedName: "instanceCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ApplicationAcceleratorInstance = {
    type: {
        name: "Composite",
        className: "ApplicationAcceleratorInstance",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomizedAcceleratorResourceCollection = {
    type: {
        name: "Composite",
        className: "CustomizedAcceleratorResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomizedAcceleratorResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomizedAcceleratorProperties = {
    type: {
        name: "Composite",
        className: "CustomizedAcceleratorProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            iconUrl: {
                serializedName: "iconUrl",
                type: {
                    name: "String"
                }
            },
            acceleratorTags: {
                serializedName: "acceleratorTags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            gitRepository: {
                serializedName: "gitRepository",
                type: {
                    name: "Composite",
                    className: "AcceleratorGitRepository"
                }
            }
        }
    }
};
const AcceleratorGitRepository = {
    type: {
        name: "Composite",
        className: "AcceleratorGitRepository",
        modelProperties: {
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            },
            intervalInSeconds: {
                serializedName: "intervalInSeconds",
                type: {
                    name: "Number"
                }
            },
            branch: {
                serializedName: "branch",
                type: {
                    name: "String"
                }
            },
            commit: {
                serializedName: "commit",
                type: {
                    name: "String"
                }
            },
            gitTag: {
                serializedName: "gitTag",
                type: {
                    name: "String"
                }
            },
            authSetting: {
                serializedName: "authSetting",
                type: {
                    name: "Composite",
                    className: "AcceleratorAuthSetting"
                }
            }
        }
    }
};
const AcceleratorAuthSetting = {
    type: {
        name: "Composite",
        className: "AcceleratorAuthSetting",
        uberParent: "AcceleratorAuthSetting",
        polymorphicDiscriminator: {
            serializedName: "authType",
            clientName: "authType"
        },
        modelProperties: {
            authType: {
                serializedName: "authType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomizedAcceleratorValidateResult = {
    type: {
        name: "Composite",
        className: "CustomizedAcceleratorValidateResult",
        modelProperties: {
            state: {
                defaultValue: "Valid",
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PredefinedAcceleratorResourceCollection = {
    type: {
        name: "Composite",
        className: "PredefinedAcceleratorResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PredefinedAcceleratorResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PredefinedAcceleratorProperties = {
    type: {
        name: "Composite",
        className: "PredefinedAcceleratorProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            iconUrl: {
                serializedName: "iconUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            acceleratorTags: {
                serializedName: "acceleratorTags",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            state: {
                defaultValue: "Enabled",
                serializedName: "state",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomContainer = {
    type: {
        name: "Composite",
        className: "CustomContainer",
        modelProperties: {
            server: {
                serializedName: "server",
                type: {
                    name: "String"
                }
            },
            containerImage: {
                serializedName: "containerImage",
                type: {
                    name: "String"
                }
            },
            command: {
                serializedName: "command",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            args: {
                serializedName: "args",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            imageRegistryCredential: {
                serializedName: "imageRegistryCredential",
                type: {
                    name: "Composite",
                    className: "ImageRegistryCredential"
                }
            },
            languageFramework: {
                serializedName: "languageFramework",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImageRegistryCredential = {
    type: {
        name: "Composite",
        className: "ImageRegistryCredential",
        modelProperties: {
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const ContainerRegistryBasicCredentials = {
    serializedName: "BasicAuth",
    type: {
        name: "Composite",
        className: "ContainerRegistryBasicCredentials",
        uberParent: "ContainerRegistryCredentials",
        polymorphicDiscriminator: ContainerRegistryCredentials.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ContainerRegistryCredentials.type.modelProperties), { server: {
                serializedName: "server",
                required: true,
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "username",
                required: true,
                type: {
                    name: "String"
                }
            }, password: {
                serializedName: "password",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureFileVolume = {
    serializedName: "AzureFileVolume",
    type: {
        name: "Composite",
        className: "AzureFileVolume",
        uberParent: "CustomPersistentDiskProperties",
        polymorphicDiscriminator: CustomPersistentDiskProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CustomPersistentDiskProperties.type.modelProperties), { shareName: {
                serializedName: "shareName",
                type: {
                    name: "String"
                }
            } })
    }
};
const StorageAccount = {
    serializedName: "StorageAccount",
    type: {
        name: "Composite",
        className: "StorageAccount",
        uberParent: "StorageProperties",
        polymorphicDiscriminator: StorageProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StorageProperties.type.modelProperties), { accountName: {
                serializedName: "accountName",
                required: true,
                type: {
                    name: "String"
                }
            }, accountKey: {
                serializedName: "accountKey",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const KeyVaultCertificateProperties = {
    serializedName: "KeyVaultCertificate",
    type: {
        name: "Composite",
        className: "KeyVaultCertificateProperties",
        uberParent: "CertificateProperties",
        polymorphicDiscriminator: CertificateProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CertificateProperties.type.modelProperties), { vaultUri: {
                serializedName: "vaultUri",
                required: true,
                type: {
                    name: "String"
                }
            }, keyVaultCertName: {
                serializedName: "keyVaultCertName",
                required: true,
                type: {
                    name: "String"
                }
            }, certVersion: {
                serializedName: "certVersion",
                type: {
                    name: "String"
                }
            }, excludePrivateKey: {
                defaultValue: false,
                serializedName: "excludePrivateKey",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const ContentCertificateProperties = {
    serializedName: "ContentCertificate",
    type: {
        name: "Composite",
        className: "ContentCertificateProperties",
        uberParent: "CertificateProperties",
        polymorphicDiscriminator: CertificateProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CertificateProperties.type.modelProperties), { content: {
                serializedName: "content",
                type: {
                    name: "String"
                }
            } })
    }
};
const UploadedUserSourceInfo = {
    serializedName: "UploadedUserSourceInfo",
    type: {
        name: "Composite",
        className: "UploadedUserSourceInfo",
        uberParent: "UserSourceInfo",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: Object.assign(Object.assign({}, UserSourceInfo.type.modelProperties), { relativePath: {
                serializedName: "relativePath",
                type: {
                    name: "String"
                }
            } })
    }
};
const BuildResultUserSourceInfo = {
    serializedName: "BuildResult",
    type: {
        name: "Composite",
        className: "BuildResultUserSourceInfo",
        uberParent: "UserSourceInfo",
        polymorphicDiscriminator: UserSourceInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UserSourceInfo.type.modelProperties), { buildResultId: {
                serializedName: "buildResultId",
                type: {
                    name: "String"
                }
            } })
    }
};
const CustomContainerUserSourceInfo = {
    serializedName: "Container",
    type: {
        name: "Composite",
        className: "CustomContainerUserSourceInfo",
        uberParent: "UserSourceInfo",
        polymorphicDiscriminator: UserSourceInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UserSourceInfo.type.modelProperties), { customContainer: {
                serializedName: "customContainer",
                type: {
                    name: "Composite",
                    className: "CustomContainer"
                }
            } })
    }
};
const HttpGetAction = {
    serializedName: "HTTPGetAction",
    type: {
        name: "Composite",
        className: "HttpGetAction",
        uberParent: "ProbeAction",
        polymorphicDiscriminator: ProbeAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProbeAction.type.modelProperties), { path: {
                serializedName: "path",
                type: {
                    name: "String"
                }
            }, scheme: {
                serializedName: "scheme",
                type: {
                    name: "String"
                }
            } })
    }
};
const ExecAction = {
    serializedName: "ExecAction",
    type: {
        name: "Composite",
        className: "ExecAction",
        uberParent: "ProbeAction",
        polymorphicDiscriminator: ProbeAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProbeAction.type.modelProperties), { command: {
                serializedName: "command",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const TCPSocketAction = {
    serializedName: "TCPSocketAction",
    type: {
        name: "Composite",
        className: "TCPSocketAction",
        uberParent: "ProbeAction",
        polymorphicDiscriminator: ProbeAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ProbeAction.type.modelProperties)
    }
};
const AcceleratorPublicSetting = {
    serializedName: "Public",
    type: {
        name: "Composite",
        className: "AcceleratorPublicSetting",
        uberParent: "AcceleratorAuthSetting",
        polymorphicDiscriminator: AcceleratorAuthSetting.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AcceleratorAuthSetting.type.modelProperties), { caCertResourceId: {
                serializedName: "caCertResourceId",
                type: {
                    name: "String"
                }
            } })
    }
};
const AcceleratorBasicAuthSetting = {
    serializedName: "BasicAuth",
    type: {
        name: "Composite",
        className: "AcceleratorBasicAuthSetting",
        uberParent: "AcceleratorAuthSetting",
        polymorphicDiscriminator: AcceleratorAuthSetting.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AcceleratorAuthSetting.type.modelProperties), { caCertResourceId: {
                serializedName: "caCertResourceId",
                type: {
                    name: "String"
                }
            }, username: {
                serializedName: "username",
                required: true,
                type: {
                    name: "String"
                }
            }, password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            } })
    }
};
const AcceleratorSshSetting = {
    serializedName: "SSH",
    type: {
        name: "Composite",
        className: "AcceleratorSshSetting",
        uberParent: "AcceleratorAuthSetting",
        polymorphicDiscriminator: AcceleratorAuthSetting.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AcceleratorAuthSetting.type.modelProperties), { hostKey: {
                serializedName: "hostKey",
                type: {
                    name: "String"
                }
            }, hostKeyAlgorithm: {
                serializedName: "hostKeyAlgorithm",
                type: {
                    name: "String"
                }
            }, privateKey: {
                serializedName: "privateKey",
                type: {
                    name: "String"
                }
            } })
    }
};
const ServiceResource = {
    type: {
        name: "Composite",
        className: "ServiceResource",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ClusterResourceProperties"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
const ConfigServerResource = {
    type: {
        name: "Composite",
        className: "ConfigServerResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ConfigServerProperties"
                }
            } })
    }
};
const ConfigurationServiceResource = {
    type: {
        name: "Composite",
        className: "ConfigurationServiceResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ConfigurationServiceProperties"
                }
            } })
    }
};
const ServiceRegistryResource = {
    type: {
        name: "Composite",
        className: "ServiceRegistryResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ServiceRegistryProperties"
                }
            } })
    }
};
const ApplicationLiveViewResource = {
    type: {
        name: "Composite",
        className: "ApplicationLiveViewResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ApplicationLiveViewProperties"
                }
            } })
    }
};
const DevToolPortalResource = {
    type: {
        name: "Composite",
        className: "DevToolPortalResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DevToolPortalProperties"
                }
            } })
    }
};
const ContainerRegistryResource = {
    type: {
        name: "Composite",
        className: "ContainerRegistryResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ContainerRegistryProperties"
                }
            } })
    }
};
const BuildService = {
    type: {
        name: "Composite",
        className: "BuildService",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BuildServiceProperties"
                }
            } })
    }
};
const Build = {
    type: {
        name: "Composite",
        className: "Build",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BuildProperties"
                }
            } })
    }
};
const BuildpackBindingResource = {
    type: {
        name: "Composite",
        className: "BuildpackBindingResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BuildpackBindingProperties"
                }
            } })
    }
};
const BuildResult = {
    type: {
        name: "Composite",
        className: "BuildResult",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BuildResultProperties"
                }
            } })
    }
};
const BuilderResource = {
    type: {
        name: "Composite",
        className: "BuilderResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BuilderProperties"
                }
            } })
    }
};
const SupportedBuildpackResource = {
    type: {
        name: "Composite",
        className: "SupportedBuildpackResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SupportedBuildpackResourceProperties"
                }
            } })
    }
};
const SupportedStackResource = {
    type: {
        name: "Composite",
        className: "SupportedStackResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SupportedStackResourceProperties"
                }
            } })
    }
};
const BuildServiceAgentPoolResource = {
    type: {
        name: "Composite",
        className: "BuildServiceAgentPoolResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BuildServiceAgentPoolProperties"
                }
            } })
    }
};
const MonitoringSettingResource = {
    type: {
        name: "Composite",
        className: "MonitoringSettingResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MonitoringSettingProperties"
                }
            } })
    }
};
const AppResource = {
    type: {
        name: "Composite",
        className: "AppResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AppResourceProperties"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ManagedIdentityProperties"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            } })
    }
};
const BindingResource = {
    type: {
        name: "Composite",
        className: "BindingResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "BindingResourceProperties"
                }
            } })
    }
};
const StorageResource = {
    type: {
        name: "Composite",
        className: "StorageResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "StorageProperties"
                }
            } })
    }
};
const CertificateResource = {
    type: {
        name: "Composite",
        className: "CertificateResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CertificateProperties"
                }
            } })
    }
};
const CustomDomainResource = {
    type: {
        name: "Composite",
        className: "CustomDomainResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CustomDomainProperties"
                }
            } })
    }
};
const DeploymentResource = {
    type: {
        name: "Composite",
        className: "DeploymentResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DeploymentResourceProperties"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
const GatewayResource = {
    type: {
        name: "Composite",
        className: "GatewayResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "GatewayProperties"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
const GatewayRouteConfigResource = {
    type: {
        name: "Composite",
        className: "GatewayRouteConfigResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "GatewayRouteConfigProperties"
                }
            } })
    }
};
const GatewayCustomDomainResource = {
    type: {
        name: "Composite",
        className: "GatewayCustomDomainResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "GatewayCustomDomainProperties"
                }
            } })
    }
};
const ApiPortalResource = {
    type: {
        name: "Composite",
        className: "ApiPortalResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ApiPortalProperties"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
const ApiPortalCustomDomainResource = {
    type: {
        name: "Composite",
        className: "ApiPortalCustomDomainResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ApiPortalCustomDomainProperties"
                }
            } })
    }
};
const ApplicationAcceleratorResource = {
    type: {
        name: "Composite",
        className: "ApplicationAcceleratorResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ApplicationAcceleratorProperties"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
const CustomizedAcceleratorResource = {
    type: {
        name: "Composite",
        className: "CustomizedAcceleratorResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CustomizedAcceleratorProperties"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
const PredefinedAcceleratorResource = {
    type: {
        name: "Composite",
        className: "PredefinedAcceleratorResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PredefinedAcceleratorProperties"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
const JarUploadedUserSourceInfo = {
    serializedName: "Jar",
    type: {
        name: "Composite",
        className: "JarUploadedUserSourceInfo",
        uberParent: "UploadedUserSourceInfo",
        polymorphicDiscriminator: UploadedUserSourceInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UploadedUserSourceInfo.type.modelProperties), { runtimeVersion: {
                serializedName: "runtimeVersion",
                type: {
                    name: "String"
                }
            }, jvmOptions: {
                serializedName: "jvmOptions",
                type: {
                    name: "String"
                }
            } })
    }
};
const SourceUploadedUserSourceInfo = {
    serializedName: "Source",
    type: {
        name: "Composite",
        className: "SourceUploadedUserSourceInfo",
        uberParent: "UploadedUserSourceInfo",
        polymorphicDiscriminator: UploadedUserSourceInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UploadedUserSourceInfo.type.modelProperties), { artifactSelector: {
                serializedName: "artifactSelector",
                type: {
                    name: "String"
                }
            }, runtimeVersion: {
                serializedName: "runtimeVersion",
                type: {
                    name: "String"
                }
            } })
    }
};
const NetCoreZipUploadedUserSourceInfo = {
    serializedName: "NetCoreZip",
    type: {
        name: "Composite",
        className: "NetCoreZipUploadedUserSourceInfo",
        uberParent: "UploadedUserSourceInfo",
        polymorphicDiscriminator: UploadedUserSourceInfo.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UploadedUserSourceInfo.type.modelProperties), { netCoreMainEntryPath: {
                serializedName: "netCoreMainEntryPath",
                type: {
                    name: "String"
                }
            }, runtimeVersion: {
                serializedName: "runtimeVersion",
                type: {
                    name: "String"
                }
            } })
    }
};
const BuildServiceDeleteBuildHeaders = {
    type: {
        name: "Composite",
        className: "BuildServiceDeleteBuildHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GatewaysUpdateCapacityHeaders = {
    type: {
        name: "Composite",
        className: "GatewaysUpdateCapacityHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GatewaysRestartHeaders = {
    type: {
        name: "Composite",
        className: "GatewaysRestartHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
let discriminators = {
    ContainerRegistryCredentials: ContainerRegistryCredentials,
    CustomPersistentDiskProperties: CustomPersistentDiskProperties,
    StorageProperties: StorageProperties,
    CertificateProperties: CertificateProperties,
    UserSourceInfo: UserSourceInfo,
    ProbeAction: ProbeAction,
    AcceleratorAuthSetting: AcceleratorAuthSetting,
    "ContainerRegistryCredentials.BasicAuth": ContainerRegistryBasicCredentials,
    "CustomPersistentDiskProperties.AzureFileVolume": AzureFileVolume,
    "StorageProperties.StorageAccount": StorageAccount,
    "CertificateProperties.KeyVaultCertificate": KeyVaultCertificateProperties,
    "CertificateProperties.ContentCertificate": ContentCertificateProperties,
    "UserSourceInfo.UploadedUserSourceInfo": UploadedUserSourceInfo,
    "UserSourceInfo.BuildResult": BuildResultUserSourceInfo,
    "UserSourceInfo.Container": CustomContainerUserSourceInfo,
    "ProbeAction.HTTPGetAction": HttpGetAction,
    "ProbeAction.ExecAction": ExecAction,
    "ProbeAction.TCPSocketAction": TCPSocketAction,
    "AcceleratorAuthSetting.Public": AcceleratorPublicSetting,
    "AcceleratorAuthSetting.BasicAuth": AcceleratorBasicAuthSetting,
    "AcceleratorAuthSetting.SSH": AcceleratorSshSetting,
    "UploadedUserSourceInfo.Jar": JarUploadedUserSourceInfo,
    "UploadedUserSourceInfo.Source": SourceUploadedUserSourceInfo,
    "UploadedUserSourceInfo.NetCoreZip": NetCoreZipUploadedUserSourceInfo
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ClusterResourceProperties: ClusterResourceProperties,
    NetworkProfile: NetworkProfile,
    NetworkProfileOutboundIPs: NetworkProfileOutboundIPs,
    RequiredTraffic: RequiredTraffic,
    IngressConfig: IngressConfig,
    ServiceVNetAddons: ServiceVNetAddons,
    MarketplaceResource: MarketplaceResource,
    Sku: Sku,
    Resource: Resource,
    SystemData: SystemData,
    CloudError: CloudError,
    CloudErrorBody: CloudErrorBody,
    TestKeys: TestKeys,
    RegenerateTestKeyRequestPayload: RegenerateTestKeyRequestPayload,
    ConfigServerProperties: ConfigServerProperties,
    ErrorModel: ErrorModel,
    ConfigServerSettings: ConfigServerSettings,
    ConfigServerGitProperty: ConfigServerGitProperty,
    GitPatternRepository: GitPatternRepository,
    ConfigServerSettingsValidateResult: ConfigServerSettingsValidateResult,
    ConfigServerSettingsErrorRecord: ConfigServerSettingsErrorRecord,
    ConfigurationServiceProperties: ConfigurationServiceProperties,
    ConfigurationServiceResourceRequests: ConfigurationServiceResourceRequests,
    ConfigurationServiceInstance: ConfigurationServiceInstance,
    ConfigurationServiceSettings: ConfigurationServiceSettings,
    ConfigurationServiceGitProperty: ConfigurationServiceGitProperty,
    ConfigurationServiceGitRepository: ConfigurationServiceGitRepository,
    ConfigurationServiceResourceCollection: ConfigurationServiceResourceCollection,
    ConfigurationServiceSettingsValidateResult: ConfigurationServiceSettingsValidateResult,
    ConfigurationServiceGitPropertyValidateResult: ConfigurationServiceGitPropertyValidateResult,
    ValidationMessages: ValidationMessages,
    ServiceRegistryProperties: ServiceRegistryProperties,
    ServiceRegistryResourceRequests: ServiceRegistryResourceRequests,
    ServiceRegistryInstance: ServiceRegistryInstance,
    ServiceRegistryResourceCollection: ServiceRegistryResourceCollection,
    ApplicationLiveViewResourceCollection: ApplicationLiveViewResourceCollection,
    ApplicationLiveViewProperties: ApplicationLiveViewProperties,
    ApplicationLiveViewComponent: ApplicationLiveViewComponent,
    ApplicationLiveViewResourceRequests: ApplicationLiveViewResourceRequests,
    ApplicationLiveViewInstance: ApplicationLiveViewInstance,
    DevToolPortalResourceCollection: DevToolPortalResourceCollection,
    DevToolPortalProperties: DevToolPortalProperties,
    DevToolPortalResourceRequests: DevToolPortalResourceRequests,
    DevToolPortalInstance: DevToolPortalInstance,
    DevToolPortalSsoProperties: DevToolPortalSsoProperties,
    DevToolPortalFeatureSettings: DevToolPortalFeatureSettings,
    DevToolPortalFeatureDetail: DevToolPortalFeatureDetail,
    ContainerRegistryResourceCollection: ContainerRegistryResourceCollection,
    ContainerRegistryProperties: ContainerRegistryProperties,
    ContainerRegistryCredentials: ContainerRegistryCredentials,
    BuildServiceCollection: BuildServiceCollection,
    BuildServiceProperties: BuildServiceProperties,
    BuildServicePropertiesResourceRequests: BuildServicePropertiesResourceRequests,
    BuildCollection: BuildCollection,
    BuildProperties: BuildProperties,
    TriggeredBuildResult: TriggeredBuildResult,
    BuildResourceRequests: BuildResourceRequests,
    BuildpackBindingResourceCollection: BuildpackBindingResourceCollection,
    BuildpackBindingProperties: BuildpackBindingProperties,
    BuildpackBindingLaunchProperties: BuildpackBindingLaunchProperties,
    BuildResultCollection: BuildResultCollection,
    BuildResultProperties: BuildResultProperties,
    BuildStageProperties: BuildStageProperties,
    BuildResultLog: BuildResultLog,
    BuilderProperties: BuilderProperties,
    StackProperties: StackProperties,
    BuildpacksGroupProperties: BuildpacksGroupProperties,
    BuildpackProperties: BuildpackProperties,
    BuilderResourceCollection: BuilderResourceCollection,
    ResourceUploadDefinition: ResourceUploadDefinition,
    SupportedBuildpacksCollection: SupportedBuildpacksCollection,
    SupportedBuildpackResourceProperties: SupportedBuildpackResourceProperties,
    SupportedStacksCollection: SupportedStacksCollection,
    SupportedStackResourceProperties: SupportedStackResourceProperties,
    BuildServiceAgentPoolResourceCollection: BuildServiceAgentPoolResourceCollection,
    BuildServiceAgentPoolProperties: BuildServiceAgentPoolProperties,
    BuildServiceAgentPoolSizeProperties: BuildServiceAgentPoolSizeProperties,
    MonitoringSettingProperties: MonitoringSettingProperties,
    ApplicationInsightsAgentVersions: ApplicationInsightsAgentVersions,
    AppResourceProperties: AppResourceProperties,
    TemporaryDisk: TemporaryDisk,
    PersistentDisk: PersistentDisk,
    CustomPersistentDiskResource: CustomPersistentDiskResource,
    CustomPersistentDiskProperties: CustomPersistentDiskProperties,
    LoadedCertificate: LoadedCertificate,
    AppVNetAddons: AppVNetAddons,
    IngressSettings: IngressSettings,
    IngressSettingsClientAuth: IngressSettingsClientAuth,
    Secret: Secret,
    ManagedIdentityProperties: ManagedIdentityProperties,
    UserAssignedManagedIdentity: UserAssignedManagedIdentity,
    AppResourceCollection: AppResourceCollection,
    ActiveDeploymentCollection: ActiveDeploymentCollection,
    BindingResourceProperties: BindingResourceProperties,
    BindingResourceCollection: BindingResourceCollection,
    StorageProperties: StorageProperties,
    StorageResourceCollection: StorageResourceCollection,
    CertificateProperties: CertificateProperties,
    CertificateResourceCollection: CertificateResourceCollection,
    NameAvailabilityParameters: NameAvailabilityParameters,
    NameAvailability: NameAvailability,
    CustomDomainProperties: CustomDomainProperties,
    CustomDomainResourceCollection: CustomDomainResourceCollection,
    CustomDomainValidatePayload: CustomDomainValidatePayload,
    CustomDomainValidateResult: CustomDomainValidateResult,
    DeploymentResourceProperties: DeploymentResourceProperties,
    UserSourceInfo: UserSourceInfo,
    DeploymentSettings: DeploymentSettings,
    ResourceRequests: ResourceRequests,
    Probe: Probe,
    ProbeAction: ProbeAction,
    Scale: Scale,
    ScaleRule: ScaleRule,
    QueueScaleRule: QueueScaleRule,
    ScaleRuleAuth: ScaleRuleAuth,
    CustomScaleRule: CustomScaleRule,
    HttpScaleRule: HttpScaleRule,
    TcpScaleRule: TcpScaleRule,
    ContainerProbeSettings: ContainerProbeSettings,
    DeploymentInstance: DeploymentInstance,
    DeploymentResourceCollection: DeploymentResourceCollection,
    DeploymentList: DeploymentList,
    RemoteDebuggingPayload: RemoteDebuggingPayload,
    RemoteDebugging: RemoteDebugging,
    LogFileUrlResponse: LogFileUrlResponse,
    DiagnosticParameters: DiagnosticParameters,
    ServiceResourceList: ServiceResourceList,
    AvailableOperations: AvailableOperations,
    OperationDetail: OperationDetail,
    OperationDisplay: OperationDisplay,
    OperationProperties: OperationProperties,
    ServiceSpecification: ServiceSpecification,
    LogSpecification: LogSpecification,
    MetricSpecification: MetricSpecification,
    MetricDimension: MetricDimension,
    AvailableRuntimeVersions: AvailableRuntimeVersions,
    SupportedRuntimeVersion: SupportedRuntimeVersion,
    ResourceSkuCollection: ResourceSkuCollection,
    ResourceSku: ResourceSku,
    SkuCapacity: SkuCapacity,
    ResourceSkuLocationInfo: ResourceSkuLocationInfo,
    ResourceSkuZoneDetails: ResourceSkuZoneDetails,
    ResourceSkuCapabilities: ResourceSkuCapabilities,
    ResourceSkuRestrictions: ResourceSkuRestrictions,
    ResourceSkuRestrictionInfo: ResourceSkuRestrictionInfo,
    GatewayProperties: GatewayProperties,
    SsoProperties: SsoProperties,
    GatewayApiMetadataProperties: GatewayApiMetadataProperties,
    GatewayCorsProperties: GatewayCorsProperties,
    GatewayPropertiesClientAuth: GatewayPropertiesClientAuth,
    GatewayPropertiesEnvironmentVariables: GatewayPropertiesEnvironmentVariables,
    GatewayResourceRequests: GatewayResourceRequests,
    GatewayInstance: GatewayInstance,
    GatewayOperatorProperties: GatewayOperatorProperties,
    GatewayOperatorResourceRequests: GatewayOperatorResourceRequests,
    SkuObject: SkuObject,
    GatewayResourceCollection: GatewayResourceCollection,
    GatewayRouteConfigProperties: GatewayRouteConfigProperties,
    GatewayRouteConfigOpenApiProperties: GatewayRouteConfigOpenApiProperties,
    GatewayApiRoute: GatewayApiRoute,
    GatewayRouteConfigResourceCollection: GatewayRouteConfigResourceCollection,
    GatewayCustomDomainProperties: GatewayCustomDomainProperties,
    GatewayCustomDomainResourceCollection: GatewayCustomDomainResourceCollection,
    ApiPortalProperties: ApiPortalProperties,
    ApiPortalResourceRequests: ApiPortalResourceRequests,
    ApiPortalInstance: ApiPortalInstance,
    ApiPortalResourceCollection: ApiPortalResourceCollection,
    ApiPortalCustomDomainProperties: ApiPortalCustomDomainProperties,
    ApiPortalCustomDomainResourceCollection: ApiPortalCustomDomainResourceCollection,
    ApplicationAcceleratorResourceCollection: ApplicationAcceleratorResourceCollection,
    ApplicationAcceleratorProperties: ApplicationAcceleratorProperties,
    ApplicationAcceleratorComponent: ApplicationAcceleratorComponent,
    ApplicationAcceleratorResourceRequests: ApplicationAcceleratorResourceRequests,
    ApplicationAcceleratorInstance: ApplicationAcceleratorInstance,
    CustomizedAcceleratorResourceCollection: CustomizedAcceleratorResourceCollection,
    CustomizedAcceleratorProperties: CustomizedAcceleratorProperties,
    AcceleratorGitRepository: AcceleratorGitRepository,
    AcceleratorAuthSetting: AcceleratorAuthSetting,
    CustomizedAcceleratorValidateResult: CustomizedAcceleratorValidateResult,
    PredefinedAcceleratorResourceCollection: PredefinedAcceleratorResourceCollection,
    PredefinedAcceleratorProperties: PredefinedAcceleratorProperties,
    CustomContainer: CustomContainer,
    ImageRegistryCredential: ImageRegistryCredential,
    TrackedResource: TrackedResource,
    ProxyResource: ProxyResource,
    ContainerRegistryBasicCredentials: ContainerRegistryBasicCredentials,
    AzureFileVolume: AzureFileVolume,
    StorageAccount: StorageAccount,
    KeyVaultCertificateProperties: KeyVaultCertificateProperties,
    ContentCertificateProperties: ContentCertificateProperties,
    UploadedUserSourceInfo: UploadedUserSourceInfo,
    BuildResultUserSourceInfo: BuildResultUserSourceInfo,
    CustomContainerUserSourceInfo: CustomContainerUserSourceInfo,
    HttpGetAction: HttpGetAction,
    ExecAction: ExecAction,
    TCPSocketAction: TCPSocketAction,
    AcceleratorPublicSetting: AcceleratorPublicSetting,
    AcceleratorBasicAuthSetting: AcceleratorBasicAuthSetting,
    AcceleratorSshSetting: AcceleratorSshSetting,
    ServiceResource: ServiceResource,
    ConfigServerResource: ConfigServerResource,
    ConfigurationServiceResource: ConfigurationServiceResource,
    ServiceRegistryResource: ServiceRegistryResource,
    ApplicationLiveViewResource: ApplicationLiveViewResource,
    DevToolPortalResource: DevToolPortalResource,
    ContainerRegistryResource: ContainerRegistryResource,
    BuildService: BuildService,
    Build: Build,
    BuildpackBindingResource: BuildpackBindingResource,
    BuildResult: BuildResult,
    BuilderResource: BuilderResource,
    SupportedBuildpackResource: SupportedBuildpackResource,
    SupportedStackResource: SupportedStackResource,
    BuildServiceAgentPoolResource: BuildServiceAgentPoolResource,
    MonitoringSettingResource: MonitoringSettingResource,
    AppResource: AppResource,
    BindingResource: BindingResource,
    StorageResource: StorageResource,
    CertificateResource: CertificateResource,
    CustomDomainResource: CustomDomainResource,
    DeploymentResource: DeploymentResource,
    GatewayResource: GatewayResource,
    GatewayRouteConfigResource: GatewayRouteConfigResource,
    GatewayCustomDomainResource: GatewayCustomDomainResource,
    ApiPortalResource: ApiPortalResource,
    ApiPortalCustomDomainResource: ApiPortalCustomDomainResource,
    ApplicationAcceleratorResource: ApplicationAcceleratorResource,
    CustomizedAcceleratorResource: CustomizedAcceleratorResource,
    PredefinedAcceleratorResource: PredefinedAcceleratorResource,
    JarUploadedUserSourceInfo: JarUploadedUserSourceInfo,
    SourceUploadedUserSourceInfo: SourceUploadedUserSourceInfo,
    NetCoreZipUploadedUserSourceInfo: NetCoreZipUploadedUserSourceInfo,
    BuildServiceDeleteBuildHeaders: BuildServiceDeleteBuildHeaders,
    GatewaysUpdateCapacityHeaders: GatewaysUpdateCapacityHeaders,
    GatewaysRestartHeaders: GatewaysRestartHeaders,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-03-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const serviceName = {
    parameterPath: "serviceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z][a-z0-9-]*[a-z0-9]$")
        },
        serializedName: "serviceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const resource = {
    parameterPath: "resource",
    mapper: ServiceResource
};
const regenerateTestKeyRequest = {
    parameterPath: "regenerateTestKeyRequest",
    mapper: RegenerateTestKeyRequestPayload
};
const availabilityParameters = {
    parameterPath: "availabilityParameters",
    mapper: NameAvailabilityParameters
};
const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const configServerResource = {
    parameterPath: "configServerResource",
    mapper: ConfigServerResource
};
const configServerSettings = {
    parameterPath: "configServerSettings",
    mapper: ConfigServerSettings
};
const configurationServiceName = {
    parameterPath: "configurationServiceName",
    mapper: {
        serializedName: "configurationServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const configurationServiceResource = {
    parameterPath: "configurationServiceResource",
    mapper: ConfigurationServiceResource
};
const settings = {
    parameterPath: "settings",
    mapper: ConfigurationServiceSettings
};
const serviceRegistryName = {
    parameterPath: "serviceRegistryName",
    mapper: {
        serializedName: "serviceRegistryName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const applicationLiveViewName = {
    parameterPath: "applicationLiveViewName",
    mapper: {
        serializedName: "applicationLiveViewName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const applicationLiveViewResource = {
    parameterPath: "applicationLiveViewResource",
    mapper: ApplicationLiveViewResource
};
const devToolPortalName = {
    parameterPath: "devToolPortalName",
    mapper: {
        serializedName: "devToolPortalName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const devToolPortalResource = {
    parameterPath: "devToolPortalResource",
    mapper: DevToolPortalResource
};
const containerRegistryName = {
    parameterPath: "containerRegistryName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z][a-z0-9-]*[a-z0-9]$")
        },
        serializedName: "containerRegistryName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const containerRegistryResource = {
    parameterPath: "containerRegistryResource",
    mapper: ContainerRegistryResource
};
const buildServiceName = {
    parameterPath: "buildServiceName",
    mapper: {
        serializedName: "buildServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const buildService = {
    parameterPath: "buildService",
    mapper: BuildService
};
const buildName = {
    parameterPath: "buildName",
    mapper: {
        serializedName: "buildName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const build = {
    parameterPath: "build",
    mapper: Build
};
const buildResultName = {
    parameterPath: "buildResultName",
    mapper: {
        serializedName: "buildResultName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const buildpackName = {
    parameterPath: "buildpackName",
    mapper: {
        serializedName: "buildpackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const stackName = {
    parameterPath: "stackName",
    mapper: {
        serializedName: "stackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const builderName = {
    parameterPath: "builderName",
    mapper: {
        serializedName: "builderName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const buildpackBindingName = {
    parameterPath: "buildpackBindingName",
    mapper: {
        serializedName: "buildpackBindingName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const buildpackBinding = {
    parameterPath: "buildpackBinding",
    mapper: BuildpackBindingResource
};
const builderResource = {
    parameterPath: "builderResource",
    mapper: BuilderResource
};
const agentPoolName = {
    parameterPath: "agentPoolName",
    mapper: {
        serializedName: "agentPoolName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const agentPoolResource = {
    parameterPath: "agentPoolResource",
    mapper: BuildServiceAgentPoolResource
};
const monitoringSettingResource = {
    parameterPath: "monitoringSettingResource",
    mapper: MonitoringSettingResource
};
const appName = {
    parameterPath: "appName",
    mapper: {
        serializedName: "appName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const syncStatus = {
    parameterPath: ["options", "syncStatus"],
    mapper: {
        serializedName: "syncStatus",
        type: {
            name: "String"
        }
    }
};
const appResource = {
    parameterPath: "appResource",
    mapper: AppResource
};
const activeDeploymentCollection = {
    parameterPath: "activeDeploymentCollection",
    mapper: ActiveDeploymentCollection
};
const validatePayload = {
    parameterPath: "validatePayload",
    mapper: CustomDomainValidatePayload
};
const bindingName = {
    parameterPath: "bindingName",
    mapper: {
        serializedName: "bindingName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const bindingResource = {
    parameterPath: "bindingResource",
    mapper: BindingResource
};
const storageName = {
    parameterPath: "storageName",
    mapper: {
        serializedName: "storageName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const storageResource = {
    parameterPath: "storageResource",
    mapper: StorageResource
};
const certificateName = {
    parameterPath: "certificateName",
    mapper: {
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const certificateResource = {
    parameterPath: "certificateResource",
    mapper: CertificateResource
};
const domainName = {
    parameterPath: "domainName",
    mapper: {
        serializedName: "domainName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const domainResource = {
    parameterPath: "domainResource",
    mapper: CustomDomainResource
};
const deploymentName = {
    parameterPath: "deploymentName",
    mapper: {
        serializedName: "deploymentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const deploymentResource = {
    parameterPath: "deploymentResource",
    mapper: DeploymentResource
};
const version = {
    parameterPath: ["options", "version"],
    mapper: {
        serializedName: "version",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: "Multi"
};
const remoteDebuggingPayload = {
    parameterPath: ["options", "remoteDebuggingPayload"],
    mapper: RemoteDebuggingPayload
};
const diagnosticParameters = {
    parameterPath: "diagnosticParameters",
    mapper: DiagnosticParameters
};
const gatewayName = {
    parameterPath: "gatewayName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-z][a-z0-9]*$")
        },
        serializedName: "gatewayName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const gatewayResource = {
    parameterPath: "gatewayResource",
    mapper: GatewayResource
};
const gatewayCapacityResource = {
    parameterPath: "gatewayCapacityResource",
    mapper: SkuObject
};
const routeConfigName = {
    parameterPath: "routeConfigName",
    mapper: {
        serializedName: "routeConfigName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const gatewayRouteConfigResource = {
    parameterPath: "gatewayRouteConfigResource",
    mapper: GatewayRouteConfigResource
};
const gatewayCustomDomainResource = {
    parameterPath: "gatewayCustomDomainResource",
    mapper: GatewayCustomDomainResource
};
const apiPortalName = {
    parameterPath: "apiPortalName",
    mapper: {
        serializedName: "apiPortalName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiPortalResource = {
    parameterPath: "apiPortalResource",
    mapper: ApiPortalResource
};
const apiPortalCustomDomainResource = {
    parameterPath: "apiPortalCustomDomainResource",
    mapper: ApiPortalCustomDomainResource
};
const applicationAcceleratorName = {
    parameterPath: "applicationAcceleratorName",
    mapper: {
        serializedName: "applicationAcceleratorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const applicationAcceleratorResource = {
    parameterPath: "applicationAcceleratorResource",
    mapper: ApplicationAcceleratorResource
};
const customizedAcceleratorName = {
    parameterPath: "customizedAcceleratorName",
    mapper: {
        serializedName: "customizedAcceleratorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const customizedAcceleratorResource = {
    parameterPath: "customizedAcceleratorResource",
    mapper: CustomizedAcceleratorResource
};
const properties = {
    parameterPath: "properties",
    mapper: CustomizedAcceleratorProperties
};
const predefinedAcceleratorName = {
    parameterPath: "predefinedAcceleratorName",
    mapper: {
        serializedName: "predefinedAcceleratorName",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Services operations. */
class ServicesImpl {
    /**
     * Initialize a new instance of the class Services class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param options The options parameters.
     */
    list(resourceGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get a Service and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, getOperationSpec$o);
    }
    /**
     * Create a new Service or update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, resource, options },
                spec: createOrUpdateOperationSpec$l
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new Service or update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, resource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, options },
                spec: deleteOperationSpec$j
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serviceName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, resource, options },
                spec: updateOperationSpec$4
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serviceName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serviceName, resource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List test keys for a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    listTestKeys(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listTestKeysOperationSpec);
    }
    /**
     * Regenerate a test key for a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param regenerateTestKeyRequest Parameters for the operation
     * @param options The options parameters.
     */
    regenerateTestKey(resourceGroupName, serviceName, regenerateTestKeyRequest, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, regenerateTestKeyRequest, options }, regenerateTestKeyOperationSpec);
    }
    /**
     * Disable test endpoint functionality for a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    disableTestEndpoint(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, disableTestEndpointOperationSpec);
    }
    /**
     * Enable test endpoint functionality for a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    enableTestEndpoint(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, enableTestEndpointOperationSpec);
    }
    /**
     * Stop a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName, serviceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, options },
                spec: stopOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Stop a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName, serviceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStop(resourceGroupName, serviceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Start a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName, serviceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, options },
                spec: startOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Start a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName, serviceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStart(resourceGroupName, serviceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Checks that the resource name is valid and is not already in use.
     * @param location the region
     * @param availabilityParameters Parameters supplied to the operation.
     * @param options The options parameters.
     */
    checkNameAvailability(location, availabilityParameters, options) {
        return this.client.sendOperationRequest({ location, availabilityParameters, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Handles requests to list all resources in a subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Handles requests to list all resources in a resource group.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param options The options parameters.
     */
    _list(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec$o);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listNextOperationSpec$o);
    }
}
// Operation Specifications
const serializer$s = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$o = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$s
};
const createOrUpdateOperationSpec$l = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ServiceResource
        },
        201: {
            bodyMapper: ServiceResource
        },
        202: {
            bodyMapper: ServiceResource
        },
        204: {
            bodyMapper: ServiceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: resource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$s
};
const deleteOperationSpec$j = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$s
};
const updateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ServiceResource
        },
        201: {
            bodyMapper: ServiceResource
        },
        202: {
            bodyMapper: ServiceResource
        },
        204: {
            bodyMapper: ServiceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: resource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$s
};
const listTestKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/listTestKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TestKeys
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$s
};
const regenerateTestKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/regenerateTestKey",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TestKeys
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: regenerateTestKeyRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$s
};
const disableTestEndpointOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/disableTestEndpoint",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$s
};
const enableTestEndpointOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/enableTestEndpoint",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TestKeys
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$s
};
const stopOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        404: {
            isError: true
        },
        409: {
            isError: true
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$s
};
const startOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        404: {
            isError: true
        },
        409: {
            isError: true
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$s
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/locations/{location}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: NameAvailability
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: availabilityParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$s
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/Spring",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$s
};
const listOperationSpec$o = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$s
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$s
};
const listNextOperationSpec$o = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceResourceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$s
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ConfigServers operations. */
class ConfigServersImpl {
    /**
     * Initialize a new instance of the class ConfigServers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the config server and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, getOperationSpec$n);
    }
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePut(resourceGroupName, serviceName, configServerResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, configServerResource, options },
                spec: updatePutOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePutAndWait(resourceGroupName, serviceName, configServerResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdatePut(resourceGroupName, serviceName, configServerResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePatch(resourceGroupName, serviceName, configServerResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, configServerResource, options },
                spec: updatePatchOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePatchAndWait(resourceGroupName, serviceName, configServerResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdatePatch(resourceGroupName, serviceName, configServerResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Check if the config server settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerSettings Config server settings to be validated
     * @param options The options parameters.
     */
    beginValidate(resourceGroupName, serviceName, configServerSettings, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, configServerSettings, options },
                spec: validateOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Check if the config server settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerSettings Config server settings to be validated
     * @param options The options parameters.
     */
    beginValidateAndWait(resourceGroupName, serviceName, configServerSettings, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginValidate(resourceGroupName, serviceName, configServerSettings, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$r = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$n = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigServerResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$r
};
const updatePutOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConfigServerResource
        },
        201: {
            bodyMapper: ConfigServerResource
        },
        202: {
            bodyMapper: ConfigServerResource
        },
        204: {
            bodyMapper: ConfigServerResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: configServerResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$r
};
const updatePatchOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ConfigServerResource
        },
        201: {
            bodyMapper: ConfigServerResource
        },
        202: {
            bodyMapper: ConfigServerResource
        },
        204: {
            bodyMapper: ConfigServerResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: configServerResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$r
};
const validateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/validate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ConfigServerSettingsValidateResult
        },
        201: {
            bodyMapper: ConfigServerSettingsValidateResult
        },
        202: {
            bodyMapper: ConfigServerSettingsValidateResult
        },
        204: {
            bodyMapper: ConfigServerSettingsValidateResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: configServerSettings,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$r
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigurationServices operations. */
class ConfigurationServicesImpl {
    /**
     * Initialize a new instance of the class ConfigurationServices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the Application Configuration Service and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, configurationServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, configurationServiceName, options }, getOperationSpec$m);
    }
    /**
     * Create the default Application Configuration Service or update the existing Application
     * Configuration Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param configurationServiceResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, configurationServiceName, configurationServiceResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    configurationServiceName,
                    configurationServiceResource,
                    options
                },
                spec: createOrUpdateOperationSpec$k
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create the default Application Configuration Service or update the existing Application
     * Configuration Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param configurationServiceResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, configurationServiceName, configurationServiceResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, configurationServiceName, configurationServiceResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Disable the default Application Configuration Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, configurationServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    configurationServiceName,
                    options
                },
                spec: deleteOperationSpec$i
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Disable the default Application Configuration Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, configurationServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, configurationServiceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$n);
    }
    /**
     * Check if the Application Configuration Service settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param settings Application Configuration Service settings to be validated
     * @param options The options parameters.
     */
    beginValidate(resourceGroupName, serviceName, configurationServiceName, settings, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    configurationServiceName,
                    settings,
                    options
                },
                spec: validateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Check if the Application Configuration Service settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configurationServiceName The name of Application Configuration Service.
     * @param settings Application Configuration Service settings to be validated
     * @param options The options parameters.
     */
    beginValidateAndWait(resourceGroupName, serviceName, configurationServiceName, settings, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginValidate(resourceGroupName, serviceName, configurationServiceName, settings, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$n);
    }
}
// Operation Specifications
const serializer$q = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$m = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configurationServices/{configurationServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationServiceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        configurationServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$q
};
const createOrUpdateOperationSpec$k = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configurationServices/{configurationServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConfigurationServiceResource
        },
        201: {
            bodyMapper: ConfigurationServiceResource
        },
        202: {
            bodyMapper: ConfigurationServiceResource
        },
        204: {
            bodyMapper: ConfigurationServiceResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: configurationServiceResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        configurationServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$q
};
const deleteOperationSpec$i = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configurationServices/{configurationServiceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        configurationServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$q
};
const listOperationSpec$n = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configurationServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationServiceResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$q
};
const validateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configurationServices/{configurationServiceName}/validate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ConfigurationServiceSettingsValidateResult
        },
        201: {
            bodyMapper: ConfigurationServiceSettingsValidateResult
        },
        202: {
            bodyMapper: ConfigurationServiceSettingsValidateResult
        },
        204: {
            bodyMapper: ConfigurationServiceSettingsValidateResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: settings,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        configurationServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$q
};
const listNextOperationSpec$n = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationServiceResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$q
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ServiceRegistries operations. */
class ServiceRegistriesImpl {
    /**
     * Initialize a new instance of the class ServiceRegistries class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the Service Registry and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, serviceRegistryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, serviceRegistryName, options }, getOperationSpec$l);
    }
    /**
     * Create the default Service Registry or update the existing Service Registry.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, serviceRegistryName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, serviceRegistryName, options },
                spec: createOrUpdateOperationSpec$j
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create the default Service Registry or update the existing Service Registry.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, serviceRegistryName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, serviceRegistryName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Disable the default Service Registry.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, serviceRegistryName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, serviceRegistryName, options },
                spec: deleteOperationSpec$h
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Disable the default Service Registry.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param serviceRegistryName The name of Service Registry.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, serviceRegistryName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, serviceRegistryName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$m);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$m);
    }
}
// Operation Specifications
const serializer$p = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$l = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/serviceRegistries/{serviceRegistryName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceRegistryResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        serviceRegistryName
    ],
    headerParameters: [accept],
    serializer: serializer$p
};
const createOrUpdateOperationSpec$j = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/serviceRegistries/{serviceRegistryName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ServiceRegistryResource
        },
        201: {
            bodyMapper: ServiceRegistryResource
        },
        202: {
            bodyMapper: ServiceRegistryResource
        },
        204: {
            bodyMapper: ServiceRegistryResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        serviceRegistryName
    ],
    headerParameters: [accept],
    serializer: serializer$p
};
const deleteOperationSpec$h = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/serviceRegistries/{serviceRegistryName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        serviceRegistryName
    ],
    headerParameters: [accept],
    serializer: serializer$p
};
const listOperationSpec$m = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/serviceRegistries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceRegistryResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$p
};
const listNextOperationSpec$m = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServiceRegistryResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$p
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ApplicationLiveViews operations. */
class ApplicationLiveViewsImpl {
    /**
     * Initialize a new instance of the class ApplicationLiveViews class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$l);
    }
    /**
     * Get the Application Live  and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationLiveViewName The name of Application Live View.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, applicationLiveViewName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, applicationLiveViewName, options }, getOperationSpec$k);
    }
    /**
     * Create the default Application Live View or update the existing Application Live View.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationLiveViewName The name of Application Live View.
     * @param applicationLiveViewResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, applicationLiveViewName, applicationLiveViewResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    applicationLiveViewName,
                    applicationLiveViewResource,
                    options
                },
                spec: createOrUpdateOperationSpec$i
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create the default Application Live View or update the existing Application Live View.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationLiveViewName The name of Application Live View.
     * @param applicationLiveViewResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, applicationLiveViewName, applicationLiveViewResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, applicationLiveViewName, applicationLiveViewResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Disable the default Application Live View.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationLiveViewName The name of Application Live View.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, applicationLiveViewName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    applicationLiveViewName,
                    options
                },
                spec: deleteOperationSpec$g
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Disable the default Application Live View.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationLiveViewName The name of Application Live View.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, applicationLiveViewName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, applicationLiveViewName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$l);
    }
}
// Operation Specifications
const serializer$o = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$l = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationLiveViews",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationLiveViewResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$o
};
const getOperationSpec$k = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationLiveViews/{applicationLiveViewName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationLiveViewResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationLiveViewName
    ],
    headerParameters: [accept],
    serializer: serializer$o
};
const createOrUpdateOperationSpec$i = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationLiveViews/{applicationLiveViewName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ApplicationLiveViewResource
        },
        201: {
            bodyMapper: ApplicationLiveViewResource
        },
        202: {
            bodyMapper: ApplicationLiveViewResource
        },
        204: {
            bodyMapper: ApplicationLiveViewResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: applicationLiveViewResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationLiveViewName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$o
};
const deleteOperationSpec$g = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationLiveViews/{applicationLiveViewName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationLiveViewName
    ],
    headerParameters: [accept],
    serializer: serializer$o
};
const listNextOperationSpec$l = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationLiveViewResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$o
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DevToolPortals operations. */
class DevToolPortalsImpl {
    /**
     * Initialize a new instance of the class DevToolPortals class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$k);
    }
    /**
     * Get the Application Live  and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param devToolPortalName The name of Dev Tool Portal.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, devToolPortalName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, devToolPortalName, options }, getOperationSpec$j);
    }
    /**
     * Create the default Dev Tool Portal or update the existing Dev Tool Portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param devToolPortalName The name of Dev Tool Portal.
     * @param devToolPortalResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, devToolPortalName, devToolPortalResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    devToolPortalName,
                    devToolPortalResource,
                    options
                },
                spec: createOrUpdateOperationSpec$h
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create the default Dev Tool Portal or update the existing Dev Tool Portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param devToolPortalName The name of Dev Tool Portal.
     * @param devToolPortalResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, devToolPortalName, devToolPortalResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, devToolPortalName, devToolPortalResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Disable the default Dev Tool Portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param devToolPortalName The name of Dev Tool Portal.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, devToolPortalName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, devToolPortalName, options },
                spec: deleteOperationSpec$f
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Disable the default Dev Tool Portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param devToolPortalName The name of Dev Tool Portal.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, devToolPortalName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, devToolPortalName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$k);
    }
}
// Operation Specifications
const serializer$n = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$k = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/DevToolPortals",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DevToolPortalResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$n
};
const getOperationSpec$j = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/DevToolPortals/{devToolPortalName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DevToolPortalResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        devToolPortalName
    ],
    headerParameters: [accept],
    serializer: serializer$n
};
const createOrUpdateOperationSpec$h = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/DevToolPortals/{devToolPortalName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DevToolPortalResource
        },
        201: {
            bodyMapper: DevToolPortalResource
        },
        202: {
            bodyMapper: DevToolPortalResource
        },
        204: {
            bodyMapper: DevToolPortalResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: devToolPortalResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        devToolPortalName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$n
};
const deleteOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/DevToolPortals/{devToolPortalName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        devToolPortalName
    ],
    headerParameters: [accept],
    serializer: serializer$n
};
const listNextOperationSpec$k = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DevToolPortalResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$n
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ContainerRegistries operations. */
class ContainerRegistriesImpl {
    /**
     * Initialize a new instance of the class ContainerRegistries class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List container registries resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List container registries resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$j);
    }
    /**
     * Get the container registries resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param containerRegistryName The name of the container registry.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, containerRegistryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, containerRegistryName, options }, getOperationSpec$i);
    }
    /**
     * Create or update container registry resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param containerRegistryName The name of the container registry.
     * @param containerRegistryResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, containerRegistryName, containerRegistryResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    containerRegistryName,
                    containerRegistryResource,
                    options
                },
                spec: createOrUpdateOperationSpec$g
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update container registry resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param containerRegistryName The name of the container registry.
     * @param containerRegistryResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, containerRegistryName, containerRegistryResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, containerRegistryName, containerRegistryResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$j);
    }
}
// Operation Specifications
const serializer$m = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$j = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/containerRegistries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContainerRegistryResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$m
};
const getOperationSpec$i = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/containerRegistries/{containerRegistryName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContainerRegistryResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        containerRegistryName
    ],
    headerParameters: [accept],
    serializer: serializer$m
};
const createOrUpdateOperationSpec$g = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/containerRegistries/{containerRegistryName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ContainerRegistryResource
        },
        201: {
            bodyMapper: ContainerRegistryResource
        },
        202: {
            bodyMapper: ContainerRegistryResource
        },
        204: {
            bodyMapper: ContainerRegistryResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: containerRegistryResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        containerRegistryName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$m
};
const listNextOperationSpec$j = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContainerRegistryResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$m
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BuildServiceOperations operations. */
class BuildServiceOperationsImpl {
    /**
     * Initialize a new instance of the class BuildServiceOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List build services resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    listBuildServices(resourceGroupName, serviceName, options) {
        const iter = this.listBuildServicesPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBuildServicesPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listBuildServicesPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBuildServicesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBuildServices(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBuildServicesNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBuildServicesPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBuildServicesPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBuildServicesPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List KPack builds.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    listBuilds(resourceGroupName, serviceName, buildServiceName, options) {
        const iter = this.listBuildsPagingAll(resourceGroupName, serviceName, buildServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBuildsPagingPage(resourceGroupName, serviceName, buildServiceName, options, settings);
            }
        };
    }
    listBuildsPagingPage(resourceGroupName, serviceName, buildServiceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBuildsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBuilds(resourceGroupName, serviceName, buildServiceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBuildsNext(resourceGroupName, serviceName, buildServiceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBuildsPagingAll(resourceGroupName, serviceName, buildServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBuildsPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBuildsPagingPage(resourceGroupName, serviceName, buildServiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List KPack build results.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    listBuildResults(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        const iter = this.listBuildResultsPagingAll(resourceGroupName, serviceName, buildServiceName, buildName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBuildResultsPagingPage(resourceGroupName, serviceName, buildServiceName, buildName, options, settings);
            }
        };
    }
    listBuildResultsPagingPage(resourceGroupName, serviceName, buildServiceName, buildName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBuildResultsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBuildResults(resourceGroupName, serviceName, buildServiceName, buildName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBuildResultsNext(resourceGroupName, serviceName, buildServiceName, buildName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBuildResultsPagingAll(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBuildResultsPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBuildResultsPagingPage(resourceGroupName, serviceName, buildServiceName, buildName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * List build services resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _listBuildServices(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listBuildServicesOperationSpec);
    }
    /**
     * Get a build service resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    getBuildService(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, getBuildServiceOperationSpec);
    }
    /**
     * Create a build service resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildService Parameters for the create operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, buildServiceName, buildService, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    buildServiceName,
                    buildService,
                    options
                },
                spec: createOrUpdateOperationSpec$f
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a build service resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildService Parameters for the create operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, buildServiceName, buildService, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, buildServiceName, buildService, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List KPack builds.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    _listBuilds(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listBuildsOperationSpec);
    }
    /**
     * Get a KPack build.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    getBuild(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, buildName, options }, getBuildOperationSpec);
    }
    /**
     * Create or update a KPack build.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param build Parameters for the create or update operation
     * @param options The options parameters.
     */
    createOrUpdateBuild(resourceGroupName, serviceName, buildServiceName, buildName, build, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildName,
            build,
            options
        }, createOrUpdateBuildOperationSpec);
    }
    /**
     * delete a KPack build.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    beginDeleteBuild(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    buildServiceName,
                    buildName,
                    options
                },
                spec: deleteBuildOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * delete a KPack build.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    beginDeleteBuildAndWait(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteBuild(resourceGroupName, serviceName, buildServiceName, buildName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List KPack build results.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param options The options parameters.
     */
    _listBuildResults(resourceGroupName, serviceName, buildServiceName, buildName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, buildName, options }, listBuildResultsOperationSpec);
    }
    /**
     * Get a KPack build result.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param buildResultName The name of the build result resource.
     * @param options The options parameters.
     */
    getBuildResult(resourceGroupName, serviceName, buildServiceName, buildName, buildResultName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildName,
            buildResultName,
            options
        }, getBuildResultOperationSpec);
    }
    /**
     * Get a KPack build result log download URL.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param buildResultName The name of the build result resource.
     * @param options The options parameters.
     */
    getBuildResultLog(resourceGroupName, serviceName, buildServiceName, buildName, buildResultName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildName,
            buildResultName,
            options
        }, getBuildResultLogOperationSpec);
    }
    /**
     * Get an resource upload URL for build service, which may be artifacts or source archive.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    getResourceUploadUrl(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, getResourceUploadUrlOperationSpec$1);
    }
    /**
     * Get all supported buildpacks.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    listSupportedBuildpacks(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listSupportedBuildpacksOperationSpec);
    }
    /**
     * Get the supported buildpack resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildpackName The name of the buildpack resource.
     * @param options The options parameters.
     */
    getSupportedBuildpack(resourceGroupName, serviceName, buildServiceName, buildpackName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildpackName,
            options
        }, getSupportedBuildpackOperationSpec);
    }
    /**
     * Get all supported stacks.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    listSupportedStacks(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listSupportedStacksOperationSpec);
    }
    /**
     * Get the supported stack resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param stackName The name of the stack resource.
     * @param options The options parameters.
     */
    getSupportedStack(resourceGroupName, serviceName, buildServiceName, stackName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, stackName, options }, getSupportedStackOperationSpec);
    }
    /**
     * ListBuildServicesNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the ListBuildServices method.
     * @param options The options parameters.
     */
    _listBuildServicesNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listBuildServicesNextOperationSpec);
    }
    /**
     * ListBuildsNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param nextLink The nextLink from the previous successful call to the ListBuilds method.
     * @param options The options parameters.
     */
    _listBuildsNext(resourceGroupName, serviceName, buildServiceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, nextLink, options }, listBuildsNextOperationSpec);
    }
    /**
     * ListBuildResultsNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param buildName The name of the build resource.
     * @param nextLink The nextLink from the previous successful call to the ListBuildResults method.
     * @param options The options parameters.
     */
    _listBuildResultsNext(resourceGroupName, serviceName, buildServiceName, buildName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            buildName,
            nextLink,
            options
        }, listBuildResultsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$l = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBuildServicesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildServiceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const getBuildServiceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildService
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const createOrUpdateOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BuildService
        },
        201: {
            bodyMapper: BuildService
        },
        202: {
            bodyMapper: BuildService
        },
        204: {
            bodyMapper: BuildService
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: buildService,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$l
};
const listBuildsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const getBuildOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Build
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const createOrUpdateBuildOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Build
        },
        201: {
            bodyMapper: Build
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: build,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$l
};
const deleteBuildOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const listBuildResultsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}/results",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildResultCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const getBuildResultOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}/results/{buildResultName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName,
        buildResultName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const getBuildResultLogOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builds/{buildName}/results/{buildResultName}/getLogFileUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: BuildResultLog
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildName,
        buildResultName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const getResourceUploadUrlOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/getResourceUploadUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResourceUploadDefinition
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const listSupportedBuildpacksOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedBuildpacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SupportedBuildpacksCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const getSupportedBuildpackOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedBuildpacks/{buildpackName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SupportedBuildpackResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        buildpackName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const listSupportedStacksOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedStacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SupportedStacksCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const getSupportedStackOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/supportedStacks/{stackName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SupportedStackResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        stackName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const listBuildServicesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildServiceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const listBuildsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const listBuildResultsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildResultCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        buildServiceName,
        buildName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BuildpackBinding operations. */
class BuildpackBindingImpl {
    /**
     * Initialize a new instance of the class BuildpackBinding class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get collection of buildpack bindings under all builders.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    listForCluster(resourceGroupName, serviceName, options) {
        const iter = this.listForClusterPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listForClusterPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listForClusterPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listForClusterPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listForCluster(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listForClusterNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listForClusterPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForClusterPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listForClusterPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Handles requests to list all buildpack bindings in a builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, buildServiceName, builderName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, buildServiceName, builderName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, buildServiceName, builderName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, buildServiceName, builderName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, buildServiceName, builderName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, buildServiceName, builderName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get collection of buildpack bindings under all builders.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _listForCluster(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listForClusterOperationSpec$1);
    }
    /**
     * Get a buildpack binding by name.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            builderName,
            buildpackBindingName,
            options
        }, getOperationSpec$h);
    }
    /**
     * Create or update a buildpack binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param buildpackBinding The target buildpack binding for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, buildpackBinding, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    buildServiceName,
                    builderName,
                    buildpackBindingName,
                    buildpackBinding,
                    options
                },
                spec: createOrUpdateOperationSpec$e
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a buildpack binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param buildpackBinding The target buildpack binding for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, buildpackBinding, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, buildpackBinding, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete a Buildpack Binding
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    buildServiceName,
                    builderName,
                    buildpackBindingName,
                    options
                },
                spec: deleteOperationSpec$e
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete a Buildpack Binding
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param buildpackBindingName The name of the Buildpack Binding Name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, buildServiceName, builderName, buildpackBindingName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all buildpack bindings in a builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            builderName,
            options
        }, listOperationSpec$i);
    }
    /**
     * ListForClusterNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the ListForCluster method.
     * @param options The options parameters.
     */
    _listForClusterNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listForClusterNextOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, buildServiceName, builderName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            builderName,
            nextLink,
            options
        }, listNextOperationSpec$i);
    }
}
// Operation Specifications
const serializer$k = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listForClusterOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildpackBindings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildpackBindingResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$k
};
const getOperationSpec$h = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}/buildpackBindings/{buildpackBindingName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildpackBindingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName,
        buildpackBindingName
    ],
    headerParameters: [accept],
    serializer: serializer$k
};
const createOrUpdateOperationSpec$e = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}/buildpackBindings/{buildpackBindingName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BuildpackBindingResource
        },
        201: {
            bodyMapper: BuildpackBindingResource
        },
        202: {
            bodyMapper: BuildpackBindingResource
        },
        204: {
            bodyMapper: BuildpackBindingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: buildpackBinding,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName,
        buildpackBindingName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$k
};
const deleteOperationSpec$e = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}/buildpackBindings/{buildpackBindingName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName,
        buildpackBindingName
    ],
    headerParameters: [accept],
    serializer: serializer$k
};
const listOperationSpec$i = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}/buildpackBindings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildpackBindingResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName
    ],
    headerParameters: [accept],
    serializer: serializer$k
};
const listForClusterNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildpackBindingResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$k
};
const listNextOperationSpec$i = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildpackBindingResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        buildServiceName,
        builderName
    ],
    headerParameters: [accept],
    serializer: serializer$k
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BuildServiceBuilder operations. */
class BuildServiceBuilderImpl {
    /**
     * Initialize a new instance of the class BuildServiceBuilder class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List KPack builders result.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, buildServiceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, buildServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, buildServiceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, buildServiceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, buildServiceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, buildServiceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, buildServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, buildServiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            builderName,
            options
        }, getOperationSpec$g);
    }
    /**
     * Create or update a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param builderResource The target builder for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, buildServiceName, builderName, builderResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    buildServiceName,
                    builderName,
                    builderResource,
                    options
                },
                spec: createOrUpdateOperationSpec$d
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param builderResource The target builder for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, buildServiceName, builderName, builderResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, buildServiceName, builderName, builderResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    buildServiceName,
                    builderName,
                    options
                },
                spec: deleteOperationSpec$d
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a KPack builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, buildServiceName, builderName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List KPack builders result.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listOperationSpec$h);
    }
    /**
     * List deployments that are using the builder.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param builderName The name of the builder resource.
     * @param options The options parameters.
     */
    listDeployments(resourceGroupName, serviceName, buildServiceName, builderName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            builderName,
            options
        }, listDeploymentsOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, buildServiceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, nextLink, options }, listNextOperationSpec$h);
    }
}
// Operation Specifications
const serializer$j = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$g = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuilderResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const createOrUpdateOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BuilderResource
        },
        201: {
            bodyMapper: BuilderResource
        },
        202: {
            bodyMapper: BuilderResource
        },
        204: {
            bodyMapper: BuilderResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: builderResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$j
};
const deleteOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const listOperationSpec$h = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuilderResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const listDeploymentsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/builders/{builderName}/listUsingDeployments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DeploymentList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        builderName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const listNextOperationSpec$h = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuilderResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BuildServiceAgentPool operations. */
class BuildServiceAgentPoolImpl {
    /**
     * Initialize a new instance of the class BuildServiceAgentPool class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, buildServiceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, buildServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, buildServiceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, buildServiceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, buildServiceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, buildServiceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, buildServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, buildServiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, buildServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, options }, listOperationSpec$g);
    }
    /**
     * Get build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param agentPoolName The name of the build service agent pool resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, buildServiceName, agentPoolName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            buildServiceName,
            agentPoolName,
            options
        }, getOperationSpec$f);
    }
    /**
     * Create or update build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param agentPoolName The name of the build service agent pool resource.
     * @param agentPoolResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePut(resourceGroupName, serviceName, buildServiceName, agentPoolName, agentPoolResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    buildServiceName,
                    agentPoolName,
                    agentPoolResource,
                    options
                },
                spec: updatePutOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update build service agent pool.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param agentPoolName The name of the build service agent pool resource.
     * @param agentPoolResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePutAndWait(resourceGroupName, serviceName, buildServiceName, agentPoolName, agentPoolResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdatePut(resourceGroupName, serviceName, buildServiceName, agentPoolName, agentPoolResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param buildServiceName The name of the build service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, buildServiceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, buildServiceName, nextLink, options }, listNextOperationSpec$g);
    }
}
// Operation Specifications
const serializer$i = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$g = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/agentPools",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildServiceAgentPoolResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$i
};
const getOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/agentPools/{agentPoolName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildServiceAgentPoolResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        agentPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$i
};
const updatePutOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/buildServices/{buildServiceName}/agentPools/{agentPoolName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BuildServiceAgentPoolResource
        },
        201: {
            bodyMapper: BuildServiceAgentPoolResource
        },
        202: {
            bodyMapper: BuildServiceAgentPoolResource
        },
        204: {
            bodyMapper: BuildServiceAgentPoolResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: agentPoolResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        buildServiceName,
        agentPoolName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$i
};
const listNextOperationSpec$g = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BuildServiceAgentPoolResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        buildServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$i
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing MonitoringSettings operations. */
class MonitoringSettingsImpl {
    /**
     * Initialize a new instance of the class MonitoringSettings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the Monitoring Setting and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, getOperationSpec$e);
    }
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePut(resourceGroupName, serviceName, monitoringSettingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    monitoringSettingResource,
                    options
                },
                spec: updatePutOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePutAndWait(resourceGroupName, serviceName, monitoringSettingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdatePut(resourceGroupName, serviceName, monitoringSettingResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePatch(resourceGroupName, serviceName, monitoringSettingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    monitoringSettingResource,
                    options
                },
                spec: updatePatchOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdatePatchAndWait(resourceGroupName, serviceName, monitoringSettingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdatePatch(resourceGroupName, serviceName, monitoringSettingResource, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$h = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$e = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/monitoringSettings/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitoringSettingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$h
};
const updatePutOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/monitoringSettings/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: MonitoringSettingResource
        },
        201: {
            bodyMapper: MonitoringSettingResource
        },
        202: {
            bodyMapper: MonitoringSettingResource
        },
        204: {
            bodyMapper: MonitoringSettingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: monitoringSettingResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h
};
const updatePatchOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/monitoringSettings/default",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: MonitoringSettingResource
        },
        201: {
            bodyMapper: MonitoringSettingResource
        },
        202: {
            bodyMapper: MonitoringSettingResource
        },
        204: {
            bodyMapper: MonitoringSettingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: monitoringSettingResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Apps operations. */
class AppsImpl {
    /**
     * Initialize a new instance of the class Apps class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get an App and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, appName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, options }, getOperationSpec$d);
    }
    /**
     * Create a new App or update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, appName, appResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, appName, appResource, options },
                spec: createOrUpdateOperationSpec$c
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new App or update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, appName, appResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, appName, appResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, appName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, appName, options },
                spec: deleteOperationSpec$c
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, appName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, appName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serviceName, appName, appResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, appName, appResource, options },
                spec: updateOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serviceName, appName, appResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serviceName, appName, appResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$f);
    }
    /**
     * Get an resource upload URL for an App, which may be artifacts or source archive.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    getResourceUploadUrl(resourceGroupName, serviceName, appName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, options }, getResourceUploadUrlOperationSpec);
    }
    /**
     * Set existing Deployment under the app as active
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param activeDeploymentCollection A list of Deployment name to be active.
     * @param options The options parameters.
     */
    beginSetActiveDeployments(resourceGroupName, serviceName, appName, activeDeploymentCollection, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    activeDeploymentCollection,
                    options
                },
                spec: setActiveDeploymentsOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Set existing Deployment under the app as active
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param activeDeploymentCollection A list of Deployment name to be active.
     * @param options The options parameters.
     */
    beginSetActiveDeploymentsAndWait(resourceGroupName, serviceName, appName, activeDeploymentCollection, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginSetActiveDeployments(resourceGroupName, serviceName, appName, activeDeploymentCollection, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Check the resource name is valid as well as not in use.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param validatePayload Custom domain payload to be validated
     * @param options The options parameters.
     */
    validateDomain(resourceGroupName, serviceName, appName, validatePayload, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, validatePayload, options }, validateDomainOperationSpec$2);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$f);
    }
}
// Operation Specifications
const serializer$g = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AppResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, syncStatus],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const createOrUpdateOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AppResource
        },
        201: {
            bodyMapper: AppResource
        },
        202: {
            bodyMapper: AppResource
        },
        204: {
            bodyMapper: AppResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: appResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const deleteOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const updateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: AppResource
        },
        201: {
            bodyMapper: AppResource
        },
        202: {
            bodyMapper: AppResource
        },
        204: {
            bodyMapper: AppResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: appResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const listOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AppResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const getResourceUploadUrlOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/getResourceUploadUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ResourceUploadDefinition
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const setActiveDeploymentsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/setActiveDeployments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AppResource
        },
        201: {
            bodyMapper: AppResource
        },
        202: {
            bodyMapper: AppResource
        },
        204: {
            bodyMapper: AppResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: activeDeploymentCollection,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const validateDomainOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/validateDomain",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CustomDomainValidateResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: validatePayload,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const listNextOperationSpec$f = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AppResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$g
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Bindings operations. */
class BindingsImpl {
    /**
     * Initialize a new instance of the class Bindings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, appName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, appName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, appName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, appName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, appName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, appName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, appName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, appName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a Binding and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, appName, bindingName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, bindingName, options }, getOperationSpec$c);
    }
    /**
     * Create a new Binding or update an exiting Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param bindingResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, appName, bindingName, bindingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    bindingName,
                    bindingResource,
                    options
                },
                spec: createOrUpdateOperationSpec$b
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new Binding or update an exiting Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param bindingResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, appName, bindingName, bindingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, appName, bindingName, bindingResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete a Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, appName, bindingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, appName, bindingName, options },
                spec: deleteOperationSpec$b
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete a Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, appName, bindingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, appName, bindingName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an exiting Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param bindingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serviceName, appName, bindingName, bindingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    bindingName,
                    bindingResource,
                    options
                },
                spec: updateOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an exiting Binding.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param bindingName The name of the Binding resource.
     * @param bindingResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serviceName, appName, bindingName, bindingResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serviceName, appName, bindingName, bindingResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, appName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, options }, listOperationSpec$e);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, appName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, nextLink, options }, listNextOperationSpec$e);
    }
}
// Operation Specifications
const serializer$f = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BindingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        bindingName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const createOrUpdateOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BindingResource
        },
        201: {
            bodyMapper: BindingResource
        },
        202: {
            bodyMapper: BindingResource
        },
        204: {
            bodyMapper: BindingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: bindingResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        bindingName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};
const deleteOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        bindingName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: BindingResource
        },
        201: {
            bodyMapper: BindingResource
        },
        202: {
            bodyMapper: BindingResource
        },
        204: {
            bodyMapper: BindingResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: bindingResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        bindingName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};
const listOperationSpec$e = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BindingResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const listNextOperationSpec$e = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BindingResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Storages operations. */
class StoragesImpl {
    /**
     * Initialize a new instance of the class Storages class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the storages of one Azure Spring Apps resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the storage resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param storageName The name of the storage resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, storageName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, storageName, options }, getOperationSpec$b);
    }
    /**
     * Create or update storage resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param storageName The name of the storage resource.
     * @param storageResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, storageName, storageResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    storageName,
                    storageResource,
                    options
                },
                spec: createOrUpdateOperationSpec$a
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update storage resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param storageName The name of the storage resource.
     * @param storageResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, storageName, storageResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, storageName, storageResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the storage resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param storageName The name of the storage resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, storageName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, storageName, options },
                spec: deleteOperationSpec$a
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the storage resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param storageName The name of the storage resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, storageName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, storageName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all the storages of one Azure Spring Apps resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$d);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$d);
    }
}
// Operation Specifications
const serializer$e = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/storages/{storageName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        storageName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const createOrUpdateOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/storages/{storageName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: StorageResource
        },
        201: {
            bodyMapper: StorageResource
        },
        202: {
            bodyMapper: StorageResource
        },
        204: {
            bodyMapper: StorageResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: storageResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        storageName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e
};
const deleteOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/storages/{storageName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        storageName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const listOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/storages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const listNextOperationSpec$d = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$e
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Certificates operations. */
class CertificatesImpl {
    /**
     * Initialize a new instance of the class Certificates class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the certificates of one user.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, certificateName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, certificateName, options }, getOperationSpec$a);
    }
    /**
     * Create or update certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, certificateName, certificateResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    certificateName,
                    certificateResource,
                    options
                },
                spec: createOrUpdateOperationSpec$9
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, certificateName, certificateResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, certificateName, certificateResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, certificateName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, certificateName, options },
                spec: deleteOperationSpec$9
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, certificateName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, certificateName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all the certificates of one user.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$c);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$c);
    }
}
// Operation Specifications
const serializer$d = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CertificateResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        certificateName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const createOrUpdateOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CertificateResource
        },
        201: {
            bodyMapper: CertificateResource
        },
        202: {
            bodyMapper: CertificateResource
        },
        204: {
            bodyMapper: CertificateResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: certificateResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        certificateName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$d
};
const deleteOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        certificateName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const listOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CertificateResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const listNextOperationSpec$c = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CertificateResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$d
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing CustomDomains operations. */
class CustomDomainsImpl {
    /**
     * Initialize a new instance of the class CustomDomains class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List the custom domains of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, appName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, appName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, appName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, appName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, appName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, appName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, appName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, appName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, appName, domainName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, domainName, options }, getOperationSpec$9);
    }
    /**
     * Create or update custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param domainResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, appName, domainName, domainResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    domainName,
                    domainResource,
                    options
                },
                spec: createOrUpdateOperationSpec$8
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param domainResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, appName, domainName, domainResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, appName, domainName, domainResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, appName, domainName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, appName, domainName, options },
                spec: deleteOperationSpec$8
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, appName, domainName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, appName, domainName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param domainResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serviceName, appName, domainName, domainResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    domainName,
                    domainResource,
                    options
                },
                spec: updateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update custom domain of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param domainName The name of the custom domain resource.
     * @param domainResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serviceName, appName, domainName, domainResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serviceName, appName, domainName, domainResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List the custom domains of one lifecycle application.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, appName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, options }, listOperationSpec$b);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, appName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, nextLink, options }, listNextOperationSpec$b);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomDomainResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        domainName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const createOrUpdateOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CustomDomainResource
        },
        201: {
            bodyMapper: CustomDomainResource
        },
        202: {
            bodyMapper: CustomDomainResource
        },
        204: {
            bodyMapper: CustomDomainResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: domainResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        domainName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const deleteOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        domainName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: CustomDomainResource
        },
        201: {
            bodyMapper: CustomDomainResource
        },
        202: {
            bodyMapper: CustomDomainResource
        },
        204: {
            bodyMapper: CustomDomainResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: domainResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        domainName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const listOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomDomainResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listNextOperationSpec$b = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomDomainResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Deployments operations. */
class DeploymentsImpl {
    /**
     * Initialize a new instance of the class Deployments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, appName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, appName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, appName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, appName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, appName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, appName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, appName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, appName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List deployments for a certain service
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    listForCluster(resourceGroupName, serviceName, options) {
        const iter = this.listForClusterPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listForClusterPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listForClusterPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listForClusterPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listForCluster(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listForClusterNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listForClusterPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listForClusterPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listForClusterPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get a Deployment and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, appName, deploymentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, deploymentName, options }, getOperationSpec$8);
    }
    /**
     * Create a new Deployment or update an exiting Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param deploymentResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    deploymentName,
                    deploymentResource,
                    options
                },
                spec: createOrUpdateOperationSpec$7
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new Deployment or update an exiting Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param deploymentResource Parameters for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to delete a Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    deploymentName,
                    options
                },
                spec: deleteOperationSpec$7
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to delete a Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, appName, deploymentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an exiting Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param deploymentResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    deploymentName,
                    deploymentResource,
                    options
                },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an exiting Deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param deploymentResource Parameters for the update operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serviceName, appName, deploymentName, deploymentResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, appName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, options }, listOperationSpec$a);
    }
    /**
     * List deployments for a certain service
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _listForCluster(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listForClusterOperationSpec);
    }
    /**
     * Start the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    deploymentName,
                    options
                },
                spec: startOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Start the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStart(resourceGroupName, serviceName, appName, deploymentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Stop the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    deploymentName,
                    options
                },
                spec: stopOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Stop the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStop(resourceGroupName, serviceName, appName, deploymentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Restart the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    deploymentName,
                    options
                },
                spec: restartOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Restart the deployment.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRestart(resourceGroupName, serviceName, appName, deploymentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Enable remote debugging.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginEnableRemoteDebugging(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    deploymentName,
                    options
                },
                spec: enableRemoteDebuggingOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Enable remote debugging.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginEnableRemoteDebuggingAndWait(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginEnableRemoteDebugging(resourceGroupName, serviceName, appName, deploymentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Disable remote debugging.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginDisableRemoteDebugging(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    deploymentName,
                    options
                },
                spec: disableRemoteDebuggingOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Disable remote debugging.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    beginDisableRemoteDebuggingAndWait(resourceGroupName, serviceName, appName, deploymentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDisableRemoteDebugging(resourceGroupName, serviceName, appName, deploymentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get remote debugging config.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    getRemoteDebuggingConfig(resourceGroupName, serviceName, appName, deploymentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, deploymentName, options }, getRemoteDebuggingConfigOperationSpec);
    }
    /**
     * Get deployment log file URL
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param options The options parameters.
     */
    getLogFileUrl(resourceGroupName, serviceName, appName, deploymentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, deploymentName, options }, getLogFileUrlOperationSpec);
    }
    /**
     * Generate Heap Dump
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginGenerateHeapDump(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    deploymentName,
                    diagnosticParameters,
                    options
                },
                spec: generateHeapDumpOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Generate Heap Dump
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginGenerateHeapDumpAndWait(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginGenerateHeapDump(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Generate Thread Dump
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginGenerateThreadDump(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    deploymentName,
                    diagnosticParameters,
                    options
                },
                spec: generateThreadDumpOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Generate Thread Dump
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginGenerateThreadDumpAndWait(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginGenerateThreadDump(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Start JFR
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginStartJFR(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    appName,
                    deploymentName,
                    diagnosticParameters,
                    options
                },
                spec: startJFROperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Start JFR
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param deploymentName The name of the Deployment resource.
     * @param diagnosticParameters Parameters for the diagnostic operation
     * @param options The options parameters.
     */
    beginStartJFRAndWait(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStartJFR(resourceGroupName, serviceName, appName, deploymentName, diagnosticParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, appName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, appName, nextLink, options }, listNextOperationSpec$a);
    }
    /**
     * ListForClusterNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the ListForCluster method.
     * @param options The options parameters.
     */
    _listForClusterNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listForClusterNextOperationSpec);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const createOrUpdateOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DeploymentResource
        },
        201: {
            bodyMapper: DeploymentResource
        },
        202: {
            bodyMapper: DeploymentResource
        },
        204: {
            bodyMapper: DeploymentResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: deploymentResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const deleteOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: DeploymentResource
        },
        201: {
            bodyMapper: DeploymentResource
        },
        202: {
            bodyMapper: DeploymentResource
        },
        204: {
            bodyMapper: DeploymentResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: deploymentResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const listOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, version],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listForClusterOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/deployments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, version],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const startOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const stopOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const restartOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/restart",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const enableRemoteDebuggingOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/enableRemoteDebugging",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RemoteDebugging
        },
        201: {
            bodyMapper: RemoteDebugging
        },
        202: {
            bodyMapper: RemoteDebugging
        },
        204: {
            bodyMapper: RemoteDebugging
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: remoteDebuggingPayload,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const disableRemoteDebuggingOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/disableRemoteDebugging",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RemoteDebugging
        },
        201: {
            bodyMapper: RemoteDebugging
        },
        202: {
            bodyMapper: RemoteDebugging
        },
        204: {
            bodyMapper: RemoteDebugging
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const getRemoteDebuggingConfigOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/getRemoteDebuggingConfig",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RemoteDebugging
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const getLogFileUrlOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/getLogFileUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: LogFileUrlResponse
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const generateHeapDumpOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/generateHeapDump",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: diagnosticParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const generateThreadDumpOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/generateThreadDump",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: diagnosticParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const startJFROperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/startJFR",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: diagnosticParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        appName,
        deploymentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const listNextOperationSpec$a = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        appName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listForClusterNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DeploymentResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available REST API operations of the Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available REST API operations of the Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$9);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$9);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$9 = {
    path: "/providers/Microsoft.AppPlatform/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailableOperations
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$a
};
const listNextOperationSpec$9 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailableOperations
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing RuntimeVersions operations. */
class RuntimeVersionsImpl {
    /**
     * Initialize a new instance of the class RuntimeVersions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available runtime versions supported by Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    listRuntimeVersions(options) {
        return this.client.sendOperationRequest({ options }, listRuntimeVersionsOperationSpec);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listRuntimeVersionsOperationSpec = {
    path: "/providers/Microsoft.AppPlatform/runtimeVersions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailableRuntimeVersions
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Skus operations. */
class SkusImpl {
    /**
     * Initialize a new instance of the class Skus class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available skus of the Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available skus of the Microsoft.AppPlatform provider.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$8);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$8);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceSkuCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$8
};
const listNextOperationSpec$8 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceSkuCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Gateways operations. */
class GatewaysImpl {
    /**
     * Initialize a new instance of the class Gateways class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the Spring Cloud Gateway and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, gatewayName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, gatewayName, options }, getOperationSpec$7);
    }
    /**
     * Create the default Spring Cloud Gateway or update the existing Spring Cloud Gateway.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param gatewayResource The gateway for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, gatewayName, gatewayResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    gatewayName,
                    gatewayResource,
                    options
                },
                spec: createOrUpdateOperationSpec$6
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create the default Spring Cloud Gateway or update the existing Spring Cloud Gateway.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param gatewayResource The gateway for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, gatewayName, gatewayResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, gatewayName, gatewayResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to update an exiting Spring Cloud Gateway capacity.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param gatewayCapacityResource The gateway capacity for the update operation
     * @param options The options parameters.
     */
    beginUpdateCapacity(resourceGroupName, serviceName, gatewayName, gatewayCapacityResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    gatewayName,
                    gatewayCapacityResource,
                    options
                },
                spec: updateCapacityOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to update an exiting Spring Cloud Gateway capacity.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param gatewayCapacityResource The gateway capacity for the update operation
     * @param options The options parameters.
     */
    beginUpdateCapacityAndWait(resourceGroupName, serviceName, gatewayName, gatewayCapacityResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateCapacity(resourceGroupName, serviceName, gatewayName, gatewayCapacityResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Disable the default Spring Cloud Gateway.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, gatewayName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, gatewayName, options },
                spec: deleteOperationSpec$6
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Disable the default Spring Cloud Gateway.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, gatewayName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, gatewayName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List sensitive environment variables of Spring Cloud Gateway.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    listEnvSecrets(resourceGroupName, serviceName, gatewayName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, gatewayName, options }, listEnvSecretsOperationSpec);
    }
    /**
     * Restart the Spring Cloud Gateway.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName, serviceName, gatewayName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, gatewayName, options },
                spec: restartOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Restart the Spring Cloud Gateway.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName, serviceName, gatewayName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRestart(resourceGroupName, serviceName, gatewayName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$7);
    }
    /**
     * Check the domains are valid as well as not in use.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param validatePayload Custom domain payload to be validated
     * @param options The options parameters.
     */
    validateDomain(resourceGroupName, serviceName, gatewayName, validatePayload, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, gatewayName, validatePayload, options }, validateDomainOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$7);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GatewayResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        gatewayName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOrUpdateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: GatewayResource
        },
        201: {
            bodyMapper: GatewayResource
        },
        202: {
            bodyMapper: GatewayResource
        },
        204: {
            bodyMapper: GatewayResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: gatewayResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        gatewayName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const updateCapacityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: GatewayResource
        },
        201: {
            bodyMapper: GatewayResource
        },
        202: {
            bodyMapper: GatewayResource
        },
        204: {
            bodyMapper: GatewayResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: gatewayCapacityResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        gatewayName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        gatewayName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listEnvSecretsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/listEnvSecrets",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: {
                type: { name: "Dictionary", value: { type: { name: "String" } } }
            }
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        gatewayName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const restartOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/restart",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        gatewayName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GatewayResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const validateDomainOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/validateDomain",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CustomDomainValidateResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: validatePayload,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        gatewayName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const listNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GatewayResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing GatewayRouteConfigs operations. */
class GatewayRouteConfigsImpl {
    /**
     * Initialize a new instance of the class GatewayRouteConfigs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handle requests to list all Spring Cloud Gateway route configs.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, gatewayName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, gatewayName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, gatewayName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, gatewayName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, gatewayName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, gatewayName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, gatewayName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, gatewayName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the Spring Cloud Gateway route configs.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param routeConfigName The name of the Spring Cloud Gateway route config.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, gatewayName, routeConfigName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, gatewayName, routeConfigName, options }, getOperationSpec$6);
    }
    /**
     * Create the default Spring Cloud Gateway route configs or update the existing Spring Cloud Gateway
     * route configs.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param routeConfigName The name of the Spring Cloud Gateway route config.
     * @param gatewayRouteConfigResource The Spring Cloud Gateway route config for the create or update
     *                                   operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, gatewayName, routeConfigName, gatewayRouteConfigResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    gatewayName,
                    routeConfigName,
                    gatewayRouteConfigResource,
                    options
                },
                spec: createOrUpdateOperationSpec$5
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create the default Spring Cloud Gateway route configs or update the existing Spring Cloud Gateway
     * route configs.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param routeConfigName The name of the Spring Cloud Gateway route config.
     * @param gatewayRouteConfigResource The Spring Cloud Gateway route config for the create or update
     *                                   operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, gatewayName, routeConfigName, gatewayRouteConfigResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, gatewayName, routeConfigName, gatewayRouteConfigResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the Spring Cloud Gateway route config.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param routeConfigName The name of the Spring Cloud Gateway route config.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, gatewayName, routeConfigName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    gatewayName,
                    routeConfigName,
                    options
                },
                spec: deleteOperationSpec$5
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the Spring Cloud Gateway route config.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param routeConfigName The name of the Spring Cloud Gateway route config.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, gatewayName, routeConfigName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, gatewayName, routeConfigName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handle requests to list all Spring Cloud Gateway route configs.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, gatewayName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, gatewayName, options }, listOperationSpec$6);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, gatewayName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, gatewayName, nextLink, options }, listNextOperationSpec$6);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/routeConfigs/{routeConfigName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GatewayRouteConfigResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        gatewayName,
        routeConfigName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const createOrUpdateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/routeConfigs/{routeConfigName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: GatewayRouteConfigResource
        },
        201: {
            bodyMapper: GatewayRouteConfigResource
        },
        202: {
            bodyMapper: GatewayRouteConfigResource
        },
        204: {
            bodyMapper: GatewayRouteConfigResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: gatewayRouteConfigResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        gatewayName,
        routeConfigName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/routeConfigs/{routeConfigName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        gatewayName,
        routeConfigName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/routeConfigs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GatewayRouteConfigResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        gatewayName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GatewayRouteConfigResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        gatewayName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing GatewayCustomDomains operations. */
class GatewayCustomDomainsImpl {
    /**
     * Initialize a new instance of the class GatewayCustomDomains class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handle requests to list all Spring Cloud Gateway custom domains.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, gatewayName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, gatewayName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, gatewayName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, gatewayName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, gatewayName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, gatewayName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, gatewayName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, gatewayName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, gatewayName, domainName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, gatewayName, domainName, options }, getOperationSpec$5);
    }
    /**
     * Create or update the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param gatewayCustomDomainResource The gateway custom domain resource for the create or update
     *                                    operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, gatewayName, domainName, gatewayCustomDomainResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    gatewayName,
                    domainName,
                    gatewayCustomDomainResource,
                    options
                },
                spec: createOrUpdateOperationSpec$4
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param gatewayCustomDomainResource The gateway custom domain resource for the create or update
     *                                    operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, gatewayName, domainName, gatewayCustomDomainResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, gatewayName, domainName, gatewayCustomDomainResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, gatewayName, domainName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    gatewayName,
                    domainName,
                    options
                },
                spec: deleteOperationSpec$4
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the Spring Cloud Gateway custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param domainName The name of the Spring Cloud Gateway custom domain.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, gatewayName, domainName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, gatewayName, domainName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handle requests to list all Spring Cloud Gateway custom domains.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, gatewayName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, gatewayName, options }, listOperationSpec$5);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param gatewayName The name of Spring Cloud Gateway.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, gatewayName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, gatewayName, nextLink, options }, listNextOperationSpec$5);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/domains/{domainName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GatewayCustomDomainResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        domainName,
        gatewayName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const createOrUpdateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/domains/{domainName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: GatewayCustomDomainResource
        },
        201: {
            bodyMapper: GatewayCustomDomainResource
        },
        202: {
            bodyMapper: GatewayCustomDomainResource
        },
        204: {
            bodyMapper: GatewayCustomDomainResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: gatewayCustomDomainResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        domainName,
        gatewayName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/domains/{domainName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        domainName,
        gatewayName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/gateways/{gatewayName}/domains",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GatewayCustomDomainResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        gatewayName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GatewayCustomDomainResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        gatewayName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ApiPortals operations. */
class ApiPortalsImpl {
    /**
     * Initialize a new instance of the class ApiPortals class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the API portal and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, apiPortalName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiPortalName, options }, getOperationSpec$4);
    }
    /**
     * Create the default API portal or update the existing API portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param apiPortalResource The API portal for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, apiPortalName, apiPortalResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    apiPortalName,
                    apiPortalResource,
                    options
                },
                spec: createOrUpdateOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create the default API portal or update the existing API portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param apiPortalResource The API portal for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, apiPortalName, apiPortalResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, apiPortalName, apiPortalResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the default API portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, apiPortalName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serviceName, apiPortalName, options },
                spec: deleteOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the default API portal.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, apiPortalName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, apiPortalName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$4);
    }
    /**
     * Check the domains are valid as well as not in use.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param validatePayload Custom domain payload to be validated
     * @param options The options parameters.
     */
    validateDomain(resourceGroupName, serviceName, apiPortalName, validatePayload, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            apiPortalName,
            validatePayload,
            options
        }, validateDomainOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apiPortals/{apiPortalName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApiPortalResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        apiPortalName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apiPortals/{apiPortalName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ApiPortalResource
        },
        201: {
            bodyMapper: ApiPortalResource
        },
        202: {
            bodyMapper: ApiPortalResource
        },
        204: {
            bodyMapper: ApiPortalResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: apiPortalResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        apiPortalName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apiPortals/{apiPortalName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        apiPortalName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apiPortals",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApiPortalResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const validateDomainOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apiPortals/{apiPortalName}/validateDomain",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CustomDomainValidateResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: validatePayload,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        apiPortalName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApiPortalResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ApiPortalCustomDomains operations. */
class ApiPortalCustomDomainsImpl {
    /**
     * Initialize a new instance of the class ApiPortalCustomDomains class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handle requests to list all API portal custom domains.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, apiPortalName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, apiPortalName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, apiPortalName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, apiPortalName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, apiPortalName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, apiPortalName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, apiPortalName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, apiPortalName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the API portal custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param domainName The name of the API portal custom domain.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, apiPortalName, domainName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiPortalName, domainName, options }, getOperationSpec$3);
    }
    /**
     * Create or update the API portal custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param domainName The name of the API portal custom domain.
     * @param apiPortalCustomDomainResource The API portal custom domain for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, apiPortalName, domainName, apiPortalCustomDomainResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    apiPortalName,
                    domainName,
                    apiPortalCustomDomainResource,
                    options
                },
                spec: createOrUpdateOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the API portal custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param domainName The name of the API portal custom domain.
     * @param apiPortalCustomDomainResource The API portal custom domain for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, apiPortalName, domainName, apiPortalCustomDomainResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, apiPortalName, domainName, apiPortalCustomDomainResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the API portal custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param domainName The name of the API portal custom domain.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, apiPortalName, domainName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    apiPortalName,
                    domainName,
                    options
                },
                spec: deleteOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the API portal custom domain.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param domainName The name of the API portal custom domain.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, apiPortalName, domainName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, apiPortalName, domainName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Handle requests to list all API portal custom domains.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, apiPortalName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiPortalName, options }, listOperationSpec$3);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param apiPortalName The name of API portal.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, apiPortalName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, apiPortalName, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apiPortals/{apiPortalName}/domains/{domainName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApiPortalCustomDomainResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        domainName,
        apiPortalName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apiPortals/{apiPortalName}/domains/{domainName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ApiPortalCustomDomainResource
        },
        201: {
            bodyMapper: ApiPortalCustomDomainResource
        },
        202: {
            bodyMapper: ApiPortalCustomDomainResource
        },
        204: {
            bodyMapper: ApiPortalCustomDomainResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: apiPortalCustomDomainResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        domainName,
        apiPortalName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apiPortals/{apiPortalName}/domains/{domainName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        domainName,
        apiPortalName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apiPortals/{apiPortalName}/domains",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApiPortalCustomDomainResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        apiPortalName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApiPortalCustomDomainResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        apiPortalName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ApplicationAccelerators operations. */
class ApplicationAcceleratorsImpl {
    /**
     * Initialize a new instance of the class ApplicationAccelerators class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handle requests to list all application accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Handle requests to list all application accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, options }, listOperationSpec$2);
    }
    /**
     * Get the application accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, applicationAcceleratorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, applicationAcceleratorName, options }, getOperationSpec$2);
    }
    /**
     * Create or update the application accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param applicationAcceleratorResource The application accelerator for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, applicationAcceleratorName, applicationAcceleratorResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    applicationAcceleratorName,
                    applicationAcceleratorResource,
                    options
                },
                spec: createOrUpdateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the application accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param applicationAcceleratorResource The application accelerator for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, applicationAcceleratorName, applicationAcceleratorResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, applicationAcceleratorName, applicationAcceleratorResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the application accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, applicationAcceleratorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    applicationAcceleratorName,
                    options
                },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the application accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, applicationAcceleratorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, applicationAcceleratorName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationAcceleratorResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators/{applicationAcceleratorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationAcceleratorResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationAcceleratorName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators/{applicationAcceleratorName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ApplicationAcceleratorResource
        },
        201: {
            bodyMapper: ApplicationAcceleratorResource
        },
        202: {
            bodyMapper: ApplicationAcceleratorResource
        },
        204: {
            bodyMapper: ApplicationAcceleratorResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: applicationAcceleratorResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationAcceleratorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators/{applicationAcceleratorName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationAcceleratorName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationAcceleratorResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing CustomizedAccelerators operations. */
class CustomizedAcceleratorsImpl {
    /**
     * Initialize a new instance of the class CustomizedAccelerators class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handle requests to list all customized accelerators.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, applicationAcceleratorName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, applicationAcceleratorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, applicationAcceleratorName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, applicationAcceleratorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, applicationAcceleratorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, applicationAcceleratorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, applicationAcceleratorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, applicationAcceleratorName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Handle requests to list all customized accelerators.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, applicationAcceleratorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, applicationAcceleratorName, options }, listOperationSpec$1);
    }
    /**
     * Get the customized accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param customizedAcceleratorName The name of the customized accelerator.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            applicationAcceleratorName,
            customizedAcceleratorName,
            options
        }, getOperationSpec$1);
    }
    /**
     * Create or update the customized accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param customizedAcceleratorName The name of the customized accelerator.
     * @param customizedAcceleratorResource The customized accelerator for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, customizedAcceleratorResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    applicationAcceleratorName,
                    customizedAcceleratorName,
                    customizedAcceleratorResource,
                    options
                },
                spec: createOrUpdateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the customized accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param customizedAcceleratorName The name of the customized accelerator.
     * @param customizedAcceleratorResource The customized accelerator for the create or update operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, customizedAcceleratorResource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, customizedAcceleratorResource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the customized accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param customizedAcceleratorName The name of the customized accelerator.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    applicationAcceleratorName,
                    customizedAcceleratorName,
                    options
                },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the customized accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param customizedAcceleratorName The name of the customized accelerator.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Check the customized accelerator are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param customizedAcceleratorName The name of the customized accelerator.
     * @param properties Customized accelerator properties to be validated
     * @param options The options parameters.
     */
    validate(resourceGroupName, serviceName, applicationAcceleratorName, customizedAcceleratorName, properties, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            applicationAcceleratorName,
            customizedAcceleratorName,
            properties,
            options
        }, validateOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, applicationAcceleratorName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            applicationAcceleratorName,
            nextLink,
            options
        }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators/{applicationAcceleratorName}/customizedAccelerators",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomizedAcceleratorResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationAcceleratorName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators/{applicationAcceleratorName}/customizedAccelerators/{customizedAcceleratorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomizedAcceleratorResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationAcceleratorName,
        customizedAcceleratorName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators/{applicationAcceleratorName}/customizedAccelerators/{customizedAcceleratorName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CustomizedAcceleratorResource
        },
        201: {
            bodyMapper: CustomizedAcceleratorResource
        },
        202: {
            bodyMapper: CustomizedAcceleratorResource
        },
        204: {
            bodyMapper: CustomizedAcceleratorResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: customizedAcceleratorResource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationAcceleratorName,
        customizedAcceleratorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators/{applicationAcceleratorName}/customizedAccelerators/{customizedAcceleratorName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationAcceleratorName,
        customizedAcceleratorName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const validateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators/{applicationAcceleratorName}/customizedAccelerators/{customizedAcceleratorName}/validate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CustomizedAcceleratorValidateResult
        },
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: properties,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationAcceleratorName,
        customizedAcceleratorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomizedAcceleratorResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        applicationAcceleratorName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PredefinedAccelerators operations. */
class PredefinedAcceleratorsImpl {
    /**
     * Initialize a new instance of the class PredefinedAccelerators class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Handle requests to list all predefined accelerators.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param options The options parameters.
     */
    list(resourceGroupName, serviceName, applicationAcceleratorName, options) {
        const iter = this.listPagingAll(resourceGroupName, serviceName, applicationAcceleratorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, serviceName, applicationAcceleratorName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, serviceName, applicationAcceleratorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, serviceName, applicationAcceleratorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, serviceName, applicationAcceleratorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, serviceName, applicationAcceleratorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, serviceName, applicationAcceleratorName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Handle requests to list all predefined accelerators.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param options The options parameters.
     */
    _list(resourceGroupName, serviceName, applicationAcceleratorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serviceName, applicationAcceleratorName, options }, listOperationSpec);
    }
    /**
     * Get the predefined accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param predefinedAcceleratorName The name of the predefined accelerator.
     * @param options The options parameters.
     */
    get(resourceGroupName, serviceName, applicationAcceleratorName, predefinedAcceleratorName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            applicationAcceleratorName,
            predefinedAcceleratorName,
            options
        }, getOperationSpec);
    }
    /**
     * Disable predefined accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param predefinedAcceleratorName The name of the predefined accelerator.
     * @param options The options parameters.
     */
    beginDisable(resourceGroupName, serviceName, applicationAcceleratorName, predefinedAcceleratorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    applicationAcceleratorName,
                    predefinedAcceleratorName,
                    options
                },
                spec: disableOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Disable predefined accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param predefinedAcceleratorName The name of the predefined accelerator.
     * @param options The options parameters.
     */
    beginDisableAndWait(resourceGroupName, serviceName, applicationAcceleratorName, predefinedAcceleratorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDisable(resourceGroupName, serviceName, applicationAcceleratorName, predefinedAcceleratorName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Enable predefined accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param predefinedAcceleratorName The name of the predefined accelerator.
     * @param options The options parameters.
     */
    beginEnable(resourceGroupName, serviceName, applicationAcceleratorName, predefinedAcceleratorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serviceName,
                    applicationAcceleratorName,
                    predefinedAcceleratorName,
                    options
                },
                spec: enableOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Enable predefined accelerator.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param predefinedAcceleratorName The name of the predefined accelerator.
     * @param options The options parameters.
     */
    beginEnableAndWait(resourceGroupName, serviceName, applicationAcceleratorName, predefinedAcceleratorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginEnable(resourceGroupName, serviceName, applicationAcceleratorName, predefinedAcceleratorName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param applicationAcceleratorName The name of the application accelerator.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, serviceName, applicationAcceleratorName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serviceName,
            applicationAcceleratorName,
            nextLink,
            options
        }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators/{applicationAcceleratorName}/predefinedAccelerators",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PredefinedAcceleratorResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationAcceleratorName
    ],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators/{applicationAcceleratorName}/predefinedAccelerators/{predefinedAcceleratorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PredefinedAcceleratorResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationAcceleratorName,
        predefinedAcceleratorName
    ],
    headerParameters: [accept],
    serializer
};
const disableOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators/{applicationAcceleratorName}/predefinedAccelerators/{predefinedAcceleratorName}/disable",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationAcceleratorName,
        predefinedAcceleratorName
    ],
    headerParameters: [accept],
    serializer
};
const enableOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/applicationAccelerators/{applicationAcceleratorName}/predefinedAccelerators/{predefinedAcceleratorName}/enable",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        applicationAcceleratorName,
        predefinedAcceleratorName
    ],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PredefinedAcceleratorResourceCollection
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serviceName,
        nextLink,
        applicationAcceleratorName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AppPlatformManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AppPlatformManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Gets subscription ID which uniquely identify the Microsoft Azure subscription.
     *                       The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-appplatform/3.0.0-beta.1`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-03-01-preview";
        this.services = new ServicesImpl(this);
        this.configServers = new ConfigServersImpl(this);
        this.configurationServices = new ConfigurationServicesImpl(this);
        this.serviceRegistries = new ServiceRegistriesImpl(this);
        this.applicationLiveViews = new ApplicationLiveViewsImpl(this);
        this.devToolPortals = new DevToolPortalsImpl(this);
        this.containerRegistries = new ContainerRegistriesImpl(this);
        this.buildServiceOperations = new BuildServiceOperationsImpl(this);
        this.buildpackBinding = new BuildpackBindingImpl(this);
        this.buildServiceBuilder = new BuildServiceBuilderImpl(this);
        this.buildServiceAgentPool = new BuildServiceAgentPoolImpl(this);
        this.monitoringSettings = new MonitoringSettingsImpl(this);
        this.apps = new AppsImpl(this);
        this.bindings = new BindingsImpl(this);
        this.storages = new StoragesImpl(this);
        this.certificates = new CertificatesImpl(this);
        this.customDomains = new CustomDomainsImpl(this);
        this.deployments = new DeploymentsImpl(this);
        this.operations = new OperationsImpl(this);
        this.runtimeVersions = new RuntimeVersionsImpl(this);
        this.skus = new SkusImpl(this);
        this.gateways = new GatewaysImpl(this);
        this.gatewayRouteConfigs = new GatewayRouteConfigsImpl(this);
        this.gatewayCustomDomains = new GatewayCustomDomainsImpl(this);
        this.apiPortals = new ApiPortalsImpl(this);
        this.apiPortalCustomDomains = new ApiPortalCustomDomainsImpl(this);
        this.applicationAccelerators = new ApplicationAcceleratorsImpl(this);
        this.customizedAccelerators = new CustomizedAcceleratorsImpl(this);
        this.predefinedAccelerators = new PredefinedAcceleratorsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.AppPlatformManagementClient = AppPlatformManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
