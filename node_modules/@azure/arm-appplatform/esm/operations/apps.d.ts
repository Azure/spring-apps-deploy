import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { AppPlatformManagementClientContext } from "../appPlatformManagementClientContext";
/** Class representing a Apps. */
export declare class Apps {
    private readonly client;
    /**
     * Create a Apps.
     * @param {AppPlatformManagementClientContext} client Reference to the service client.
     */
    constructor(client: AppPlatformManagementClientContext);
    /**
     * Get an App and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, appName: string, options?: Models.AppsGetOptionalParams): Promise<Models.AppsGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, appName: string, callback: msRest.ServiceCallback<Models.AppResource>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, appName: string, options: Models.AppsGetOptionalParams, callback: msRest.ServiceCallback<Models.AppResource>): void;
    /**
     * Create a new App or update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the create or update operation
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, appName: string, appResource: Models.AppResource, options?: msRest.RequestOptionsBase): Promise<Models.AppsCreateOrUpdateResponse>;
    /**
     * Operation to delete an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, appName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Operation to update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the update operation
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsUpdateResponse>
     */
    update(resourceGroupName: string, serviceName: string, appName: string, appResource: Models.AppResource, options?: msRest.RequestOptionsBase): Promise<Models.AppsUpdateResponse>;
    /**
     * Handles requests to list all resources in a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsListResponse>
     */
    list(resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppsListResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param callback The callback
     */
    list(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.AppResourceCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(resourceGroupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppResourceCollection>): void;
    /**
     * Get an resource upload URL for an App, which may be artifacts or source archive.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsGetResourceUploadUrlResponse>
     */
    getResourceUploadUrl(resourceGroupName: string, serviceName: string, appName: string, options?: msRest.RequestOptionsBase): Promise<Models.AppsGetResourceUploadUrlResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param callback The callback
     */
    getResourceUploadUrl(resourceGroupName: string, serviceName: string, appName: string, callback: msRest.ServiceCallback<Models.ResourceUploadDefinition>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    getResourceUploadUrl(resourceGroupName: string, serviceName: string, appName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ResourceUploadDefinition>): void;
    /**
     * Check the resource name is valid as well as not in use.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param validatePayload Custom domain payload to be validated
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsValidateDomainResponse>
     */
    validateDomain(resourceGroupName: string, serviceName: string, appName: string, validatePayload: Models.CustomDomainValidatePayload, options?: msRest.RequestOptionsBase): Promise<Models.AppsValidateDomainResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param validatePayload Custom domain payload to be validated
     * @param callback The callback
     */
    validateDomain(resourceGroupName: string, serviceName: string, appName: string, validatePayload: Models.CustomDomainValidatePayload, callback: msRest.ServiceCallback<Models.CustomDomainValidateResult>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param validatePayload Custom domain payload to be validated
     * @param options The optional parameters
     * @param callback The callback
     */
    validateDomain(resourceGroupName: string, serviceName: string, appName: string, validatePayload: Models.CustomDomainValidatePayload, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomDomainValidateResult>): void;
    /**
     * Create a new App or update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the create or update operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, appName: string, appResource: Models.AppResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Operation to delete an App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(resourceGroupName: string, serviceName: string, appName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Operation to update an exiting App.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param appName The name of the App resource.
     * @param appResource Parameters for the update operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginUpdate(resourceGroupName: string, serviceName: string, appName: string, appResource: Models.AppResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Handles requests to list all resources in a Service.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.AppsListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AppsListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AppResourceCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AppResourceCollection>): void;
}
//# sourceMappingURL=apps.d.ts.map