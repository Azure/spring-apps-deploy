import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { AppPlatformManagementClientContext } from "../appPlatformManagementClientContext";
/** Class representing a MonitoringSettings. */
export declare class MonitoringSettings {
    private readonly client;
    /**
     * Create a MonitoringSettings.
     * @param {AppPlatformManagementClientContext} client Reference to the service client.
     */
    constructor(client: AppPlatformManagementClientContext);
    /**
     * Get the Monitoring Setting and its properties.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.MonitoringSettingsGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringSettingsGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.MonitoringSettingResource>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MonitoringSettingResource>): void;
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param [options] The optional parameters
     * @returns Promise<Models.MonitoringSettingsUpdatePutResponse>
     */
    updatePut(resourceGroupName: string, serviceName: string, monitoringSettingResource: Models.MonitoringSettingResource, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringSettingsUpdatePutResponse>;
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param [options] The optional parameters
     * @returns Promise<Models.MonitoringSettingsUpdatePatchResponse>
     */
    updatePatch(resourceGroupName: string, serviceName: string, monitoringSettingResource: Models.MonitoringSettingResource, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringSettingsUpdatePatchResponse>;
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginUpdatePut(resourceGroupName: string, serviceName: string, monitoringSettingResource: Models.MonitoringSettingResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Update the Monitoring Setting.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param monitoringSettingResource Parameters for the update operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginUpdatePatch(resourceGroupName: string, serviceName: string, monitoringSettingResource: Models.MonitoringSettingResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
}
//# sourceMappingURL=monitoringSettings.d.ts.map