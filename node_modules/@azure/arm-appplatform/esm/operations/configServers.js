/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/configServersMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ConfigServers. */
var ConfigServers = /** @class */ (function () {
    /**
     * Create a ConfigServers.
     * @param {AppPlatformManagementClientContext} client Reference to the service client.
     */
    function ConfigServers(client) {
        this.client = client;
    }
    ConfigServers.prototype.get = function (resourceGroupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param [options] The optional parameters
     * @returns Promise<Models.ConfigServersUpdatePutResponse>
     */
    ConfigServers.prototype.updatePut = function (resourceGroupName, serviceName, configServerResource, options) {
        return this.beginUpdatePut(resourceGroupName, serviceName, configServerResource, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param [options] The optional parameters
     * @returns Promise<Models.ConfigServersUpdatePatchResponse>
     */
    ConfigServers.prototype.updatePatch = function (resourceGroupName, serviceName, configServerResource, options) {
        return this.beginUpdatePatch(resourceGroupName, serviceName, configServerResource, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Check if the config server settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerSettings Config server settings to be validated
     * @param [options] The optional parameters
     * @returns Promise<Models.ConfigServersValidateResponse>
     */
    ConfigServers.prototype.validate = function (resourceGroupName, serviceName, configServerSettings, options) {
        return this.beginValidate(resourceGroupName, serviceName, configServerSettings, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ConfigServers.prototype.beginUpdatePut = function (resourceGroupName, serviceName, configServerResource, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            configServerResource: configServerResource,
            options: options
        }, beginUpdatePutOperationSpec, options);
    };
    /**
     * Update the config server.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerResource Parameters for the update operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ConfigServers.prototype.beginUpdatePatch = function (resourceGroupName, serviceName, configServerResource, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            configServerResource: configServerResource,
            options: options
        }, beginUpdatePatchOperationSpec, options);
    };
    /**
     * Check if the config server settings are valid.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param configServerSettings Config server settings to be validated
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ConfigServers.prototype.beginValidate = function (resourceGroupName, serviceName, configServerSettings, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            configServerSettings: configServerSettings,
            options: options
        }, beginValidateOperationSpec, options);
    };
    return ConfigServers;
}());
export { ConfigServers };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ConfigServerResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdatePutOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "configServerResource",
        mapper: __assign(__assign({}, Mappers.ConfigServerResource), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ConfigServerResource
        },
        202: {
            bodyMapper: Mappers.ConfigServerResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdatePatchOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/default",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "configServerResource",
        mapper: __assign(__assign({}, Mappers.ConfigServerResource), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ConfigServerResource
        },
        202: {
            bodyMapper: Mappers.ConfigServerResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginValidateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/configServers/validate",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "configServerSettings",
        mapper: __assign(__assign({}, Mappers.ConfigServerSettings), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ConfigServerSettingsValidateResult
        },
        202: {
            bodyMapper: Mappers.ConfigServerSettingsValidateResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=configServers.js.map