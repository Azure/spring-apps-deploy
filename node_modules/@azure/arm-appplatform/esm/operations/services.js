/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/servicesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Services. */
var Services = /** @class */ (function () {
    /**
     * Create a Services.
     * @param {AppPlatformManagementClientContext} client Reference to the service client.
     */
    function Services(client) {
        this.client = client;
    }
    Services.prototype.get = function (resourceGroupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Create a new Service or update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the create or update operation
     * @param [options] The optional parameters
     * @returns Promise<Models.ServicesCreateOrUpdateResponse>
     */
    Services.prototype.createOrUpdate = function (resourceGroupName, serviceName, resource, options) {
        return this.beginCreateOrUpdate(resourceGroupName, serviceName, resource, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Operation to delete a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Services.prototype.deleteMethod = function (resourceGroupName, serviceName, options) {
        return this.beginDeleteMethod(resourceGroupName, serviceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Operation to update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the update operation
     * @param [options] The optional parameters
     * @returns Promise<Models.ServicesUpdateResponse>
     */
    Services.prototype.update = function (resourceGroupName, serviceName, resource, options) {
        return this.beginUpdate(resourceGroupName, serviceName, resource, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Services.prototype.listTestKeys = function (resourceGroupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, listTestKeysOperationSpec, callback);
    };
    Services.prototype.regenerateTestKey = function (resourceGroupName, serviceName, regenerateTestKeyRequest, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            regenerateTestKeyRequest: regenerateTestKeyRequest,
            options: options
        }, regenerateTestKeyOperationSpec, callback);
    };
    Services.prototype.disableTestEndpoint = function (resourceGroupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, disableTestEndpointOperationSpec, callback);
    };
    Services.prototype.enableTestEndpoint = function (resourceGroupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, enableTestEndpointOperationSpec, callback);
    };
    Services.prototype.checkNameAvailability = function (location, availabilityParameters, options, callback) {
        return this.client.sendOperationRequest({
            location: location,
            availabilityParameters: availabilityParameters,
            options: options
        }, checkNameAvailabilityOperationSpec, callback);
    };
    Services.prototype.listBySubscription = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listBySubscriptionOperationSpec, callback);
    };
    Services.prototype.list = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * Create a new Service or update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the create or update operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Services.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, resource, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            resource: resource,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Operation to delete a Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Services.prototype.beginDeleteMethod = function (resourceGroupName, serviceName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Operation to update an exiting Service.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param resource Parameters for the update operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Services.prototype.beginUpdate = function (resourceGroupName, serviceName, resource, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            resource: resource,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    Services.prototype.listBySubscriptionNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listBySubscriptionNextOperationSpec, callback);
    };
    Services.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return Services;
}());
export { Services };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ServiceResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listTestKeysOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/listTestKeys",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TestKeys
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var regenerateTestKeyOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/regenerateTestKey",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "regenerateTestKeyRequest",
        mapper: __assign(__assign({}, Mappers.RegenerateTestKeyRequestPayload), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.TestKeys
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var disableTestEndpointOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/disableTestEndpoint",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var enableTestEndpointOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/enableTestEndpoint",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TestKeys
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var checkNameAvailabilityOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/locations/{location}/checkNameAvailability",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.location
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "availabilityParameters",
        mapper: __assign(__assign({}, Mappers.NameAvailabilityParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.NameAvailability
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listBySubscriptionOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/Spring",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ServiceResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ServiceResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "resource",
        mapper: __assign(__assign({}, Mappers.ServiceResource), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ServiceResource
        },
        201: {
            bodyMapper: Mappers.ServiceResource
        },
        202: {
            bodyMapper: Mappers.ServiceResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "resource",
        mapper: __assign(__assign({}, Mappers.ServiceResource), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ServiceResource
        },
        202: {
            bodyMapper: Mappers.ServiceResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listBySubscriptionNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ServiceResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ServiceResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=services.js.map