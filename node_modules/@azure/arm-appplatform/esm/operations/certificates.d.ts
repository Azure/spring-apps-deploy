import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { AppPlatformManagementClientContext } from "../appPlatformManagementClientContext";
/** Class representing a Certificates. */
export declare class Certificates {
    private readonly client;
    /**
     * Create a Certificates.
     * @param {AppPlatformManagementClientContext} client Reference to the service client.
     */
    constructor(client: AppPlatformManagementClientContext);
    /**
     * Get the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificatesGetResponse>
     */
    get(resourceGroupName: string, serviceName: string, certificateName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, certificateName: string, callback: msRest.ServiceCallback<Models.CertificateResource>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceName: string, certificateName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateResource>): void;
    /**
     * Create or update certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificatesCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, certificateName: string, certificateResource: Models.CertificateResource, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesCreateOrUpdateResponse>;
    /**
     * Delete the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceName: string, certificateName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * List all the certificates of one user.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificatesListResponse>
     */
    list(resourceGroupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesListResponse>;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param callback The callback
     */
    list(resourceGroupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.CertificateResourceCollection>): void;
    /**
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(resourceGroupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateResourceCollection>): void;
    /**
     * Create or update certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceName: string, certificateName: string, certificateResource: Models.CertificateResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Delete the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(resourceGroupName: string, serviceName: string, certificateName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * List all the certificates of one user.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificatesListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CertificatesListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CertificateResourceCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateResourceCollection>): void;
}
//# sourceMappingURL=certificates.d.ts.map