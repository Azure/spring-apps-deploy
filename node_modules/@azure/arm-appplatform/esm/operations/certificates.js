/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/certificatesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Certificates. */
var Certificates = /** @class */ (function () {
    /**
     * Create a Certificates.
     * @param {AppPlatformManagementClientContext} client Reference to the service client.
     */
    function Certificates(client) {
        this.client = client;
    }
    Certificates.prototype.get = function (resourceGroupName, serviceName, certificateName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            certificateName: certificateName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Create or update certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @param [options] The optional parameters
     * @returns Promise<Models.CertificatesCreateOrUpdateResponse>
     */
    Certificates.prototype.createOrUpdate = function (resourceGroupName, serviceName, certificateName, certificateResource, options) {
        return this.beginCreateOrUpdate(resourceGroupName, serviceName, certificateName, certificateResource, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Delete the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Certificates.prototype.deleteMethod = function (resourceGroupName, serviceName, certificateName, options) {
        return this.beginDeleteMethod(resourceGroupName, serviceName, certificateName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Certificates.prototype.list = function (resourceGroupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * Create or update certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param certificateResource Parameters for the create or update operation
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Certificates.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceName, certificateName, certificateResource, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            certificateName: certificateName,
            certificateResource: certificateResource,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Delete the certificate resource.
     * @param resourceGroupName The name of the resource group that contains the resource. You can
     * obtain this value from the Azure Resource Manager API or the portal.
     * @param serviceName The name of the Service resource.
     * @param certificateName The name of the certificate resource.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Certificates.prototype.beginDeleteMethod = function (resourceGroupName, serviceName, certificateName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceName: serviceName,
            certificateName: certificateName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    Certificates.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return Certificates;
}());
export { Certificates };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.certificateName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateResourceCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.certificateName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "certificateResource",
        mapper: __assign(__assign({}, Mappers.CertificateResource), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CertificateResource
        },
        201: {
            bodyMapper: Mappers.CertificateResource
        },
        202: {
            bodyMapper: Mappers.CertificateResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceName,
        Parameters.certificateName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CertificateResourceCollection
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=certificates.js.map