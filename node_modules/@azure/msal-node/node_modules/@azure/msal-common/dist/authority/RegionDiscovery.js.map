{"version":3,"file":"RegionDiscovery.js","sources":["../../src/authority/RegionDiscovery.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule } from \"../network/INetworkModule\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { IMDSBadResponse } from \"../response/IMDSBadResponse\";\r\nimport { Constants, RegionDiscoverySources, ResponseCodes } from \"../utils/Constants\";\r\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\r\n\r\nexport class RegionDiscovery {\r\n    // Network interface to make requests with.\r\n    protected networkInterface: INetworkModule;\r\n    // Options for the IMDS endpoint request\r\n    protected static IMDS_OPTIONS = {headers: {\"Metadata\": \"true\"}};\r\n\r\n    constructor(networkInterface: INetworkModule) {\r\n        this.networkInterface = networkInterface;\r\n    }\r\n\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     * \r\n     * @returns Promise<string | null>\r\n     */\r\n    public async detectRegion(environmentRegion: string | undefined, regionDiscoveryMetadata: RegionDiscoveryMetadata): Promise<string | null> {\r\n        // Initialize auto detected region with the region from the envrionment \r\n        let autodetectedRegionName = environmentRegion;\r\n\r\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS \r\n        if (!autodetectedRegionName) {\r\n            try {\r\n                const localIMDSVersionResponse = await this.getRegionFromIMDS(Constants.IMDS_VERSION);\r\n                if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                    autodetectedRegionName = localIMDSVersionResponse.body;\r\n                    regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                } \r\n                \r\n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry. \r\n                if (localIMDSVersionResponse.status === ResponseCodes.httpBadRequest) {\r\n                    const currentIMDSVersion = await this.getCurrentVersion();\r\n                    if (!currentIMDSVersion) {\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return null;\r\n                    }\r\n\r\n                    const currentIMDSVersionResponse = await this.getRegionFromIMDS(currentIMDSVersion);\r\n                    if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                        autodetectedRegionName = currentIMDSVersionResponse.body;\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                    }\r\n                }\r\n            } catch(e) {\r\n                regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                return null;\r\n            } \r\n        } else {\r\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n        }\r\n\r\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n        if (!autodetectedRegionName) {\r\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n        }\r\n\r\n        return autodetectedRegionName || null;\r\n    }\r\n\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     * \r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    private async getRegionFromIMDS(version: string): Promise<NetworkResponse<string>> {\r\n        return this.networkInterface.sendGetRequestAsync<string>(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, RegionDiscovery.IMDS_OPTIONS, Constants.IMDS_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *  \r\n     * @returns Promise<string | null>\r\n     */\r\n    private async getCurrentVersion(): Promise<string | null> {\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync<IMDSBadResponse>(`${Constants.IMDS_ENDPOINT}?format=json`, RegionDiscovery.IMDS_OPTIONS);\r\n\r\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\r\n                return response.body[\"newest-versions\"][0];\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;;;;;IAiBI,yBAAY,gBAAgC;QACxC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;KAC5C;;;;;;IAOY,sCAAY,GAAzB,UAA0B,iBAAqC,EAAE,uBAAgD;;;;;;wBAEzG,sBAAsB,GAAG,iBAAiB,CAAC;6BAG3C,CAAC,sBAAsB,EAAvB,wBAAuB;;;;wBAEc,qBAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,YAAY,CAAC,EAAA;;wBAA/E,wBAAwB,GAAG,SAAoD;wBACrF,IAAI,wBAAwB,CAAC,MAAM,KAAK,aAAa,CAAC,WAAW,EAAE;4BAC/D,sBAAsB,GAAG,wBAAwB,CAAC,IAAI,CAAC;4BACvD,uBAAuB,CAAC,aAAa,GAAG,sBAAsB,CAAC,IAAI,CAAC;yBACvE;8BAGG,wBAAwB,CAAC,MAAM,KAAK,aAAa,CAAC,cAAc,CAAA,EAAhE,wBAAgE;wBACrC,qBAAM,IAAI,CAAC,iBAAiB,EAAE,EAAA;;wBAAnD,kBAAkB,GAAG,SAA8B;wBACzD,IAAI,CAAC,kBAAkB,EAAE;4BACrB,uBAAuB,CAAC,aAAa,GAAG,sBAAsB,CAAC,qBAAqB,CAAC;4BACrF,sBAAO,IAAI,EAAC;yBACf;wBAEkC,qBAAM,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,EAAA;;wBAA7E,0BAA0B,GAAG,SAAgD;wBACnF,IAAI,0BAA0B,CAAC,MAAM,KAAK,aAAa,CAAC,WAAW,EAAE;4BACjE,sBAAsB,GAAG,0BAA0B,CAAC,IAAI,CAAC;4BACzD,uBAAuB,CAAC,aAAa,GAAG,sBAAsB,CAAC,IAAI,CAAC;yBACvE;;;;;wBAGL,uBAAuB,CAAC,aAAa,GAAG,sBAAsB,CAAC,qBAAqB,CAAC;wBACrF,sBAAO,IAAI,EAAC;;;wBAGhB,uBAAuB,CAAC,aAAa,GAAG,sBAAsB,CAAC,oBAAoB,CAAC;;;;wBAIxF,IAAI,CAAC,sBAAsB,EAAE;4BACzB,uBAAuB,CAAC,aAAa,GAAG,sBAAsB,CAAC,qBAAqB,CAAC;yBACxF;wBAED,sBAAO,sBAAsB,IAAI,IAAI,EAAC;;;;KACzC;;;;;;;IAQa,2CAAiB,GAA/B,UAAgC,OAAe;;;gBAC3C,sBAAO,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAY,SAAS,CAAC,aAAa,qBAAgB,OAAO,iBAAc,EAAE,eAAe,CAAC,YAAY,EAAE,SAAS,CAAC,YAAY,CAAC,EAAC;;;KACnL;;;;;;IAOa,2CAAiB,GAA/B;;;;;;;wBAEyB,qBAAM,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAqB,SAAS,CAAC,aAAa,iBAAc,EAAE,eAAe,CAAC,YAAY,CAAC,EAAA;;wBAAnJ,QAAQ,GAAG,SAAwI;;wBAGzJ,IAAI,QAAQ,CAAC,MAAM,KAAK,aAAa,CAAC,cAAc,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;4BACtJ,sBAAO,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAC;yBAC9C;wBAED,sBAAO,IAAI,EAAC;;;wBAEZ,sBAAO,IAAI,EAAC;;;;;KAEnB;;IAlFgB,4BAAY,GAAG,EAAC,OAAO,EAAE,EAAC,UAAU,EAAE,MAAM,EAAC,EAAC,CAAC;IAmFpE,sBAAC;CAvFD;;;;"}