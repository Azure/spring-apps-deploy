{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../../../src/generated/src/operations/file.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  FileCreateOptionalParams,\n  FileCreateResponse,\n  FileDownloadOptionalParams,\n  FileDownloadResponse,\n  FileGetPropertiesOptionalParams,\n  FileGetPropertiesResponse,\n  FileDeleteOptionalParams,\n  FileDeleteResponse,\n  FileSetHttpHeadersOptionalParams,\n  FileSetHttpHeadersResponse,\n  FileSetMetadataOptionalParams,\n  FileSetMetadataResponse,\n  FileAcquireLeaseOptionalParams,\n  FileAcquireLeaseResponse,\n  FileReleaseLeaseOptionalParams,\n  FileReleaseLeaseResponse,\n  FileChangeLeaseOptionalParams,\n  FileChangeLeaseResponse,\n  FileBreakLeaseOptionalParams,\n  FileBreakLeaseResponse,\n  FileRangeWriteType,\n  FileUploadRangeOptionalParams,\n  FileUploadRangeResponse,\n  FileUploadRangeFromURLOptionalParams,\n  FileUploadRangeFromURLResponse,\n  FileGetRangeListOptionalParams,\n  FileGetRangeListResponse,\n  FileStartCopyOptionalParams,\n  FileStartCopyResponse,\n  FileAbortCopyOptionalParams,\n  FileAbortCopyResponse,\n  FileListHandlesOptionalParams,\n  FileListHandlesResponse,\n  FileForceCloseHandlesOptionalParams,\n  FileForceCloseHandlesResponse\n} from \"../models\";\n\n/** Class representing a File. */\nexport class File {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class File class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new file or replaces a file. Note it only initializes the file with no content.\n   * @param fileContentLength Specifies the maximum size for the file, up to 4 TB.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   *                       ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param options The options parameters.\n   */\n  create(\n    fileContentLength: number,\n    fileAttributes: string,\n    fileCreatedOn: string,\n    fileLastWriteOn: string,\n    options?: FileCreateOptionalParams\n  ): Promise<FileCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      fileContentLength,\n      fileAttributes,\n      fileCreatedOn,\n      fileLastWriteOn,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<FileCreateResponse>;\n  }\n\n  /**\n   * Reads or downloads a file from the system, including its metadata and properties.\n   * @param options The options parameters.\n   */\n  download(\n    options?: FileDownloadOptionalParams\n  ): Promise<FileDownloadResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      downloadOperationSpec\n    ) as Promise<FileDownloadResponse>;\n  }\n\n  /**\n   * Returns all user-defined metadata, standard HTTP properties, and system properties for the file. It\n   * does not return the content of the file.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: FileGetPropertiesOptionalParams\n  ): Promise<FileGetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPropertiesOperationSpec\n    ) as Promise<FileGetPropertiesResponse>;\n  }\n\n  /**\n   * removes the file from the storage account.\n   * @param options The options parameters.\n   */\n  delete(options?: FileDeleteOptionalParams): Promise<FileDeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<FileDeleteResponse>;\n  }\n\n  /**\n   * Sets HTTP headers on the file.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   *                       ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param options The options parameters.\n   */\n  setHttpHeaders(\n    fileAttributes: string,\n    fileCreatedOn: string,\n    fileLastWriteOn: string,\n    options?: FileSetHttpHeadersOptionalParams\n  ): Promise<FileSetHttpHeadersResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      fileAttributes,\n      fileCreatedOn,\n      fileLastWriteOn,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setHttpHeadersOperationSpec\n    ) as Promise<FileSetHttpHeadersResponse>;\n  }\n\n  /**\n   * Updates user-defined metadata for the specified file.\n   * @param options The options parameters.\n   */\n  setMetadata(\n    options?: FileSetMetadataOptionalParams\n  ): Promise<FileSetMetadataResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setMetadataOperationSpec\n    ) as Promise<FileSetMetadataResponse>;\n  }\n\n  /**\n   * [Update] The Lease File operation establishes and manages a lock on a file for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  acquireLease(\n    options?: FileAcquireLeaseOptionalParams\n  ): Promise<FileAcquireLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      acquireLeaseOperationSpec\n    ) as Promise<FileAcquireLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease File operation establishes and manages a lock on a file for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  releaseLease(\n    leaseId: string,\n    options?: FileReleaseLeaseOptionalParams\n  ): Promise<FileReleaseLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      releaseLeaseOperationSpec\n    ) as Promise<FileReleaseLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease File operation establishes and manages a lock on a file for write and delete\n   * operations\n   * @param leaseId Specifies the current lease ID on the resource.\n   * @param options The options parameters.\n   */\n  changeLease(\n    leaseId: string,\n    options?: FileChangeLeaseOptionalParams\n  ): Promise<FileChangeLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      leaseId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      changeLeaseOperationSpec\n    ) as Promise<FileChangeLeaseResponse>;\n  }\n\n  /**\n   * [Update] The Lease File operation establishes and manages a lock on a file for write and delete\n   * operations\n   * @param options The options parameters.\n   */\n  breakLease(\n    options?: FileBreakLeaseOptionalParams\n  ): Promise<FileBreakLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      breakLeaseOperationSpec\n    ) as Promise<FileBreakLeaseResponse>;\n  }\n\n  /**\n   * Upload a range of bytes to a file.\n   * @param range Specifies the range of bytes to be written. Both the start and end of the range must be\n   *              specified. For an update operation, the range can be up to 4 MB in size. For a clear operation, the\n   *              range can be up to the value of the file's full size. The File service accepts only a single byte\n   *              range for the Range and 'x-ms-range' headers, and the byte range must be specified in the following\n   *              format: bytes=startByte-endByte.\n   * @param fileRangeWrite Specify one of the following options: - Update: Writes the bytes specified by\n   *                       the request body into the specified range. The Range and Content-Length headers must match to\n   *                       perform the update. - Clear: Clears the specified range and releases the space used in storage for\n   *                       that range. To clear a range, set the Content-Length header to zero, and set the Range header to a\n   *                       value that indicates the range to clear, up to maximum file size.\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When the\n   *                      x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param options The options parameters.\n   */\n  uploadRange(\n    range: string,\n    fileRangeWrite: FileRangeWriteType,\n    contentLength: number,\n    options?: FileUploadRangeOptionalParams\n  ): Promise<FileUploadRangeResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      range,\n      fileRangeWrite,\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      uploadRangeOperationSpec\n    ) as Promise<FileUploadRangeResponse>;\n  }\n\n  /**\n   * Upload a range of bytes to a file where the contents are read from a URL.\n   * @param range Writes data to the specified byte range in the file.\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a file\n   *                   to another file within the same storage account, you may use Shared Key to authenticate the source\n   *                   file. If you are copying a file from another storage account, or if you are copying a blob from the\n   *                   same storage account or another storage account, then you must authenticate the source file or blob\n   *                   using a shared access signature. If the source is a public blob, no authentication is required to\n   *                   perform the copy operation. A file in a share snapshot can also be specified as a copy source.\n   * @param contentLength Specifies the number of bytes being transmitted in the request body. When the\n   *                      x-ms-write header is set to clear, the value of this header must be set to zero.\n   * @param options The options parameters.\n   */\n  uploadRangeFromURL(\n    range: string,\n    copySource: string,\n    contentLength: number,\n    options?: FileUploadRangeFromURLOptionalParams\n  ): Promise<FileUploadRangeFromURLResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      range,\n      copySource,\n      contentLength,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      uploadRangeFromURLOperationSpec\n    ) as Promise<FileUploadRangeFromURLResponse>;\n  }\n\n  /**\n   * Returns the list of valid ranges for a file.\n   * @param options The options parameters.\n   */\n  getRangeList(\n    options?: FileGetRangeListOptionalParams\n  ): Promise<FileGetRangeListResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getRangeListOperationSpec\n    ) as Promise<FileGetRangeListResponse>;\n  }\n\n  /**\n   * Copies a blob or file to a destination file within the storage account.\n   * @param copySource Specifies the URL of the source file or blob, up to 2 KB in length. To copy a file\n   *                   to another file within the same storage account, you may use Shared Key to authenticate the source\n   *                   file. If you are copying a file from another storage account, or if you are copying a blob from the\n   *                   same storage account or another storage account, then you must authenticate the source file or blob\n   *                   using a shared access signature. If the source is a public blob, no authentication is required to\n   *                   perform the copy operation. A file in a share snapshot can also be specified as a copy source.\n   * @param options The options parameters.\n   */\n  startCopy(\n    copySource: string,\n    options?: FileStartCopyOptionalParams\n  ): Promise<FileStartCopyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copySource,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      startCopyOperationSpec\n    ) as Promise<FileStartCopyResponse>;\n  }\n\n  /**\n   * Aborts a pending Copy File operation, and leaves a destination file with zero length and full\n   * metadata.\n   * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy File\n   *               operation.\n   * @param options The options parameters.\n   */\n  abortCopy(\n    copyId: string,\n    options?: FileAbortCopyOptionalParams\n  ): Promise<FileAbortCopyResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      copyId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      abortCopyOperationSpec\n    ) as Promise<FileAbortCopyResponse>;\n  }\n\n  /**\n   * Lists handles for file\n   * @param options The options parameters.\n   */\n  listHandles(\n    options?: FileListHandlesOptionalParams\n  ): Promise<FileListHandlesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listHandlesOperationSpec\n    ) as Promise<FileListHandlesResponse>;\n  }\n\n  /**\n   * Closes all handles open for given file\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterisk (‘*’) is\n   *                 a wildcard that specifies all handles.\n   * @param options The options parameters.\n   */\n  forceCloseHandles(\n    handleId: string,\n    options?: FileForceCloseHandlesOptionalParams\n  ): Promise<FileForceCloseHandlesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      handleId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      forceCloseHandlesOperationSpec\n    ) as Promise<FileForceCloseHandlesResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.FileCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.fileAttributes,\n    Parameters.fileCreatedOn,\n    Parameters.fileLastWriteOn,\n    Parameters.fileContentLength,\n    Parameters.fileTypeConstant,\n    Parameters.fileContentType,\n    Parameters.fileContentEncoding,\n    Parameters.fileContentLanguage,\n    Parameters.fileCacheControl,\n    Parameters.fileContentMD5,\n    Parameters.fileContentDisposition\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst downloadOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.FileDownloadHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.FileDownloadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileDownloadExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.range,\n    Parameters.rangeGetContentMD5\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.FileGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.shareSnapshot],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.leaseId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.FileDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.leaseId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setHttpHeadersOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.FileSetHttpHeadersHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileSetHttpHeadersExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.comp, Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.fileAttributes,\n    Parameters.fileCreatedOn,\n    Parameters.fileLastWriteOn,\n    Parameters.fileContentType,\n    Parameters.fileContentEncoding,\n    Parameters.fileContentLanguage,\n    Parameters.fileCacheControl,\n    Parameters.fileContentMD5,\n    Parameters.fileContentDisposition,\n    Parameters.fileContentLength1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.FileSetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileSetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp5],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst acquireLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.FileAcquireLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileAcquireLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.action,\n    Parameters.duration,\n    Parameters.proposedLeaseId,\n    Parameters.requestId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst releaseLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.FileReleaseLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileReleaseLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.requestId,\n    Parameters.action1,\n    Parameters.leaseId1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst changeLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.FileChangeLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileChangeLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.proposedLeaseId,\n    Parameters.requestId,\n    Parameters.leaseId1,\n    Parameters.action2\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst breakLeaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.FileBreakLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileBreakLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.requestId,\n    Parameters.action4\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst uploadRangeOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.FileUploadRangeHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileUploadRangeExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.leaseId,\n    Parameters.contentType1,\n    Parameters.accept3,\n    Parameters.range1,\n    Parameters.fileRangeWrite,\n    Parameters.contentLength,\n    Parameters.contentMD5\n  ],\n  contentType: \"application/octet-stream\",\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst uploadRangeFromURLOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.FileUploadRangeFromURLHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileUploadRangeFromURLExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.comp11],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.range1,\n    Parameters.contentLength,\n    Parameters.copySource,\n    Parameters.sourceRange,\n    Parameters.fileRangeWriteFromUrl,\n    Parameters.sourceContentCrc64,\n    Parameters.sourceIfMatchCrc64,\n    Parameters.sourceIfNoneMatchCrc64,\n    Parameters.copySourceAuthorization\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getRangeListOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ShareFileRangeList,\n      headersMapper: Mappers.FileGetRangeListHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileGetRangeListExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.shareSnapshot,\n    Parameters.comp12,\n    Parameters.prevsharesnapshot\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.range\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst startCopyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    202: {\n      headersMapper: Mappers.FileStartCopyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileStartCopyExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.leaseId,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.copySource,\n    Parameters.filePermissionCopyMode,\n    Parameters.ignoreReadOnly,\n    Parameters.fileAttributes1,\n    Parameters.fileCreationTime,\n    Parameters.fileLastWriteTime,\n    Parameters.setArchiveAttribute\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst abortCopyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    204: {\n      headersMapper: Mappers.FileAbortCopyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileAbortCopyExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp13,\n    Parameters.copyId\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.leaseId,\n    Parameters.copyActionAbortConstant\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listHandlesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListHandlesResponse,\n      headersMapper: Mappers.FileListHandlesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileListHandlesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxResults,\n    Parameters.shareSnapshot,\n    Parameters.comp9\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst forceCloseHandlesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}/{fileName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.FileForceCloseHandlesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileForceCloseHandlesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.shareSnapshot,\n    Parameters.comp10\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.handleId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n"]}