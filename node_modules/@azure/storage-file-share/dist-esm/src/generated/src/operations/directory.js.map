{"version":3,"file":"directory.js","sourceRoot":"","sources":["../../../../../src/generated/src/operations/directory.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  DirectoryCreateOptionalParams,\n  DirectoryCreateResponse,\n  DirectoryGetPropertiesOptionalParams,\n  DirectoryGetPropertiesResponse,\n  DirectoryDeleteOptionalParams,\n  DirectoryDeleteResponse,\n  DirectorySetPropertiesOptionalParams,\n  DirectorySetPropertiesResponse,\n  DirectorySetMetadataOptionalParams,\n  DirectorySetMetadataResponse,\n  DirectoryListFilesAndDirectoriesSegmentOptionalParams,\n  DirectoryListFilesAndDirectoriesSegmentResponse,\n  DirectoryListHandlesOptionalParams,\n  DirectoryListHandlesResponse,\n  DirectoryForceCloseHandlesOptionalParams,\n  DirectoryForceCloseHandlesResponse\n} from \"../models\";\n\n/** Class representing a Directory. */\nexport class Directory {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class Directory class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a new directory under the specified share or parent directory.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   *                       ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param options The options parameters.\n   */\n  create(\n    fileAttributes: string,\n    fileCreatedOn: string,\n    fileLastWriteOn: string,\n    options?: DirectoryCreateOptionalParams\n  ): Promise<DirectoryCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      fileAttributes,\n      fileCreatedOn,\n      fileLastWriteOn,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<DirectoryCreateResponse>;\n  }\n\n  /**\n   * Returns all system properties for the specified directory, and can also be used to check the\n   * existence of a directory. The data returned does not include the files in the directory or any\n   * subdirectories.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: DirectoryGetPropertiesOptionalParams\n  ): Promise<DirectoryGetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPropertiesOperationSpec\n    ) as Promise<DirectoryGetPropertiesResponse>;\n  }\n\n  /**\n   * Removes the specified empty directory. Note that the directory must be empty before it can be\n   * deleted.\n   * @param options The options parameters.\n   */\n  delete(\n    options?: DirectoryDeleteOptionalParams\n  ): Promise<DirectoryDeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<DirectoryDeleteResponse>;\n  }\n\n  /**\n   * Sets properties on the directory.\n   * @param fileAttributes If specified, the provided file attributes shall be set. Default value:\n   *                       ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be specified as default.\n   * @param fileCreatedOn Creation time for the file/directory. Default value: Now.\n   * @param fileLastWriteOn Last write time for the file/directory. Default value: Now.\n   * @param options The options parameters.\n   */\n  setProperties(\n    fileAttributes: string,\n    fileCreatedOn: string,\n    fileLastWriteOn: string,\n    options?: DirectorySetPropertiesOptionalParams\n  ): Promise<DirectorySetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      fileAttributes,\n      fileCreatedOn,\n      fileLastWriteOn,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setPropertiesOperationSpec\n    ) as Promise<DirectorySetPropertiesResponse>;\n  }\n\n  /**\n   * Updates user defined metadata for the specified directory.\n   * @param options The options parameters.\n   */\n  setMetadata(\n    options?: DirectorySetMetadataOptionalParams\n  ): Promise<DirectorySetMetadataResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setMetadataOperationSpec\n    ) as Promise<DirectorySetMetadataResponse>;\n  }\n\n  /**\n   * Returns a list of files or directories under the specified share or directory. It lists the contents\n   * only for a single level of the directory hierarchy.\n   * @param options The options parameters.\n   */\n  listFilesAndDirectoriesSegment(\n    options?: DirectoryListFilesAndDirectoriesSegmentOptionalParams\n  ): Promise<DirectoryListFilesAndDirectoriesSegmentResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listFilesAndDirectoriesSegmentOperationSpec\n    ) as Promise<DirectoryListFilesAndDirectoriesSegmentResponse>;\n  }\n\n  /**\n   * Lists handles for directory.\n   * @param options The options parameters.\n   */\n  listHandles(\n    options?: DirectoryListHandlesOptionalParams\n  ): Promise<DirectoryListHandlesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listHandlesOperationSpec\n    ) as Promise<DirectoryListHandlesResponse>;\n  }\n\n  /**\n   * Closes all handles open for given directory.\n   * @param handleId Specifies handle ID opened on the file or directory to be closed. Asterisk (‘*’) is\n   *                 a wildcard that specifies all handles.\n   * @param options The options parameters.\n   */\n  forceCloseHandles(\n    handleId: string,\n    options?: DirectoryForceCloseHandlesOptionalParams\n  ): Promise<DirectoryForceCloseHandlesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      handleId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      forceCloseHandlesOperationSpec\n    ) as Promise<DirectoryForceCloseHandlesResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.DirectoryCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.metadata,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.fileAttributes,\n    Parameters.fileCreatedOn,\n    Parameters.fileLastWriteOn\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectoryGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.shareSnapshot,\n    Parameters.restype2\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.DirectoryDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeoutInSeconds, Parameters.restype2],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.version, Parameters.accept1],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectorySetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectorySetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.comp,\n    Parameters.timeoutInSeconds,\n    Parameters.restype2\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.filePermission,\n    Parameters.filePermissionKey1,\n    Parameters.fileAttributes,\n    Parameters.fileCreatedOn,\n    Parameters.fileLastWriteOn\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst setMetadataOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectorySetMetadataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectorySetMetadataExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp5,\n    Parameters.restype2\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.metadata\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listFilesAndDirectoriesSegmentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListFilesAndDirectoriesSegmentResponse,\n      headersMapper: Mappers.DirectoryListFilesAndDirectoriesSegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper:\n        Mappers.DirectoryListFilesAndDirectoriesSegmentExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.comp1,\n    Parameters.prefix,\n    Parameters.marker,\n    Parameters.maxResults,\n    Parameters.shareSnapshot,\n    Parameters.restype2,\n    Parameters.include1\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.includeExtendedInfo\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst listHandlesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListHandlesResponse,\n      headersMapper: Mappers.DirectoryListHandlesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryListHandlesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.maxResults,\n    Parameters.shareSnapshot,\n    Parameters.comp9\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.recursive\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\nconst forceCloseHandlesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{shareName}/{directory}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.DirectoryForceCloseHandlesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.DirectoryForceCloseHandlesExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeoutInSeconds,\n    Parameters.marker,\n    Parameters.shareSnapshot,\n    Parameters.comp10\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.version,\n    Parameters.accept1,\n    Parameters.recursive,\n    Parameters.handleId\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n"]}