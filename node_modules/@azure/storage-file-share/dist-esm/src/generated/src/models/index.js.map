{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/generated/src/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n/**\n * Defines values for FileType.\n * Possible values include: 'File'\n * @readonly\n * @enum {string}\n */\nexport type FileType = \"File\";\n\n/** Storage service properties. */\nexport interface FileServiceProperties {\n  /** A summary of request statistics grouped by API in hourly aggregates for files. */\n  hourMetrics?: Metrics;\n  /** A summary of request statistics grouped by API in minute aggregates for files. */\n  minuteMetrics?: Metrics;\n  /** The set of CORS rules. */\n  cors?: CorsRule[];\n  /** Protocol settings */\n  protocol?: ShareProtocolSettings;\n}\n\n/** Storage Analytics metrics for file service. */\nexport interface Metrics {\n  /** The version of Storage Analytics to configure. */\n  version: string;\n  /** Indicates whether metrics are enabled for the File service. */\n  enabled: boolean;\n  /** Indicates whether metrics should generate summary statistics for called API operations. */\n  includeAPIs?: boolean;\n  /** The retention policy. */\n  retentionPolicy?: RetentionPolicy;\n}\n\n/** The retention policy. */\nexport interface RetentionPolicy {\n  /** Indicates whether a retention policy is enabled for the File service. If false, metrics data is retained, and the user is responsible for deleting it. */\n  enabled: boolean;\n  /** Indicates the number of days that metrics data should be retained. All data older than this value will be deleted. Metrics data is deleted on a best-effort basis after the retention period expires. */\n  days?: number;\n}\n\n/** CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain. Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain; CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain. */\nexport interface CorsRule {\n  /** The origin domains that are permitted to make a request against the storage service via CORS. The origin domain is the domain from which the request originates. Note that the origin must be an exact case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '*' to allow all origin domains to make requests via CORS. */\n  allowedOrigins: string;\n  /** The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated) */\n  allowedMethods: string;\n  /** The request headers that the origin domain may specify on the CORS request. */\n  allowedHeaders: string;\n  /** The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer. */\n  exposedHeaders: string;\n  /** The maximum amount time that a browser should cache the preflight OPTIONS request. */\n  maxAgeInSeconds: number;\n}\n\n/** Protocol settings */\nexport interface ShareProtocolSettings {\n  /** Settings for SMB protocol. */\n  smb?: ShareSmbSettings;\n}\n\n/** Settings for SMB protocol. */\nexport interface ShareSmbSettings {\n  /** Settings for SMB Multichannel. */\n  multichannel?: SmbMultichannel;\n}\n\n/** Settings for SMB multichannel */\nexport interface SmbMultichannel {\n  /** If SMB multichannel is enabled. */\n  enabled?: boolean;\n}\n\nexport interface StorageError {\n  message?: string;\n  code?: string;\n}\n\n/** An enumeration of shares. */\nexport interface ListSharesResponse {\n  serviceEndpoint: string;\n  prefix?: string;\n  marker?: string;\n  maxResults?: number;\n  shareItems?: ShareItemInternal[];\n  continuationToken: string;\n}\n\n/** A listed Azure Storage share item. */\nexport interface ShareItemInternal {\n  name: string;\n  snapshot?: string;\n  deleted?: boolean;\n  version?: string;\n  /** Properties of a share. */\n  properties: SharePropertiesInternal;\n  /** Dictionary of <string> */\n  metadata?: { [propertyName: string]: string };\n}\n\n/** Properties of a share. */\nexport interface SharePropertiesInternal {\n  lastModified: Date;\n  etag: string;\n  quota: number;\n  provisionedIops?: number;\n  provisionedIngressMBps?: number;\n  provisionedEgressMBps?: number;\n  nextAllowedQuotaDowngradeTime?: Date;\n  deletedTime?: Date;\n  remainingRetentionDays?: number;\n  accessTier?: string;\n  accessTierChangeTime?: Date;\n  accessTierTransitionState?: string;\n  /** The current lease status of the share. */\n  leaseStatus?: LeaseStatusType;\n  /** Lease state of the share. */\n  leaseState?: LeaseStateType;\n  /** When a share is leased, specifies whether the lease is of infinite or fixed duration. */\n  leaseDuration?: LeaseDurationType;\n  enabledProtocols?: string;\n  rootSquash?: ShareRootSquash;\n}\n\n/** A permission (a security descriptor) at the share level. */\nexport interface SharePermission {\n  /** The permission in the Security Descriptor Definition Language (SDDL). */\n  permission: string;\n}\n\n/** Signed identifier. */\nexport interface SignedIdentifier {\n  /** A unique id. */\n  id: string;\n  /** The access policy. */\n  accessPolicy?: AccessPolicy;\n}\n\n/** An Access policy. */\nexport interface AccessPolicy {\n  /** The date-time the policy is active. */\n  startsOn?: string;\n  /** The date-time the policy expires. */\n  expiresOn?: string;\n  /** The permissions for the ACL policy. */\n  permissions?: string;\n}\n\n/** Stats for the share. */\nexport interface ShareStats {\n  /** The approximate size of the data stored in bytes. Note that this value may not include all recently created or recently resized files. */\n  shareUsageBytes: number;\n}\n\n/** An enumeration of directories and files. */\nexport interface ListFilesAndDirectoriesSegmentResponse {\n  serviceEndpoint: string;\n  shareName: string;\n  shareSnapshot?: string;\n  directoryPath: string;\n  prefix: string;\n  marker?: string;\n  maxResults?: number;\n  /** Abstract for entries that can be listed from Directory. */\n  segment: FilesAndDirectoriesListSegment;\n  continuationToken: string;\n  directoryId?: string;\n}\n\n/** Abstract for entries that can be listed from Directory. */\nexport interface FilesAndDirectoriesListSegment {\n  directoryItems: DirectoryItem[];\n  fileItems: FileItem[];\n}\n\n/** A listed directory item. */\nexport interface DirectoryItem {\n  name: string;\n  fileId?: string;\n  /** File properties. */\n  properties?: FileProperty;\n  attributes?: string;\n  permissionKey?: string;\n}\n\n/** File properties. */\nexport interface FileProperty {\n  /** Content length of the file. This value may not be up-to-date since an SMB client may have modified the file locally. The value of Content-Length may not reflect that fact until the handle is closed or the op-lock is broken. To retrieve current property values, call Get File Properties. */\n  contentLength: number;\n  creationTime?: Date;\n  lastAccessTime?: Date;\n  lastWriteTime?: Date;\n  changeTime?: Date;\n  lastModified?: Date;\n  etag?: string;\n}\n\n/** A listed file item. */\nexport interface FileItem {\n  name: string;\n  fileId?: string;\n  /** File properties. */\n  properties: FileProperty;\n  attributes?: string;\n  permissionKey?: string;\n}\n\n/** An enumeration of handles. */\nexport interface ListHandlesResponse {\n  handleList?: HandleItem[];\n  continuationToken: string;\n}\n\n/** A listed Azure Storage handle item. */\nexport interface HandleItem {\n  /** XSMB service handle ID */\n  handleId: string;\n  /** File or directory name including full path starting from share root */\n  path: string;\n  /** FileId uniquely identifies the file or directory. */\n  fileId: string;\n  /** ParentId uniquely identifies the parent directory of the object. */\n  parentId?: string;\n  /** SMB session ID in context of which the file handle was opened */\n  sessionId: string;\n  /** Client IP that opened the handle */\n  clientIp: string;\n  /** Time when the session that previously opened the handle has last been reconnected. (UTC) */\n  openTime: Date;\n  /** Time handle was last connected to (UTC) */\n  lastReconnectTime?: Date;\n}\n\n/** The list of file ranges */\nexport interface ShareFileRangeList {\n  ranges?: FileRange[];\n  clearRanges?: ClearRange[];\n}\n\n/** An Azure Storage file range. */\nexport interface FileRange {\n  /** Start of the range. */\n  start: number;\n  /** End of the range. */\n  end: number;\n}\n\nexport interface ClearRange {\n  start: number;\n  end: number;\n}\n\n/** Defines headers for Service_setProperties operation. */\nexport interface ServiceSetPropertiesHeaders {\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Service_setProperties operation. */\nexport interface ServiceSetPropertiesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Service_getProperties operation. */\nexport interface ServiceGetPropertiesHeaders {\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Service_getProperties operation. */\nexport interface ServiceGetPropertiesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Service_listSharesSegment operation. */\nexport interface ServiceListSharesSegmentHeaders {\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Service_listSharesSegment operation. */\nexport interface ServiceListSharesSegmentExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_create operation. */\nexport interface ShareCreateHeaders {\n  /** The ETag contains a value which represents the version of the share, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties or metadata updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Share_create operation. */\nexport interface ShareCreateExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_getProperties operation. */\nexport interface ShareGetPropertiesHeaders {\n  /** A set of name-value pairs that contain the user-defined metadata of the share. */\n  metadata?: { [propertyName: string]: string };\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Returns the current share quota in GB. */\n  quota?: number;\n  /** Returns the current share provisioned ipos. */\n  provisionedIops?: number;\n  /** Returns the current share provisioned ingress in megabytes per second. */\n  provisionedIngressMBps?: number;\n  /** Returns the current share provisioned egress in megabytes per second. */\n  provisionedEgressMBps?: number;\n  /** Returns the current share next allowed quota downgrade time. */\n  nextAllowedQuotaDowngradeTime?: Date;\n  /** When a share is leased, specifies whether the lease is of infinite or fixed duration. */\n  leaseDuration?: LeaseDurationType;\n  /** Lease state of the share. */\n  leaseState?: LeaseStateType;\n  /** The current lease status of the share. */\n  leaseStatus?: LeaseStatusType;\n  /** Returns the access tier set on the share. */\n  accessTier?: string;\n  /** Returns the last modified time (in UTC) of the access tier of the share. */\n  accessTierChangeTime?: Date;\n  /** Returns the transition state between access tiers, when present. */\n  accessTierTransitionState?: string;\n  /** The protocols that have been enabled on the share. */\n  enabledProtocols?: string;\n  /** Valid for NFS shares only. */\n  rootSquash?: ShareRootSquash;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Share_getProperties operation. */\nexport interface ShareGetPropertiesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_delete operation. */\nexport interface ShareDeleteHeaders {\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Share_delete operation. */\nexport interface ShareDeleteExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_acquireLease operation. */\nexport interface ShareAcquireLeaseHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** Uniquely identifies a share's lease */\n  leaseId?: string;\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated */\n  date?: Date;\n}\n\n/** Defines headers for Share_acquireLease operation. */\nexport interface ShareAcquireLeaseExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_releaseLease operation. */\nexport interface ShareReleaseLeaseHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated */\n  date?: Date;\n}\n\n/** Defines headers for Share_releaseLease operation. */\nexport interface ShareReleaseLeaseExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_changeLease operation. */\nexport interface ShareChangeLeaseHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** Uniquely identifies a share's lease */\n  leaseId?: string;\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated */\n  date?: Date;\n}\n\n/** Defines headers for Share_changeLease operation. */\nexport interface ShareChangeLeaseExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_renewLease operation. */\nexport interface ShareRenewLeaseHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** Uniquely identifies a share's lease */\n  leaseId?: string;\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** Returns the current share next allowed quota downgrade time. */\n  date?: Date;\n}\n\n/** Defines headers for Share_renewLease operation. */\nexport interface ShareRenewLeaseExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_breakLease operation. */\nexport interface ShareBreakLeaseHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** Approximate time remaining in the lease period, in seconds. */\n  leaseTimeInSeconds?: number;\n  /** Uniquely identifies a share's lease */\n  leaseId?: string;\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated */\n  date?: Date;\n}\n\n/** Defines headers for Share_breakLease operation. */\nexport interface ShareBreakLeaseExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_createSnapshot operation. */\nexport interface ShareCreateSnapshotHeaders {\n  /** This header is a DateTime value that uniquely identifies the share snapshot. The value of this header may be used in subsequent requests to access the share snapshot. This value is opaque. */\n  snapshot?: string;\n  /** The ETag contains a value which represents the version of the share snapshot, in quotes. A share snapshot cannot be modified, so the ETag of a given share snapshot never changes. However, if new metadata was supplied with the Snapshot Share request then the ETag of the share snapshot differs from that of the base share. If no metadata was specified with the request, the ETag of the share snapshot is identical to that of the base share at the time the share snapshot was taken. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. A share snapshot cannot be modified, so the last modified time of a given share snapshot never changes. However, if new metadata was supplied with the Snapshot Share request then the last modified time of the share snapshot differs from that of the base share. If no metadata was specified with the request, the last modified time of the share snapshot is identical to that of the base share at the time the share snapshot was taken. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Share_createSnapshot operation. */\nexport interface ShareCreateSnapshotExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_createPermission operation. */\nexport interface ShareCreatePermissionHeaders {\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Key of the permission set for the directory/file. */\n  filePermissionKey?: string;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Share_createPermission operation. */\nexport interface ShareCreatePermissionExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_getPermission operation. */\nexport interface ShareGetPermissionHeaders {\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Share_getPermission operation. */\nexport interface ShareGetPermissionExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_setProperties operation. */\nexport interface ShareSetPropertiesHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Share_setProperties operation. */\nexport interface ShareSetPropertiesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_setMetadata operation. */\nexport interface ShareSetMetadataHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Share_setMetadata operation. */\nexport interface ShareSetMetadataExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_getAccessPolicy operation. */\nexport interface ShareGetAccessPolicyHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Share_getAccessPolicy operation. */\nexport interface ShareGetAccessPolicyExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_setAccessPolicy operation. */\nexport interface ShareSetAccessPolicyHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Share_setAccessPolicy operation. */\nexport interface ShareSetAccessPolicyExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_getStatistics operation. */\nexport interface ShareGetStatisticsHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Share_getStatistics operation. */\nexport interface ShareGetStatisticsExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Share_restore operation. */\nexport interface ShareRestoreHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the share or its properties updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n}\n\n/** Defines headers for Share_restore operation. */\nexport interface ShareRestoreExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_create operation. */\nexport interface DirectoryCreateHeaders {\n  /** The ETag contains a value which represents the version of the directory, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the directory or its properties updates the last modified time. Operations on files do not affect the last modified time of the directory. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. */\n  isServerEncrypted?: boolean;\n  /** Key of the permission set for the directory. */\n  filePermissionKey?: string;\n  /** Attributes set for the directory. */\n  fileAttributes?: string;\n  /** Creation time for the directory. */\n  fileCreatedOn?: Date;\n  /** Last write time for the directory. */\n  fileLastWriteOn?: Date;\n  /** Change time for the directory. */\n  fileChangeOn?: Date;\n  /** The fileId of the directory. */\n  fileId?: string;\n  /** The parent fileId of the directory. */\n  fileParentId?: string;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_create operation. */\nexport interface DirectoryCreateExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_getProperties operation. */\nexport interface DirectoryGetPropertiesHeaders {\n  /** A set of name-value pairs that contain metadata for the directory. */\n  metadata?: { [propertyName: string]: string };\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** Returns the date and time the Directory was last modified. Operations on files within the directory do not affect the last modified time of the directory. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** The value of this header is set to true if the directory metadata is completely encrypted using the specified algorithm. Otherwise, the value is set to false. */\n  isServerEncrypted?: boolean;\n  /** Attributes set for the directory. */\n  fileAttributes?: string;\n  /** Creation time for the directory. */\n  fileCreatedOn?: Date;\n  /** Last write time for the directory. */\n  fileLastWriteOn?: Date;\n  /** Change time for the directory. */\n  fileChangeOn?: Date;\n  /** Key of the permission set for the directory. */\n  filePermissionKey?: string;\n  /** The fileId of the directory. */\n  fileId?: string;\n  /** The parent fileId of the directory. */\n  fileParentId?: string;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_getProperties operation. */\nexport interface DirectoryGetPropertiesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_delete operation. */\nexport interface DirectoryDeleteHeaders {\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_delete operation. */\nexport interface DirectoryDeleteExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_setProperties operation. */\nexport interface DirectorySetPropertiesHeaders {\n  /** The ETag contains a value which represents the version of the file, in quotes. */\n  etag?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Returns the date and time the directory was last modified. Any operation that modifies the directory or its properties updates the last modified time. Operations on files do not affect the last modified time of the directory. */\n  lastModified?: Date;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. */\n  isServerEncrypted?: boolean;\n  /** Key of the permission set for the directory. */\n  filePermissionKey?: string;\n  /** Attributes set for the directory. */\n  fileAttributes?: string;\n  /** Creation time for the directory. */\n  fileCreatedOn?: Date;\n  /** Last write time for the directory. */\n  fileLastWriteOn?: Date;\n  /** Change time for the directory. */\n  fileChangeOn?: Date;\n  /** The fileId of the directory. */\n  fileId?: string;\n  /** The parent fileId of the directory. */\n  fileParentId?: string;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_setProperties operation. */\nexport interface DirectorySetPropertiesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_setMetadata operation. */\nexport interface DirectorySetMetadataHeaders {\n  /** The ETag contains a value which represents the version of the directory, in quotes. */\n  etag?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. */\n  isServerEncrypted?: boolean;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_setMetadata operation. */\nexport interface DirectorySetMetadataExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_listFilesAndDirectoriesSegment operation. */\nexport interface DirectoryListFilesAndDirectoriesSegmentHeaders {\n  /** Specifies the format in which the results are returned. Currently this value is 'application/xml'. */\n  contentType?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_listFilesAndDirectoriesSegment operation. */\nexport interface DirectoryListFilesAndDirectoriesSegmentExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_listHandles operation. */\nexport interface DirectoryListHandlesHeaders {\n  /** Specifies the format in which the results are returned. Currently this value is 'application/xml'. */\n  contentType?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_listHandles operation. */\nexport interface DirectoryListHandlesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_forceCloseHandles operation. */\nexport interface DirectoryForceCloseHandlesHeaders {\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** A string describing next handle to be closed. It is returned when more handles need to be closed to complete the request. */\n  marker?: string;\n  /** Contains count of number of handles closed. */\n  numberOfHandlesClosed?: number;\n  /** Contains count of number of handles that failed to close. */\n  numberOfHandlesFailedToClose?: number;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for Directory_forceCloseHandles operation. */\nexport interface DirectoryForceCloseHandlesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_create operation. */\nexport interface FileCreateHeaders {\n  /** The ETag contains a value which represents the version of the file, in quotes. */\n  etag?: string;\n  /** Returns the date and time the share was last modified. Any operation that modifies the directory or its properties updates the last modified time. Operations on files do not affect the last modified time of the directory. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. */\n  isServerEncrypted?: boolean;\n  /** Key of the permission set for the file. */\n  filePermissionKey?: string;\n  /** Attributes set for the file. */\n  fileAttributes?: string;\n  /** Creation time for the file. */\n  fileCreatedOn?: Date;\n  /** Last write time for the file. */\n  fileLastWriteOn?: Date;\n  /** Change time for the file. */\n  fileChangeOn?: Date;\n  /** The fileId of the file. */\n  fileId?: string;\n  /** The parent fileId of the file. */\n  fileParentId?: string;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_create operation. */\nexport interface FileCreateExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_download operation. */\nexport interface FileDownloadHeaders {\n  /** Returns the date and time the file was last modified. Any operation that modifies the file or its properties updates the last modified time. */\n  lastModified?: Date;\n  /** A set of name-value pairs associated with this file as user-defined metadata. */\n  metadata?: { [propertyName: string]: string };\n  /** The number of bytes present in the response body. */\n  contentLength?: number;\n  /** The content type specified for the file. The default content type is 'application/octet-stream' */\n  contentType?: string;\n  /** Indicates the range of bytes returned if the client requested a subset of the file by setting the Range request header. */\n  contentRange?: string;\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** If the file has an MD5 hash and the request is to read the full file, this response header is returned so that the client can check for message content integrity. If the request is to read a specified range and the 'x-ms-range-get-content-md5' is set to true, then the request returns an MD5 hash for the range, as long as the range size is less than or equal to 4 MB. If neither of these sets of conditions is true, then no value is returned for the 'Content-MD5' header. */\n  contentMD5?: Uint8Array;\n  /** Returns the value that was specified for the Content-Encoding request header. */\n  contentEncoding?: string;\n  /** Returned if it was previously specified for the file. */\n  cacheControl?: string;\n  /** Returns the value that was specified for the 'x-ms-content-disposition' header and specifies how to process the response. */\n  contentDisposition?: string;\n  /** Returns the value that was specified for the Content-Language request header. */\n  contentLanguage?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** Indicates that the service supports requests for partial file content. */\n  acceptRanges?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Conclusion time of the last attempted Copy File operation where this file was the destination file. This value can specify the time of a completed, aborted, or failed copy attempt. */\n  copyCompletedOn?: Date;\n  /** Only appears when x-ms-copy-status is failed or pending. Describes cause of fatal or non-fatal copy operation failure. */\n  copyStatusDescription?: string;\n  /** String identifier for the last attempted Copy File operation where this file was the destination file. */\n  copyId?: string;\n  /** Contains the number of bytes copied and the total bytes in the source in the last attempted Copy File operation where this file was the destination file. Can show between 0 and Content-Length bytes copied. */\n  copyProgress?: string;\n  /** URL up to 2KB in length that specifies the source file used in the last attempted Copy File operation where this file was the destination file. */\n  copySource?: string;\n  /** State of the copy operation identified by 'x-ms-copy-id'. */\n  copyStatus?: CopyStatusType;\n  /** If the file has a MD5 hash, and if request contains range header (Range or x-ms-range), this response header is returned with the value of the whole file's MD5 value. This value may or may not be equal to the value returned in Content-MD5 header, with the latter calculated from the requested range. */\n  fileContentMD5?: Uint8Array;\n  /** The value of this header is set to true if the file data and application metadata are completely encrypted using the specified algorithm. Otherwise, the value is set to false (when the file is unencrypted, or if only parts of the file/application metadata are encrypted). */\n  isServerEncrypted?: boolean;\n  /** Attributes set for the file. */\n  fileAttributes?: string;\n  /** Creation time for the file. */\n  fileCreatedOn?: Date;\n  /** Last write time for the file. */\n  fileLastWriteOn?: Date;\n  /** Change time for the file. */\n  fileChangeOn?: Date;\n  /** Key of the permission set for the file. */\n  filePermissionKey?: string;\n  /** The fileId of the file. */\n  fileId?: string;\n  /** The parent fileId of the file. */\n  fileParentId?: string;\n  /** When a file is leased, specifies whether the lease is of infinite or fixed duration. */\n  leaseDuration?: LeaseDurationType;\n  /** Lease state of the file. */\n  leaseState?: LeaseStateType;\n  /** The current lease status of the file. */\n  leaseStatus?: LeaseStatusType;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_download operation. */\nexport interface FileDownloadExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_getProperties operation. */\nexport interface FileGetPropertiesHeaders {\n  /** Returns the date and time the file was last modified. The date format follows RFC 1123. Any operation that modifies the file or its properties updates the last modified time. */\n  lastModified?: Date;\n  /** A set of name-value pairs associated with this file as user-defined metadata. */\n  metadata?: { [propertyName: string]: string };\n  /** Returns the type File. Reserved for future use. */\n  fileType?: FileType;\n  /** The size of the file in bytes. This header returns the value of the 'x-ms-content-length' header that is stored with the file. */\n  contentLength?: number;\n  /** The content type specified for the file. The default content type is 'application/octet-stream' */\n  contentType?: string;\n  /** The ETag contains a value that you can use to perform operations conditionally, in quotes. */\n  etag?: string;\n  /** If the Content-MD5 header has been set for the file, the Content-MD5 response header is returned so that the client can check for message content integrity. */\n  contentMD5?: Uint8Array;\n  /** If the Content-Encoding request header has previously been set for the file, the Content-Encoding value is returned in this header. */\n  contentEncoding?: string;\n  /** If the Cache-Control request header has previously been set for the file, the Cache-Control value is returned in this header. */\n  cacheControl?: string;\n  /** Returns the value that was specified for the 'x-ms-content-disposition' header and specifies how to process the response. */\n  contentDisposition?: string;\n  /** Returns the value that was specified for the Content-Language request header. */\n  contentLanguage?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Conclusion time of the last attempted Copy File operation where this file was the destination file. This value can specify the time of a completed, aborted, or failed copy attempt. */\n  copyCompletedOn?: Date;\n  /** Only appears when x-ms-copy-status is failed or pending. Describes cause of fatal or non-fatal copy operation failure. */\n  copyStatusDescription?: string;\n  /** String identifier for the last attempted Copy File operation where this file was the destination file. */\n  copyId?: string;\n  /** Contains the number of bytes copied and the total bytes in the source in the last attempted Copy File operation where this file was the destination file. Can show between 0 and Content-Length bytes copied. */\n  copyProgress?: string;\n  /** URL up to 2KB in length that specifies the source file used in the last attempted Copy File operation where this file was the destination file. */\n  copySource?: string;\n  /** State of the copy operation identified by 'x-ms-copy-id'. */\n  copyStatus?: CopyStatusType;\n  /** The value of this header is set to true if the file data and application metadata are completely encrypted using the specified algorithm. Otherwise, the value is set to false (when the file is unencrypted, or if only parts of the file/application metadata are encrypted). */\n  isServerEncrypted?: boolean;\n  /** Attributes set for the file. */\n  fileAttributes?: string;\n  /** Creation time for the file. */\n  fileCreatedOn?: Date;\n  /** Last write time for the file. */\n  fileLastWriteOn?: Date;\n  /** Change time for the file. */\n  fileChangeOn?: Date;\n  /** Key of the permission set for the file. */\n  filePermissionKey?: string;\n  /** The fileId of the file. */\n  fileId?: string;\n  /** The parent fileId of the file. */\n  fileParentId?: string;\n  /** When a file is leased, specifies whether the lease is of infinite or fixed duration. */\n  leaseDuration?: LeaseDurationType;\n  /** Lease state of the file. */\n  leaseState?: LeaseStateType;\n  /** The current lease status of the file. */\n  leaseStatus?: LeaseStatusType;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_getProperties operation. */\nexport interface FileGetPropertiesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_delete operation. */\nexport interface FileDeleteHeaders {\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_delete operation. */\nexport interface FileDeleteExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_setHttpHeaders operation. */\nexport interface FileSetHttpHeadersHeaders {\n  /** The ETag contains a value which represents the version of the file, in quotes. */\n  etag?: string;\n  /** Returns the date and time the directory was last modified. Any operation that modifies the directory or its properties updates the last modified time. Operations on files do not affect the last modified time of the directory. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. */\n  isServerEncrypted?: boolean;\n  /** Key of the permission set for the file. */\n  filePermissionKey?: string;\n  /** Attributes set for the file. */\n  fileAttributes?: string;\n  /** Creation time for the file. */\n  fileCreatedOn?: Date;\n  /** Last write time for the file. */\n  fileLastWriteOn?: Date;\n  /** Change time for the file. */\n  fileChangeOn?: Date;\n  /** The fileId of the directory. */\n  fileId?: string;\n  /** The parent fileId of the directory. */\n  fileParentId?: string;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_setHttpHeaders operation. */\nexport interface FileSetHttpHeadersExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_setMetadata operation. */\nexport interface FileSetMetadataHeaders {\n  /** The ETag contains a value which represents the version of the file, in quotes. */\n  etag?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. */\n  isServerEncrypted?: boolean;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_setMetadata operation. */\nexport interface FileSetMetadataExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_acquireLease operation. */\nexport interface FileAcquireLeaseHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally. If the request version is 2011-08-18 or newer, the ETag value will be in quotes. */\n  etag?: string;\n  /** Returns the date and time the file was last modified. Any operation that modifies the file, including an update of the file's metadata or properties, changes the last-modified time of the file. */\n  lastModified?: Date;\n  /** Uniquely identifies a file's lease */\n  leaseId?: string;\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated */\n  date?: Date;\n}\n\n/** Defines headers for File_acquireLease operation. */\nexport interface FileAcquireLeaseExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_releaseLease operation. */\nexport interface FileReleaseLeaseHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally. If the request version is 2011-08-18 or newer, the ETag value will be in quotes. */\n  etag?: string;\n  /** Returns the date and time the file was last modified. Any operation that modifies the file, including an update of the file's metadata or properties, changes the last-modified time of the file. */\n  lastModified?: Date;\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated */\n  date?: Date;\n}\n\n/** Defines headers for File_releaseLease operation. */\nexport interface FileReleaseLeaseExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_changeLease operation. */\nexport interface FileChangeLeaseHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally. If the request version is 2011-08-18 or newer, the ETag value will be in quotes. */\n  etag?: string;\n  /** Returns the date and time the file was last modified. Any operation that modifies the file, including an update of the file's metadata or properties, changes the last-modified time of the file. */\n  lastModified?: Date;\n  /** Uniquely identifies a file's lease */\n  leaseId?: string;\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated */\n  date?: Date;\n}\n\n/** Defines headers for File_changeLease operation. */\nexport interface FileChangeLeaseExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_breakLease operation. */\nexport interface FileBreakLeaseHeaders {\n  /** The ETag contains a value that you can use to perform operations conditionally. If the request version is 2011-08-18 or newer, the ETag value will be in quotes. */\n  etag?: string;\n  /** Returns the date and time the file was last modified. Any operation that modifies the file, including an update of the file's metadata or properties, changes the last-modified time of the file. */\n  lastModified?: Date;\n  /** Uniquely identifies a file's lease */\n  leaseId?: string;\n  /** If a client request id header is sent in the request, this header will be present in the response with the same value. */\n  clientRequestId?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** UTC date/time value generated by the service that indicates the time at which the response was initiated */\n  date?: Date;\n}\n\n/** Defines headers for File_breakLease operation. */\nexport interface FileBreakLeaseExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_uploadRange operation. */\nexport interface FileUploadRangeHeaders {\n  /** The ETag contains a value which represents the version of the file, in quotes. */\n  etag?: string;\n  /** Returns the date and time the directory was last modified. Any operation that modifies the share or its properties or metadata updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** This header is returned so that the client can check for message content integrity. The value of this header is computed by the File service; it is not necessarily the same value as may have been specified in the request headers. */\n  contentMD5?: Uint8Array;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. */\n  isServerEncrypted?: boolean;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_uploadRange operation. */\nexport interface FileUploadRangeExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_uploadRangeFromURL operation. */\nexport interface FileUploadRangeFromURLHeaders {\n  /** The ETag contains a value which represents the version of the file, in quotes. */\n  etag?: string;\n  /** Returns the date and time the directory was last modified. Any operation that modifies the share or its properties or metadata updates the last modified time. Operations on files do not affect the last modified time of the share. */\n  lastModified?: Date;\n  /** This header is returned so that the client can check for message content integrity. The value of this header is computed by the File service; it is not necessarily the same value as may have been specified in the request headers. */\n  xMsContentCrc64?: Uint8Array;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** The value of this header is set to true if the contents of the request are successfully encrypted using the specified algorithm, and false otherwise. */\n  isServerEncrypted?: boolean;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_uploadRangeFromURL operation. */\nexport interface FileUploadRangeFromURLExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_getRangeList operation. */\nexport interface FileGetRangeListHeaders {\n  /** The date/time that the file was last modified. Any operation that modifies the file, including an update of the file's metadata or properties, changes the file's last modified time. */\n  lastModified?: Date;\n  /** The ETag contains a value which represents the version of the file, in quotes. */\n  etag?: string;\n  /** The size of the file in bytes. */\n  fileContentLength?: number;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_getRangeList operation. */\nexport interface FileGetRangeListExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_startCopy operation. */\nexport interface FileStartCopyHeaders {\n  /** If the copy is completed, contains the ETag of the destination file. If the copy is not complete, contains the ETag of the empty file created at the start of the copy. */\n  etag?: string;\n  /** Returns the date/time that the copy operation to the destination file completed. */\n  lastModified?: Date;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** String identifier for this copy operation. Use with Get File or Get File Properties to check the status of this copy operation, or pass to Abort Copy File to abort a pending copy. */\n  copyId?: string;\n  /** State of the copy operation identified by x-ms-copy-id. */\n  copyStatus?: CopyStatusType;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_startCopy operation. */\nexport interface FileStartCopyExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_abortCopy operation. */\nexport interface FileAbortCopyHeaders {\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_abortCopy operation. */\nexport interface FileAbortCopyExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_listHandles operation. */\nexport interface FileListHandlesHeaders {\n  /** Specifies the format in which the results are returned. Currently this value is 'application/xml'. */\n  contentType?: string;\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_listHandles operation. */\nexport interface FileListHandlesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Defines headers for File_forceCloseHandles operation. */\nexport interface FileForceCloseHandlesHeaders {\n  /** This header uniquely identifies the request that was made and can be used for troubleshooting the request. */\n  requestId?: string;\n  /** Indicates the version of the File service used to execute the request. */\n  version?: string;\n  /** A UTC date/time value generated by the service that indicates the time at which the response was initiated. */\n  date?: Date;\n  /** A string describing next handle to be closed. It is returned when more handles need to be closed to complete the request. */\n  marker?: string;\n  /** Contains count of number of handles closed. */\n  numberOfHandlesClosed?: number;\n  /** Contains count of number of handles that failed to close. */\n  numberOfHandlesFailedToClose?: number;\n  /** Error Code */\n  errorCode?: string;\n}\n\n/** Defines headers for File_forceCloseHandles operation. */\nexport interface FileForceCloseHandlesExceptionHeaders {\n  errorCode?: string;\n}\n\n/** Parameter group */\nexport interface LeaseAccessConditions {\n  /** If specified, the operation only succeeds if the resource's lease is active and matches this ID. */\n  leaseId?: string;\n}\n\n/** Parameter group */\nexport interface FileHttpHeaders {\n  /** Sets the MIME content type of the file. The default type is 'application/octet-stream'. */\n  fileContentType?: string;\n  /** Specifies which content encodings have been applied to the file. */\n  fileContentEncoding?: string;\n  /** Specifies the natural languages used by this resource. */\n  fileContentLanguage?: string;\n  /** Sets the file's cache control. The File service stores this value but does not use or modify it. */\n  fileCacheControl?: string;\n  /** Sets the file's MD5 hash. */\n  fileContentMD5?: Uint8Array;\n  /** Sets the file's Content-Disposition header. */\n  fileContentDisposition?: string;\n}\n\n/** Parameter group */\nexport interface SourceModifiedAccessConditions {\n  /** Specify the crc64 value to operate only on range with a matching crc64 checksum. */\n  sourceIfMatchCrc64?: Uint8Array;\n  /** Specify the crc64 value to operate only on range without a matching crc64 checksum. */\n  sourceIfNoneMatchCrc64?: Uint8Array;\n}\n\n/** Parameter group */\nexport interface CopyFileSmbInfo {\n  /** Specifies the option to copy file security descriptor from source file or to set it using the value which is defined by the header value of x-ms-file-permission or x-ms-file-permission-key. */\n  filePermissionCopyMode?: PermissionCopyModeType;\n  /** Specifies the option to overwrite the target file if it already exists and has read-only attribute set. */\n  ignoreReadOnly?: boolean;\n  /** Specifies either the option to copy file attributes from a source file(source) to a target file or a list of attributes to set on a target file. */\n  fileAttributes?: string;\n  /** Specifies either the option to copy file creation time from a source file(source) to a target file or a time value in ISO 8601 format to set as creation time on a target file. */\n  fileCreationTime?: string;\n  /** Specifies either the option to copy file last write time from a source file(source) to a target file or a time value in ISO 8601 format to set as last write time on a target file. */\n  fileLastWriteTime?: string;\n  /** Specifies the option to set archive attribute on a target file. True means archive attribute will be set on a target file despite attribute overrides or a source file state. */\n  setArchiveAttribute?: boolean;\n}\n\n/** Known values of {@link StorageErrorCode} that the service accepts. */\nexport const enum KnownStorageErrorCode {\n  AccountAlreadyExists = \"AccountAlreadyExists\",\n  AccountBeingCreated = \"AccountBeingCreated\",\n  AccountIsDisabled = \"AccountIsDisabled\",\n  AuthenticationFailed = \"AuthenticationFailed\",\n  AuthorizationFailure = \"AuthorizationFailure\",\n  ConditionHeadersNotSupported = \"ConditionHeadersNotSupported\",\n  ConditionNotMet = \"ConditionNotMet\",\n  EmptyMetadataKey = \"EmptyMetadataKey\",\n  InsufficientAccountPermissions = \"InsufficientAccountPermissions\",\n  InternalError = \"InternalError\",\n  InvalidAuthenticationInfo = \"InvalidAuthenticationInfo\",\n  InvalidHeaderValue = \"InvalidHeaderValue\",\n  InvalidHttpVerb = \"InvalidHttpVerb\",\n  InvalidInput = \"InvalidInput\",\n  InvalidMd5 = \"InvalidMd5\",\n  InvalidMetadata = \"InvalidMetadata\",\n  InvalidQueryParameterValue = \"InvalidQueryParameterValue\",\n  InvalidRange = \"InvalidRange\",\n  InvalidResourceName = \"InvalidResourceName\",\n  InvalidUri = \"InvalidUri\",\n  InvalidXmlDocument = \"InvalidXmlDocument\",\n  InvalidXmlNodeValue = \"InvalidXmlNodeValue\",\n  Md5Mismatch = \"Md5Mismatch\",\n  MetadataTooLarge = \"MetadataTooLarge\",\n  MissingContentLengthHeader = \"MissingContentLengthHeader\",\n  MissingRequiredQueryParameter = \"MissingRequiredQueryParameter\",\n  MissingRequiredHeader = \"MissingRequiredHeader\",\n  MissingRequiredXmlNode = \"MissingRequiredXmlNode\",\n  MultipleConditionHeadersNotSupported = \"MultipleConditionHeadersNotSupported\",\n  OperationTimedOut = \"OperationTimedOut\",\n  OutOfRangeInput = \"OutOfRangeInput\",\n  OutOfRangeQueryParameterValue = \"OutOfRangeQueryParameterValue\",\n  RequestBodyTooLarge = \"RequestBodyTooLarge\",\n  ResourceTypeMismatch = \"ResourceTypeMismatch\",\n  RequestUrlFailedToParse = \"RequestUrlFailedToParse\",\n  ResourceAlreadyExists = \"ResourceAlreadyExists\",\n  ResourceNotFound = \"ResourceNotFound\",\n  ServerBusy = \"ServerBusy\",\n  UnsupportedHeader = \"UnsupportedHeader\",\n  UnsupportedXmlNode = \"UnsupportedXmlNode\",\n  UnsupportedQueryParameter = \"UnsupportedQueryParameter\",\n  UnsupportedHttpVerb = \"UnsupportedHttpVerb\",\n  CannotDeleteFileOrDirectory = \"CannotDeleteFileOrDirectory\",\n  ClientCacheFlushDelay = \"ClientCacheFlushDelay\",\n  DeletePending = \"DeletePending\",\n  DirectoryNotEmpty = \"DirectoryNotEmpty\",\n  FileLockConflict = \"FileLockConflict\",\n  InvalidFileOrDirectoryPathName = \"InvalidFileOrDirectoryPathName\",\n  ParentNotFound = \"ParentNotFound\",\n  ReadOnlyAttribute = \"ReadOnlyAttribute\",\n  ShareAlreadyExists = \"ShareAlreadyExists\",\n  ShareBeingDeleted = \"ShareBeingDeleted\",\n  ShareDisabled = \"ShareDisabled\",\n  ShareNotFound = \"ShareNotFound\",\n  SharingViolation = \"SharingViolation\",\n  ShareSnapshotInProgress = \"ShareSnapshotInProgress\",\n  ShareSnapshotCountExceeded = \"ShareSnapshotCountExceeded\",\n  ShareSnapshotOperationNotSupported = \"ShareSnapshotOperationNotSupported\",\n  ShareHasSnapshots = \"ShareHasSnapshots\",\n  ContainerQuotaDowngradeNotAllowed = \"ContainerQuotaDowngradeNotAllowed\",\n  AuthorizationSourceIPMismatch = \"AuthorizationSourceIPMismatch\",\n  AuthorizationProtocolMismatch = \"AuthorizationProtocolMismatch\",\n  AuthorizationPermissionMismatch = \"AuthorizationPermissionMismatch\",\n  AuthorizationServiceMismatch = \"AuthorizationServiceMismatch\",\n  AuthorizationResourceTypeMismatch = \"AuthorizationResourceTypeMismatch\",\n  FeatureVersionMismatch = \"FeatureVersionMismatch\"\n}\n\n/**\n * Defines values for StorageErrorCode. \\\n * {@link KnownStorageErrorCode} can be used interchangeably with StorageErrorCode,\n *  this enum contains the known values that the service supports.\n * ### Know values supported by the service\n * **AccountAlreadyExists** \\\n * **AccountBeingCreated** \\\n * **AccountIsDisabled** \\\n * **AuthenticationFailed** \\\n * **AuthorizationFailure** \\\n * **ConditionHeadersNotSupported** \\\n * **ConditionNotMet** \\\n * **EmptyMetadataKey** \\\n * **InsufficientAccountPermissions** \\\n * **InternalError** \\\n * **InvalidAuthenticationInfo** \\\n * **InvalidHeaderValue** \\\n * **InvalidHttpVerb** \\\n * **InvalidInput** \\\n * **InvalidMd5** \\\n * **InvalidMetadata** \\\n * **InvalidQueryParameterValue** \\\n * **InvalidRange** \\\n * **InvalidResourceName** \\\n * **InvalidUri** \\\n * **InvalidXmlDocument** \\\n * **InvalidXmlNodeValue** \\\n * **Md5Mismatch** \\\n * **MetadataTooLarge** \\\n * **MissingContentLengthHeader** \\\n * **MissingRequiredQueryParameter** \\\n * **MissingRequiredHeader** \\\n * **MissingRequiredXmlNode** \\\n * **MultipleConditionHeadersNotSupported** \\\n * **OperationTimedOut** \\\n * **OutOfRangeInput** \\\n * **OutOfRangeQueryParameterValue** \\\n * **RequestBodyTooLarge** \\\n * **ResourceTypeMismatch** \\\n * **RequestUrlFailedToParse** \\\n * **ResourceAlreadyExists** \\\n * **ResourceNotFound** \\\n * **ServerBusy** \\\n * **UnsupportedHeader** \\\n * **UnsupportedXmlNode** \\\n * **UnsupportedQueryParameter** \\\n * **UnsupportedHttpVerb** \\\n * **CannotDeleteFileOrDirectory** \\\n * **ClientCacheFlushDelay** \\\n * **DeletePending** \\\n * **DirectoryNotEmpty** \\\n * **FileLockConflict** \\\n * **InvalidFileOrDirectoryPathName** \\\n * **ParentNotFound** \\\n * **ReadOnlyAttribute** \\\n * **ShareAlreadyExists** \\\n * **ShareBeingDeleted** \\\n * **ShareDisabled** \\\n * **ShareNotFound** \\\n * **SharingViolation** \\\n * **ShareSnapshotInProgress** \\\n * **ShareSnapshotCountExceeded** \\\n * **ShareSnapshotOperationNotSupported** \\\n * **ShareHasSnapshots** \\\n * **ContainerQuotaDowngradeNotAllowed** \\\n * **AuthorizationSourceIPMismatch** \\\n * **AuthorizationProtocolMismatch** \\\n * **AuthorizationPermissionMismatch** \\\n * **AuthorizationServiceMismatch** \\\n * **AuthorizationResourceTypeMismatch** \\\n * **FeatureVersionMismatch**\n */\nexport type StorageErrorCode = string;\n/** Defines values for ListSharesIncludeType. */\nexport type ListSharesIncludeType = \"snapshots\" | \"metadata\" | \"deleted\";\n/** Defines values for LeaseStatusType. */\nexport type LeaseStatusType = \"locked\" | \"unlocked\";\n/** Defines values for LeaseStateType. */\nexport type LeaseStateType =\n  | \"available\"\n  | \"leased\"\n  | \"expired\"\n  | \"breaking\"\n  | \"broken\";\n/** Defines values for LeaseDurationType. */\nexport type LeaseDurationType = \"infinite\" | \"fixed\";\n/** Defines values for ShareRootSquash. */\nexport type ShareRootSquash = \"NoRootSquash\" | \"RootSquash\" | \"AllSquash\";\n/** Defines values for ShareAccessTier. */\nexport type ShareAccessTier = \"TransactionOptimized\" | \"Hot\" | \"Cool\";\n/** Defines values for DeleteSnapshotsOptionType. */\nexport type DeleteSnapshotsOptionType = \"include\" | \"include-leased\";\n/** Defines values for ListFilesIncludeType. */\nexport type ListFilesIncludeType =\n  | \"Timestamps\"\n  | \"Etag\"\n  | \"Attributes\"\n  | \"PermissionKey\";\n/** Defines values for CopyStatusType. */\nexport type CopyStatusType = \"pending\" | \"success\" | \"aborted\" | \"failed\";\n/** Defines values for FileRangeWriteType. */\nexport type FileRangeWriteType = \"update\" | \"clear\";\n/** Defines values for PermissionCopyModeType. */\nexport type PermissionCopyModeType = \"source\" | \"override\";\n\n/** Optional parameters. */\nexport interface ServiceSetPropertiesOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n}\n\n/** Contains response data for the setProperties operation. */\nexport type ServiceSetPropertiesResponse = ServiceSetPropertiesHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ServiceSetPropertiesHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ServiceGetPropertiesOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n}\n\n/** Contains response data for the getProperties operation. */\nexport type ServiceGetPropertiesResponse = ServiceGetPropertiesHeaders &\n  FileServiceProperties & {\n    /** The underlying HTTP response. */\n    _response: coreHttp.HttpResponse & {\n      /** The response body as text (string format) */\n      bodyAsText: string;\n\n      /** The response body as parsed JSON or XML */\n      parsedBody: FileServiceProperties;\n      /** The parsed HTTP response headers. */\n      parsedHeaders: ServiceGetPropertiesHeaders;\n    };\n  };\n\n/** Optional parameters. */\nexport interface ServiceListSharesSegmentOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** Filters the results to return only entries whose name begins with the specified prefix. */\n  prefix?: string;\n  /** A string value that identifies the portion of the list to be returned with the next list operation. The operation returns a marker value within the response body if the list returned was not complete. The marker value may then be used in a subsequent call to request the next set of list items. The marker value is opaque to the client. */\n  marker?: string;\n  /** Specifies the maximum number of entries to return. If the request does not specify maxresults, or specifies a value greater than 5,000, the server will return up to 5,000 items. */\n  maxResults?: number;\n  /** Include this parameter to specify one or more datasets to include in the response. */\n  include?: ListSharesIncludeType[];\n}\n\n/** Contains response data for the listSharesSegment operation. */\nexport type ServiceListSharesSegmentResponse = ServiceListSharesSegmentHeaders &\n  ListSharesResponse & {\n    /** The underlying HTTP response. */\n    _response: coreHttp.HttpResponse & {\n      /** The response body as text (string format) */\n      bodyAsText: string;\n\n      /** The response body as parsed JSON or XML */\n      parsedBody: ListSharesResponse;\n      /** The parsed HTTP response headers. */\n      parsedHeaders: ServiceListSharesSegmentHeaders;\n    };\n  };\n\n/** Optional parameters. */\nexport interface ShareCreateOptionalParams extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** A name-value pair to associate with a file storage object. */\n  metadata?: { [propertyName: string]: string };\n  /** Specifies the maximum size of the share, in gigabytes. */\n  quota?: number;\n  /** Specifies the access tier of the share. */\n  accessTier?: ShareAccessTier;\n  /** Protocols to enable on the share. */\n  enabledProtocols?: string;\n  /** Root squash to set on the share.  Only valid for NFS shares. */\n  rootSquash?: ShareRootSquash;\n}\n\n/** Contains response data for the create operation. */\nexport type ShareCreateResponse = ShareCreateHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareCreateHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareGetPropertiesOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n}\n\n/** Contains response data for the getProperties operation. */\nexport type ShareGetPropertiesResponse = ShareGetPropertiesHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareGetPropertiesHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareDeleteOptionalParams extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n  /** Specifies the option include to delete the base share and all of its snapshots. */\n  deleteSnapshots?: DeleteSnapshotsOptionType;\n}\n\n/** Contains response data for the delete operation. */\nexport type ShareDeleteResponse = ShareDeleteHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareDeleteHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareAcquireLeaseOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n  /** Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change. */\n  duration?: number;\n  /** Proposed lease ID, in a GUID string format. The File service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats. */\n  proposedLeaseId?: string;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled. */\n  requestId?: string;\n}\n\n/** Contains response data for the acquireLease operation. */\nexport type ShareAcquireLeaseResponse = ShareAcquireLeaseHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareAcquireLeaseHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareReleaseLeaseOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled. */\n  requestId?: string;\n}\n\n/** Contains response data for the releaseLease operation. */\nexport type ShareReleaseLeaseResponse = ShareReleaseLeaseHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareReleaseLeaseHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareChangeLeaseOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n  /** Proposed lease ID, in a GUID string format. The File service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats. */\n  proposedLeaseId?: string;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled. */\n  requestId?: string;\n}\n\n/** Contains response data for the changeLease operation. */\nexport type ShareChangeLeaseResponse = ShareChangeLeaseHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareChangeLeaseHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareRenewLeaseOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled. */\n  requestId?: string;\n}\n\n/** Contains response data for the renewLease operation. */\nexport type ShareRenewLeaseResponse = ShareRenewLeaseHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareRenewLeaseHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareBreakLeaseOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled. */\n  requestId?: string;\n  /** For a break operation, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60. This break period is only used if it is shorter than the time remaining on the lease. If longer, the time remaining on the lease is used. A new lease will not be available before the break period has expired, but the lease may be held for longer than the break period. If this header does not appear with a break operation, a fixed-duration lease breaks after the remaining lease period elapses, and an infinite lease breaks immediately. */\n  breakPeriod?: number;\n}\n\n/** Contains response data for the breakLease operation. */\nexport type ShareBreakLeaseResponse = ShareBreakLeaseHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareBreakLeaseHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareCreateSnapshotOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** A name-value pair to associate with a file storage object. */\n  metadata?: { [propertyName: string]: string };\n}\n\n/** Contains response data for the createSnapshot operation. */\nexport type ShareCreateSnapshotResponse = ShareCreateSnapshotHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareCreateSnapshotHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareCreatePermissionOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n}\n\n/** Contains response data for the createPermission operation. */\nexport type ShareCreatePermissionResponse = ShareCreatePermissionHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareCreatePermissionHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareGetPermissionOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n}\n\n/** Contains response data for the getPermission operation. */\nexport type ShareGetPermissionResponse = ShareGetPermissionHeaders &\n  SharePermission & {\n    /** The underlying HTTP response. */\n    _response: coreHttp.HttpResponse & {\n      /** The response body as text (string format) */\n      bodyAsText: string;\n\n      /** The response body as parsed JSON or XML */\n      parsedBody: SharePermission;\n      /** The parsed HTTP response headers. */\n      parsedHeaders: ShareGetPermissionHeaders;\n    };\n  };\n\n/** Optional parameters. */\nexport interface ShareSetPropertiesOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** Specifies the maximum size of the share, in gigabytes. */\n  quota?: number;\n  /** Specifies the access tier of the share. */\n  accessTier?: ShareAccessTier;\n  /** Root squash to set on the share.  Only valid for NFS shares. */\n  rootSquash?: ShareRootSquash;\n}\n\n/** Contains response data for the setProperties operation. */\nexport type ShareSetPropertiesResponse = ShareSetPropertiesHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareSetPropertiesHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareSetMetadataOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** A name-value pair to associate with a file storage object. */\n  metadata?: { [propertyName: string]: string };\n}\n\n/** Contains response data for the setMetadata operation. */\nexport type ShareSetMetadataResponse = ShareSetMetadataHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareSetMetadataHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareGetAccessPolicyOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n}\n\n/** Contains response data for the getAccessPolicy operation. */\nexport type ShareGetAccessPolicyResponse = ShareGetAccessPolicyHeaders &\n  SignedIdentifier[] & {\n    /** The underlying HTTP response. */\n    _response: coreHttp.HttpResponse & {\n      /** The response body as text (string format) */\n      bodyAsText: string;\n\n      /** The response body as parsed JSON or XML */\n      parsedBody: SignedIdentifier[];\n      /** The parsed HTTP response headers. */\n      parsedHeaders: ShareGetAccessPolicyHeaders;\n    };\n  };\n\n/** Optional parameters. */\nexport interface ShareSetAccessPolicyOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** The ACL for the share. */\n  shareAcl?: SignedIdentifier[];\n}\n\n/** Contains response data for the setAccessPolicy operation. */\nexport type ShareSetAccessPolicyResponse = ShareSetAccessPolicyHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareSetAccessPolicyHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface ShareGetStatisticsOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n}\n\n/** Contains response data for the getStatistics operation. */\nexport type ShareGetStatisticsResponse = ShareGetStatisticsHeaders &\n  ShareStats & {\n    /** The underlying HTTP response. */\n    _response: coreHttp.HttpResponse & {\n      /** The response body as text (string format) */\n      bodyAsText: string;\n\n      /** The response body as parsed JSON or XML */\n      parsedBody: ShareStats;\n      /** The parsed HTTP response headers. */\n      parsedHeaders: ShareGetStatisticsHeaders;\n    };\n  };\n\n/** Optional parameters. */\nexport interface ShareRestoreOptionalParams extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled. */\n  requestId?: string;\n  /** Specifies the name of the previously-deleted share. */\n  deletedShareName?: string;\n  /** Specifies the version of the previously-deleted share. */\n  deletedShareVersion?: string;\n}\n\n/** Contains response data for the restore operation. */\nexport type ShareRestoreResponse = ShareRestoreHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: ShareRestoreHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface DirectoryCreateOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** A name-value pair to associate with a file storage object. */\n  metadata?: { [propertyName: string]: string };\n  /** If specified the permission (security descriptor) shall be set for the directory/file. This header can be used if Permission size is <= 8KB, else x-ms-file-permission-key header shall be used. Default value: Inherit. If SDDL is specified as input, it must have owner, group and dacl. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be specified. */\n  filePermission?: string;\n  /** Key of the permission to be set for the directory/file. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be specified. */\n  filePermissionKey?: string;\n}\n\n/** Contains response data for the create operation. */\nexport type DirectoryCreateResponse = DirectoryCreateHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: DirectoryCreateHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface DirectoryGetPropertiesOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n}\n\n/** Contains response data for the getProperties operation. */\nexport type DirectoryGetPropertiesResponse = DirectoryGetPropertiesHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: DirectoryGetPropertiesHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface DirectoryDeleteOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n}\n\n/** Contains response data for the delete operation. */\nexport type DirectoryDeleteResponse = DirectoryDeleteHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: DirectoryDeleteHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface DirectorySetPropertiesOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** If specified the permission (security descriptor) shall be set for the directory/file. This header can be used if Permission size is <= 8KB, else x-ms-file-permission-key header shall be used. Default value: Inherit. If SDDL is specified as input, it must have owner, group and dacl. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be specified. */\n  filePermission?: string;\n  /** Key of the permission to be set for the directory/file. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be specified. */\n  filePermissionKey?: string;\n}\n\n/** Contains response data for the setProperties operation. */\nexport type DirectorySetPropertiesResponse = DirectorySetPropertiesHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: DirectorySetPropertiesHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface DirectorySetMetadataOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** A name-value pair to associate with a file storage object. */\n  metadata?: { [propertyName: string]: string };\n}\n\n/** Contains response data for the setMetadata operation. */\nexport type DirectorySetMetadataResponse = DirectorySetMetadataHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: DirectorySetMetadataHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface DirectoryListFilesAndDirectoriesSegmentOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** Filters the results to return only entries whose name begins with the specified prefix. */\n  prefix?: string;\n  /** A string value that identifies the portion of the list to be returned with the next list operation. The operation returns a marker value within the response body if the list returned was not complete. The marker value may then be used in a subsequent call to request the next set of list items. The marker value is opaque to the client. */\n  marker?: string;\n  /** Specifies the maximum number of entries to return. If the request does not specify maxresults, or specifies a value greater than 5,000, the server will return up to 5,000 items. */\n  maxResults?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n  /** Include this parameter to specify one or more datasets to include in the response. */\n  include?: ListFilesIncludeType[];\n  /** Include extended information. */\n  includeExtendedInfo?: boolean;\n}\n\n/** Contains response data for the listFilesAndDirectoriesSegment operation. */\nexport type DirectoryListFilesAndDirectoriesSegmentResponse = DirectoryListFilesAndDirectoriesSegmentHeaders &\n  ListFilesAndDirectoriesSegmentResponse & {\n    /** The underlying HTTP response. */\n    _response: coreHttp.HttpResponse & {\n      /** The response body as text (string format) */\n      bodyAsText: string;\n\n      /** The response body as parsed JSON or XML */\n      parsedBody: ListFilesAndDirectoriesSegmentResponse;\n      /** The parsed HTTP response headers. */\n      parsedHeaders: DirectoryListFilesAndDirectoriesSegmentHeaders;\n    };\n  };\n\n/** Optional parameters. */\nexport interface DirectoryListHandlesOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** A string value that identifies the portion of the list to be returned with the next list operation. The operation returns a marker value within the response body if the list returned was not complete. The marker value may then be used in a subsequent call to request the next set of list items. The marker value is opaque to the client. */\n  marker?: string;\n  /** Specifies the maximum number of entries to return. If the request does not specify maxresults, or specifies a value greater than 5,000, the server will return up to 5,000 items. */\n  maxResults?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n  /** Specifies operation should apply to the directory specified in the URI, its files, its subdirectories and their files. */\n  recursive?: boolean;\n}\n\n/** Contains response data for the listHandles operation. */\nexport type DirectoryListHandlesResponse = DirectoryListHandlesHeaders &\n  ListHandlesResponse & {\n    /** The underlying HTTP response. */\n    _response: coreHttp.HttpResponse & {\n      /** The response body as text (string format) */\n      bodyAsText: string;\n\n      /** The response body as parsed JSON or XML */\n      parsedBody: ListHandlesResponse;\n      /** The parsed HTTP response headers. */\n      parsedHeaders: DirectoryListHandlesHeaders;\n    };\n  };\n\n/** Optional parameters. */\nexport interface DirectoryForceCloseHandlesOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** A string value that identifies the portion of the list to be returned with the next list operation. The operation returns a marker value within the response body if the list returned was not complete. The marker value may then be used in a subsequent call to request the next set of list items. The marker value is opaque to the client. */\n  marker?: string;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n  /** Specifies operation should apply to the directory specified in the URI, its files, its subdirectories and their files. */\n  recursive?: boolean;\n}\n\n/** Contains response data for the forceCloseHandles operation. */\nexport type DirectoryForceCloseHandlesResponse = DirectoryForceCloseHandlesHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: DirectoryForceCloseHandlesHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileCreateOptionalParams extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** Parameter group */\n  fileHttpHeaders?: FileHttpHeaders;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** A name-value pair to associate with a file storage object. */\n  metadata?: { [propertyName: string]: string };\n  /** If specified the permission (security descriptor) shall be set for the directory/file. This header can be used if Permission size is <= 8KB, else x-ms-file-permission-key header shall be used. Default value: Inherit. If SDDL is specified as input, it must have owner, group and dacl. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be specified. */\n  filePermission?: string;\n  /** Key of the permission to be set for the directory/file. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be specified. */\n  filePermissionKey?: string;\n}\n\n/** Contains response data for the create operation. */\nexport type FileCreateResponse = FileCreateHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileCreateHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileDownloadOptionalParams extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** Return file data only from the specified byte range. */\n  range?: string;\n  /** When this header is set to true and specified together with the Range header, the service returns the MD5 hash for the range, as long as the range is less than or equal to 4 MB in size. */\n  rangeGetContentMD5?: boolean;\n}\n\n/** Contains response data for the download operation. */\nexport type FileDownloadResponse = FileDownloadHeaders & {\n  /**\n   * BROWSER ONLY\n   *\n   * The response body as a browser Blob.\n   * Always `undefined` in node.js.\n   */\n  blobBody?: Promise<Blob>;\n  /**\n   * NODEJS ONLY\n   *\n   * The response body as a node.js Readable stream.\n   * Always `undefined` in the browser.\n   */\n  readableStreamBody?: NodeJS.ReadableStream;\n\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileDownloadHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileGetPropertiesOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n}\n\n/** Contains response data for the getProperties operation. */\nexport type FileGetPropertiesResponse = FileGetPropertiesHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileGetPropertiesHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileDeleteOptionalParams extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n}\n\n/** Contains response data for the delete operation. */\nexport type FileDeleteResponse = FileDeleteHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileDeleteHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileSetHttpHeadersOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** Parameter group */\n  fileHttpHeaders?: FileHttpHeaders;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** If specified the permission (security descriptor) shall be set for the directory/file. This header can be used if Permission size is <= 8KB, else x-ms-file-permission-key header shall be used. Default value: Inherit. If SDDL is specified as input, it must have owner, group and dacl. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be specified. */\n  filePermission?: string;\n  /** Key of the permission to be set for the directory/file. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be specified. */\n  filePermissionKey?: string;\n  /** Resizes a file to the specified size. If the specified byte value is less than the current size of the file, then all ranges above the specified byte value are cleared. */\n  fileContentLength?: number;\n}\n\n/** Contains response data for the setHttpHeaders operation. */\nexport type FileSetHttpHeadersResponse = FileSetHttpHeadersHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileSetHttpHeadersHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileSetMetadataOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** A name-value pair to associate with a file storage object. */\n  metadata?: { [propertyName: string]: string };\n}\n\n/** Contains response data for the setMetadata operation. */\nexport type FileSetMetadataResponse = FileSetMetadataHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileSetMetadataHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileAcquireLeaseOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. A lease duration cannot be changed using renew or change. */\n  duration?: number;\n  /** Proposed lease ID, in a GUID string format. The File service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats. */\n  proposedLeaseId?: string;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled. */\n  requestId?: string;\n}\n\n/** Contains response data for the acquireLease operation. */\nexport type FileAcquireLeaseResponse = FileAcquireLeaseHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileAcquireLeaseHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileReleaseLeaseOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled. */\n  requestId?: string;\n}\n\n/** Contains response data for the releaseLease operation. */\nexport type FileReleaseLeaseResponse = FileReleaseLeaseHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileReleaseLeaseHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileChangeLeaseOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** Proposed lease ID, in a GUID string format. The File service returns 400 (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor (String) for a list of valid GUID string formats. */\n  proposedLeaseId?: string;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled. */\n  requestId?: string;\n}\n\n/** Contains response data for the changeLease operation. */\nexport type FileChangeLeaseResponse = FileChangeLeaseHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileChangeLeaseHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileBreakLeaseOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage analytics logging is enabled. */\n  requestId?: string;\n}\n\n/** Contains response data for the breakLease operation. */\nexport type FileBreakLeaseResponse = FileBreakLeaseHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileBreakLeaseHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileUploadRangeOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** Initial data. */\n  body?: coreHttp.HttpRequestBody;\n  /** An MD5 hash of the content. This hash is used to verify the integrity of the data during transport. When the Content-MD5 header is specified, the File service compares the hash of the content that has arrived with the header value that was sent. If the two hashes do not match, the operation will fail with error code 400 (Bad Request). */\n  contentMD5?: Uint8Array;\n}\n\n/** Contains response data for the uploadRange operation. */\nexport type FileUploadRangeResponse = FileUploadRangeHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileUploadRangeHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileUploadRangeFromURLOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** Parameter group */\n  sourceModifiedAccessConditions?: SourceModifiedAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** Bytes of source data in the specified range. */\n  sourceRange?: string;\n  /** Specify the crc64 calculated for the range of bytes that must be read from the copy source. */\n  sourceContentCrc64?: Uint8Array;\n  /** Only Bearer type is supported. Credentials should be a valid OAuth access token to copy source. */\n  copySourceAuthorization?: string;\n}\n\n/** Contains response data for the uploadRangeFromURL operation. */\nexport type FileUploadRangeFromURLResponse = FileUploadRangeFromURLHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileUploadRangeFromURLHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileGetRangeListOptionalParams\n  extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n  /** Specifies the range of bytes over which to list ranges, inclusively. */\n  range?: string;\n  /** The previous snapshot parameter is an opaque DateTime value that, when present, specifies the previous snapshot. */\n  prevsharesnapshot?: string;\n}\n\n/** Contains response data for the getRangeList operation. */\nexport type FileGetRangeListResponse = FileGetRangeListHeaders &\n  ShareFileRangeList & {\n    /** The underlying HTTP response. */\n    _response: coreHttp.HttpResponse & {\n      /** The response body as text (string format) */\n      bodyAsText: string;\n\n      /** The response body as parsed JSON or XML */\n      parsedBody: ShareFileRangeList;\n      /** The parsed HTTP response headers. */\n      parsedHeaders: FileGetRangeListHeaders;\n    };\n  };\n\n/** Optional parameters. */\nexport interface FileStartCopyOptionalParams extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** Parameter group */\n  copyFileSmbInfo?: CopyFileSmbInfo;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** A name-value pair to associate with a file storage object. */\n  metadata?: { [propertyName: string]: string };\n  /** If specified the permission (security descriptor) shall be set for the directory/file. This header can be used if Permission size is <= 8KB, else x-ms-file-permission-key header shall be used. Default value: Inherit. If SDDL is specified as input, it must have owner, group and dacl. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be specified. */\n  filePermission?: string;\n  /** Key of the permission to be set for the directory/file. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key should be specified. */\n  filePermissionKey?: string;\n}\n\n/** Contains response data for the startCopy operation. */\nexport type FileStartCopyResponse = FileStartCopyHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileStartCopyHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileAbortCopyOptionalParams extends coreHttp.OperationOptions {\n  /** Parameter group */\n  leaseAccessConditions?: LeaseAccessConditions;\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n}\n\n/** Contains response data for the abortCopy operation. */\nexport type FileAbortCopyResponse = FileAbortCopyHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileAbortCopyHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface FileListHandlesOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** A string value that identifies the portion of the list to be returned with the next list operation. The operation returns a marker value within the response body if the list returned was not complete. The marker value may then be used in a subsequent call to request the next set of list items. The marker value is opaque to the client. */\n  marker?: string;\n  /** Specifies the maximum number of entries to return. If the request does not specify maxresults, or specifies a value greater than 5,000, the server will return up to 5,000 items. */\n  maxResults?: number;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n}\n\n/** Contains response data for the listHandles operation. */\nexport type FileListHandlesResponse = FileListHandlesHeaders &\n  ListHandlesResponse & {\n    /** The underlying HTTP response. */\n    _response: coreHttp.HttpResponse & {\n      /** The response body as text (string format) */\n      bodyAsText: string;\n\n      /** The response body as parsed JSON or XML */\n      parsedBody: ListHandlesResponse;\n      /** The parsed HTTP response headers. */\n      parsedHeaders: FileListHandlesHeaders;\n    };\n  };\n\n/** Optional parameters. */\nexport interface FileForceCloseHandlesOptionalParams\n  extends coreHttp.OperationOptions {\n  /** The timeout parameter is expressed in seconds. For more information, see <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN\">Setting Timeouts for File Service Operations.</a> */\n  timeoutInSeconds?: number;\n  /** A string value that identifies the portion of the list to be returned with the next list operation. The operation returns a marker value within the response body if the list returned was not complete. The marker value may then be used in a subsequent call to request the next set of list items. The marker value is opaque to the client. */\n  marker?: string;\n  /** The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query. */\n  shareSnapshot?: string;\n}\n\n/** Contains response data for the forceCloseHandles operation. */\nexport type FileForceCloseHandlesResponse = FileForceCloseHandlesHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: FileForceCloseHandlesHeaders;\n  };\n};\n\n/** Optional parameters. */\nexport interface StorageClientOptionalParams\n  extends coreHttp.ServiceClientOptions {\n  /** Specifies the version of the operation to use for this request. */\n  version?: string;\n  /** Only update is supported: - Update: Writes the bytes downloaded from the source url into the specified range. */\n  fileRangeWriteFromUrl?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}