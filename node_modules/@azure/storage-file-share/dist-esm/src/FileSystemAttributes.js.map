{"version":3,"file":"FileSystemAttributes.js","sourceRoot":"","sources":["../../src/FileSystemAttributes.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This is a helper class to construct a string representing the NTFS attributes to a file or directory.\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-file#file-system-attributes\n */\nexport class FileSystemAttributes {\n  /**\n   * Creates a FileSystemAttributes from the specified attributes string. This method will throw an\n   * Error if it encounters a string that does not correspond to a valid attributes.\n   *\n   * @param fileAttributes - The value of header x-ms-file-attributes.\n   */\n  public static parse(fileAttributes: string): FileSystemAttributes {\n    if (!fileAttributes) {\n      throw new RangeError(`Invalid fileAttributes: '${fileAttributes}'.`);\n    }\n\n    const fileSystemAttributes = new FileSystemAttributes();\n\n    const attributes = fileAttributes.trim().split(\"|\");\n\n    for (let str of attributes) {\n      str = str.trim();\n      switch (str) {\n        case \"ReadOnly\":\n          fileSystemAttributes.readonly = true;\n          break;\n        case \"Hidden\":\n          fileSystemAttributes.hidden = true;\n          break;\n        case \"System\":\n          fileSystemAttributes.system = true;\n          break;\n        case \"None\":\n          fileSystemAttributes.none = true;\n          break;\n        case \"Temporary\":\n          fileSystemAttributes.temporary = true;\n          break;\n        case \"Offline\":\n          fileSystemAttributes.offline = true;\n          break;\n        case \"Directory\":\n          fileSystemAttributes.directory = true;\n          break;\n        case \"Archive\":\n          fileSystemAttributes.archive = true;\n          break;\n        case \"NotContentIndexed\":\n          fileSystemAttributes.notContentIndexed = true;\n          break;\n        case \"NoScrubData\":\n          fileSystemAttributes.noScrubData = true;\n          break;\n        default:\n          throw new RangeError(`Invalid attribute: ${str}`);\n      }\n    }\n\n    return fileSystemAttributes;\n  }\n\n  /**\n   * Specifies a directory or file that is read-only.\n   */\n  public readonly: boolean = false;\n\n  /**\n   * Specifies a directory or file is hidden.\n   */\n  public hidden: boolean = false;\n\n  /**\n   * Specifies a directory or file that the operating system uses a part of, or uses exclusively.\n   */\n  public system: boolean = false;\n\n  /**\n   * Specifies a directory or file that does not have other attributes set. This attribute is valid only when used alone.\n   */\n  public none: boolean = false;\n\n  /**\n   * Specifies the handle identifies a directory.\n   */\n  public directory: boolean = false;\n\n  /**\n   * Specifies a directory or file is an archive. Applications typically use this attribute to mark files for backup or removal.\n   */\n  public archive: boolean = false;\n\n  /**\n   * Specifies if a file is temporary.\n   */\n  public temporary: boolean = false;\n\n  /**\n   * Specifies the data of a directory or file is not available immediately.\n   * This file system attribute is presented primarily to provide compatibility with Windows - Azure Files does not support with offline storage options.\n   */\n  public offline: boolean = false;\n\n  /**\n   * Specifies the directory or file is not to be indexed by the content indexing service.\n   */\n  public notContentIndexed: boolean = false;\n\n  /**\n   * Specifies the user data stream not to be read by the background data integrity scanner.\n   * This file system attribute is presented primarily to provide compatibility with Windows.\n   * Applicable to directory or file.\n   */\n  public noScrubData: boolean = false;\n\n  /**\n   * Converts the given attributes to a string.\n   *\n   * @returns A string which represents the FileSystemAttributes\n   */\n  public toString(): string {\n    const attributes: string[] = [];\n    if (this.readonly) {\n      attributes.push(\"ReadOnly\");\n    }\n    if (this.hidden) {\n      attributes.push(\"Hidden\");\n    }\n    if (this.system) {\n      attributes.push(\"System\");\n    }\n    if (this.none) {\n      attributes.push(\"None\");\n    }\n    if (this.temporary) {\n      attributes.push(\"Temporary\");\n    }\n    if (this.directory) {\n      attributes.push(\"Directory\");\n    }\n    if (this.archive) {\n      attributes.push(\"Archive\");\n    }\n    if (this.offline) {\n      attributes.push(\"Offline\");\n    }\n    if (this.notContentIndexed) {\n      attributes.push(\"NotContentIndexed\");\n    }\n    if (this.noScrubData) {\n      attributes.push(\"NoScrubData\");\n    }\n    return attributes.join(\"|\");\n  }\n}\n"]}