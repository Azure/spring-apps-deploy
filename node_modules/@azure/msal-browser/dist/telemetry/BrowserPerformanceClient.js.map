{"version":3,"file":"BrowserPerformanceClient.js","sources":["../../src/telemetry/BrowserPerformanceClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger, PerformanceEvent, PerformanceEvents, IPerformanceClient, PerformanceClient, IPerformanceMeasurement, InProgressPerformanceEvent, ApplicationTelemetry } from \"@azure/msal-common\";\nimport { BrowserCrypto } from \"../crypto/BrowserCrypto\";\nimport { GuidGenerator } from \"../crypto/GuidGenerator\";\nimport { BrowserPerformanceMeasurement } from \"./BrowserPerformanceMeasurement\";\n\nexport class BrowserPerformanceClient extends PerformanceClient implements IPerformanceClient {\n    private browserCrypto: BrowserCrypto;\n    private guidGenerator: GuidGenerator;\n    \n    constructor(clientId: string, authority: string, logger: Logger, libraryName: string, libraryVersion: string, applicationTelemetry: ApplicationTelemetry) {\n        super(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry);\n        this.browserCrypto = new BrowserCrypto(this.logger);\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    }\n    \n    startPerformanceMeasuremeant(measureName: string, correlationId: string): IPerformanceMeasurement {\n        return new BrowserPerformanceMeasurement(measureName, correlationId);\n    }\n\n    generateId() : string {\n        return this.guidGenerator.generateGuid();\n    }\n\n    private getPageVisibility(): string | null {\n        return document.visibilityState?.toString() || null;\n    }\n    \n    /**\n     * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\n     * Also captures browser page visibilityState.\n     *\n     * @param {PerformanceEvents} measureName\n     * @param {?string} [correlationId]\n     * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\n     */\n    startMeasurement(measureName: PerformanceEvents, correlationId?: string): InProgressPerformanceEvent {\n        // Capture page visibilityState and then invoke start/end measurement\n        const startPageVisibility = this.getPageVisibility();\n        \n        const inProgressEvent = super.startMeasurement(measureName, correlationId);\n\n        return {\n            ...inProgressEvent,\n            endMeasurement: (event?: Partial<PerformanceEvent>): PerformanceEvent | null => {\n                return inProgressEvent.endMeasurement({\n                    startPageVisibility,\n                    endPageVisibility: this.getPageVisibility(),\n                    ...event\n                });\n            }\n        };\n    }\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;;;;IAU8C,4CAAiB;IAI3D,kCAAY,QAAgB,EAAE,SAAiB,EAAE,MAAc,EAAE,WAAmB,EAAE,cAAsB,EAAE,oBAA0C;QAAxJ,YACI,kBAAM,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,oBAAoB,CAAC,SAGxF;QAFG,KAAI,CAAC,aAAa,GAAG,IAAI,aAAa,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;QACpD,KAAI,CAAC,aAAa,GAAG,IAAI,aAAa,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC;;KAC9D;IAED,+DAA4B,GAA5B,UAA6B,WAAmB,EAAE,aAAqB;QACnE,OAAO,IAAI,6BAA6B,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;KACxE;IAED,6CAAU,GAAV;QACI,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;KAC5C;IAEO,oDAAiB,GAAzB;;QACI,OAAO,OAAA,QAAQ,CAAC,eAAe,0CAAE,QAAQ,OAAM,IAAI,CAAC;KACvD;;;;;;;;;IAUD,mDAAgB,GAAhB,UAAiB,WAA8B,EAAE,aAAsB;QAAvE,iBAgBC;;QAdG,IAAM,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAErD,IAAM,eAAe,GAAG,iBAAM,gBAAgB,YAAC,WAAW,EAAE,aAAa,CAAC,CAAC;QAE3E,6BACO,eAAe,KAClB,cAAc,EAAE,UAAC,KAAiC;gBAC9C,OAAO,eAAe,CAAC,cAAc,YACjC,mBAAmB,qBAAA,EACnB,iBAAiB,EAAE,KAAI,CAAC,iBAAiB,EAAE,IACxC,KAAK,EACV,CAAC;aACN,IACH;KACL;IACL,+BAAC;AAAD,CA/CA,CAA8C,iBAAiB;;;;"}