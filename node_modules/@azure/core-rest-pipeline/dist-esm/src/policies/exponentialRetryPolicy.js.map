{"version":3,"file":"exponentialRetryPolicy.js","sourceRoot":"","sources":["../../../src/policies/exponentialRetryPolicy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineResponse, PipelineRequest, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\nimport { logger } from \"../log\";\nimport { delay, getRandomIntegerInclusive } from \"../util/helpers\";\nimport { RestError } from \"../restError\";\n\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nexport const exponentialRetryPolicyName = \"exponentialRetryPolicy\";\n\nconst DEFAULT_CLIENT_RETRY_COUNT = 10;\n// intervals are in ms\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n\ninterface RetryData {\n  retryCount: number;\n  retryInterval: number;\n  error?: RetryError;\n}\n\ninterface RetryError extends Error {\n  message: string;\n  code?: string;\n  innerError?: RetryError;\n}\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface ExponentialRetryPolicyOptions {\n  /**\n   * The maximum number of retry attempts.  Defaults to 10.\n   */\n  maxRetries?: number;\n\n  /**\n   * The amount of delay in milliseconds between retry attempts. Defaults to 1000\n   * (1 second.) The delay increases exponentially with each retry up to a maximum\n   * specified by maxRetryDelayInMs.\n   */\n  retryDelayInMs?: number;\n\n  /**\n   * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n   * to 64000 (64 seconds).\n   */\n  maxRetryDelayInMs?: number;\n}\n\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nexport function exponentialRetryPolicy(\n  options: ExponentialRetryPolicyOptions = {}\n): PipelinePolicy {\n  const retryCount = options.maxRetries ?? DEFAULT_CLIENT_RETRY_COUNT;\n  const retryInterval = options.retryDelayInMs ?? DEFAULT_CLIENT_RETRY_INTERVAL;\n  const maxRetryInterval = options.maxRetryDelayInMs ?? DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n\n  /**\n   * Determines if the operation should be retried and how long to wait until the next retry.\n   *\n   * @param statusCode - The HTTP status code.\n   * @param retryData -  The retry data.\n   * @returns True if the operation qualifies for a retry; false otherwise.\n   */\n  function shouldRetry(response: PipelineResponse | undefined, retryData: RetryData): boolean {\n    const statusCode = response?.status;\n    if (statusCode === 503 && response?.headers.get(\"Retry-After\")) {\n      return false;\n    }\n\n    if (\n      statusCode === undefined ||\n      (statusCode < 500 && statusCode !== 408) ||\n      statusCode === 501 ||\n      statusCode === 505\n    ) {\n      return false;\n    }\n\n    const currentCount = retryData && retryData.retryCount;\n\n    return currentCount < retryCount;\n  }\n\n  /**\n   * Updates the retry data for the next attempt.\n   *\n   * @param retryData -  The retry data.\n   * @param err - The operation's error, if any.\n   */\n  function updateRetryData(retryData: RetryData, err?: RetryError): RetryData {\n    if (err) {\n      if (retryData.error) {\n        err.innerError = retryData.error;\n      }\n\n      retryData.error = err;\n    }\n\n    // Adjust retry count\n    retryData.retryCount++;\n\n    // Exponentially increase the delay each time\n    const exponentialDelay = retryInterval * Math.pow(2, retryData.retryCount);\n    // Don't let the delay exceed the maximum\n    const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n    // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n    // that retries across multiple clients don't occur simultaneously.\n    const delayWithJitter =\n      clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n\n    retryData.retryInterval = delayWithJitter;\n\n    return retryData;\n  }\n\n  async function retry(\n    next: SendRequest,\n    retryData: RetryData,\n    request: PipelineRequest,\n    response?: PipelineResponse,\n    requestError?: RetryError\n  ): Promise<PipelineResponse> {\n    retryData = updateRetryData(retryData, requestError);\n    const isAborted = request.abortSignal?.aborted;\n    if (!isAborted && shouldRetry(response, retryData)) {\n      logger.info(`Retrying request in ${retryData.retryInterval}`);\n      try {\n        await delay(retryData.retryInterval);\n        const res = await next(request);\n        return retry(next, retryData, request, res);\n      } catch (e) {\n        return retry(next, retryData, request, response, e);\n      }\n    } else if (isAborted || requestError || !response) {\n      // If the operation failed in the end, return all errors instead of just the last one\n      const err =\n        retryData.error ||\n        new RestError(\"Failed to send the request.\", {\n          code: RestError.REQUEST_SEND_ERROR,\n          statusCode: response?.status,\n          request: response?.request,\n          response\n        });\n      throw err;\n    } else {\n      return response;\n    }\n  }\n\n  return {\n    name: exponentialRetryPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      const retryData = {\n        retryCount: 0,\n        retryInterval: 0\n      };\n      try {\n        const response = await next(request);\n        return retry(next, retryData, request, response);\n      } catch (e) {\n        const error: RestError = e;\n        return retry(next, retryData, request, error.response, error);\n      }\n    }\n  };\n}\n"]}