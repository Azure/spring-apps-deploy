{"version":3,"file":"impl.js","sourceRoot":"","sources":["../../../src/lroEngine/impl.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  GetLroStatusFromResponse,\n  LongRunningOperation,\n  LroBody,\n  LroInfo,\n  LroResourceLocationConfig,\n  LroResponse,\n  LroStatus,\n  PollerConfig,\n  RawResponse,\n  ResumablePollOperationState,\n} from \"./models\";\nimport { PollOperationState } from \"../pollOperation\";\nimport { logger } from \"./logger\";\n\nexport function throwIfUndefined<T>(\n  input: T | undefined,\n  options: { errorMessage?: string } = {}\n): T {\n  if (input === undefined) {\n    throw new Error(options.errorMessage ?? \"undefined variable\");\n  }\n  return input;\n}\n\nexport function updatePollingUrl(inputs: { rawResponse: RawResponse; info: LroInfo }): void {\n  const { info, rawResponse } = inputs;\n  switch (info.mode) {\n    case \"OperationLocation\": {\n      const operationLocation = getOperationLocation(rawResponse);\n      const azureAsyncOperation = getAzureAsyncOperation(rawResponse);\n      info.pollingUrl =\n        getOperationLocationPollingUrl({ operationLocation, azureAsyncOperation }) ??\n        throwIfUndefined(info.pollingUrl);\n      break;\n    }\n    case \"ResourceLocation\": {\n      info.pollingUrl = getLocation(rawResponse) ?? throwIfUndefined(info.pollingUrl);\n      break;\n    }\n  }\n}\n\nfunction getOperationLocationPollingUrl(inputs: {\n  operationLocation?: string;\n  azureAsyncOperation?: string;\n}): string | undefined {\n  const { azureAsyncOperation, operationLocation } = inputs;\n  return operationLocation ?? azureAsyncOperation;\n}\n\nfunction getLocation(rawResponse: RawResponse): string | undefined {\n  return rawResponse.headers[\"location\"];\n}\n\nfunction getOperationLocation(rawResponse: RawResponse): string | undefined {\n  return rawResponse.headers[\"operation-location\"];\n}\n\nfunction getAzureAsyncOperation(rawResponse: RawResponse): string | undefined {\n  return rawResponse.headers[\"azure-asyncoperation\"];\n}\n\nfunction findResourceLocation(inputs: {\n  requestMethod: string;\n  location?: string;\n  requestPath: string;\n  lroResourceLocationConfig?: LroResourceLocationConfig;\n}): string | undefined {\n  const { location, requestMethod, requestPath, lroResourceLocationConfig } = inputs;\n  switch (requestMethod) {\n    case \"PUT\": {\n      return requestPath;\n    }\n    case \"DELETE\": {\n      return undefined;\n    }\n    default: {\n      switch (lroResourceLocationConfig) {\n        case \"azure-async-operation\": {\n          return undefined;\n        }\n        case \"original-uri\": {\n          return requestPath;\n        }\n        case \"location\":\n        default: {\n          return location;\n        }\n      }\n    }\n  }\n}\n\nfunction inferLroMode(inputs: {\n  rawResponse: RawResponse;\n  requestPath: string;\n  requestMethod: string;\n  lroResourceLocationConfig?: LroResourceLocationConfig;\n}): LroInfo {\n  const { rawResponse, requestMethod, requestPath, lroResourceLocationConfig } = inputs;\n  const operationLocation = getOperationLocation(rawResponse);\n  const azureAsyncOperation = getAzureAsyncOperation(rawResponse);\n  const location = getLocation(rawResponse);\n  if (operationLocation !== undefined || azureAsyncOperation !== undefined) {\n    return {\n      mode: \"OperationLocation\",\n      pollingUrl: operationLocation ?? azureAsyncOperation,\n      resourceLocation: findResourceLocation({\n        requestMethod,\n        location,\n        requestPath,\n        lroResourceLocationConfig,\n      }),\n    };\n  } else if (location !== undefined) {\n    return {\n      mode: \"ResourceLocation\",\n      pollingUrl: location,\n    };\n  } else if (requestMethod === \"PUT\") {\n    return {\n      mode: \"Body\",\n      pollingUrl: requestPath,\n    };\n  } else {\n    return {\n      mode: \"None\",\n    };\n  }\n}\n\nclass SimpleRestError extends Error {\n  public statusCode?: number;\n  constructor(message: string, statusCode: number) {\n    super(message);\n    this.name = \"RestError\";\n    this.statusCode = statusCode;\n\n    Object.setPrototypeOf(this, SimpleRestError.prototype);\n  }\n}\n\nfunction throwIfError(rawResponse: RawResponse): void {\n  const code = rawResponse.statusCode;\n  if (code >= 400) {\n    throw new SimpleRestError(\n      `Received unexpected HTTP status code ${code} while polling. This may indicate a server issue.`,\n      code\n    );\n  }\n}\n\nfunction getStatus(rawResponse: RawResponse): string {\n  const { status } = (rawResponse.body as LroBody) ?? {};\n  return typeof status === \"string\" ? status.toLowerCase() : \"succeeded\";\n}\n\nfunction getProvisioningState(rawResponse: RawResponse): string {\n  const { properties, provisioningState } = (rawResponse.body as LroBody) ?? {};\n  const state = properties?.provisioningState ?? provisioningState;\n  return typeof state === \"string\" ? state.toLowerCase() : \"succeeded\";\n}\n\nfunction isCanceled<TResult, TState extends PollOperationState<TResult>>(operation: {\n  state: TState;\n  operationStatus: string;\n}): boolean {\n  const { state, operationStatus } = operation;\n  if ([\"canceled\", \"cancelled\"].includes(operationStatus)) {\n    state.isCancelled = true;\n    return true;\n  }\n  return false;\n}\n\nfunction isTerminal<TResult, TState extends PollOperationState<TResult>>(operation: {\n  state: TState;\n  operationStatus: string;\n}): boolean {\n  const { state, operationStatus } = operation;\n  if (operationStatus === \"failed\") {\n    throw new Error(`The long-running operation has failed.`);\n  }\n  return operationStatus === \"succeeded\" || isCanceled({ state, operationStatus });\n}\n\nfunction getOperationStatus<TResult, TState extends PollOperationState<TResult>>(result: {\n  rawResponse: RawResponse;\n  state: TState;\n  info: LroInfo;\n  responseKind?: \"Initial\" | \"Polling\";\n}): {\n  operationStatus?: string | number;\n  shouldStopPolling: boolean;\n} {\n  const { rawResponse, state, info, responseKind = \"Polling\" } = result;\n  throwIfError(rawResponse);\n  switch (info.mode) {\n    case \"OperationLocation\": {\n      const operationStatus = getStatus(rawResponse);\n      return {\n        operationStatus,\n        shouldStopPolling: responseKind === \"Polling\" && isTerminal({ state, operationStatus }),\n      };\n    }\n    case \"Body\": {\n      const operationStatus = getProvisioningState(rawResponse);\n      return {\n        operationStatus,\n        shouldStopPolling: isTerminal({ state, operationStatus }),\n      };\n    }\n    case \"ResourceLocation\": {\n      const operationStatus = rawResponse.statusCode;\n      return {\n        operationStatus,\n        shouldStopPolling: responseKind === \"Polling\" && operationStatus !== 202,\n      };\n    }\n    case \"None\": {\n      return {\n        shouldStopPolling: true,\n      };\n    }\n  }\n}\n\nfunction shouldStopPolling<TResult, TState extends PollOperationState<TResult>>(result: {\n  rawResponse: RawResponse;\n  state: TState;\n  info: LroInfo;\n  responseKind?: \"Initial\" | \"Polling\";\n}): boolean {\n  const { rawResponse, state, info, responseKind = \"Polling\" } = result;\n  const { shouldStopPolling: isPollingStopped, operationStatus } = getOperationStatus({\n    info,\n    rawResponse,\n    state,\n    responseKind,\n  });\n  if (operationStatus) {\n    logger.verbose(\n      `LRO: Status:\\n\\tPolling from: ${\n        info.pollingUrl\n      }\\n\\tOperation status: ${operationStatus}\\n\\tPolling status: ${\n        isPollingStopped ? \"Stopped\" : \"Running\"\n      }`\n    );\n  } else {\n    logger.verbose(`LRO: Status: Not an LRO`);\n  }\n  return isPollingStopped;\n}\n\n/**\n * Creates a polling operation.\n */\nexport function createPoll<TResult>(\n  lroPrimitives: LongRunningOperation<TResult>\n): (\n  pollingURL: string,\n  pollerConfig: PollerConfig,\n  getLroStatusFromResponse: GetLroStatusFromResponse<TResult>\n) => Promise<LroStatus<TResult>> {\n  return async (\n    path: string,\n    pollerConfig: PollerConfig,\n    getLroStatusFromResponse: GetLroStatusFromResponse<TResult>\n  ): Promise<LroStatus<TResult>> => {\n    const response = await lroPrimitives.sendPollRequest(path);\n    const retryAfter: string | undefined = response.rawResponse.headers[\"retry-after\"];\n    if (retryAfter !== undefined) {\n      // Retry-After header value is either in HTTP date format, or in seconds\n      const retryAfterInSeconds = parseInt(retryAfter);\n      pollerConfig.intervalInMs = isNaN(retryAfterInSeconds)\n        ? calculatePollingIntervalFromDate(new Date(retryAfter), pollerConfig.intervalInMs)\n        : retryAfterInSeconds * 1000;\n    }\n    return getLroStatusFromResponse(response);\n  };\n}\n\nfunction calculatePollingIntervalFromDate(\n  retryAfterDate: Date,\n  defaultIntervalInMs: number\n): number {\n  const timeNow = Math.floor(new Date().getTime());\n  const retryAfterTime = retryAfterDate.getTime();\n  if (timeNow < retryAfterTime) {\n    return retryAfterTime - timeNow;\n  }\n  return defaultIntervalInMs;\n}\n\nexport function buildResult<TResult, TState extends PollOperationState<TResult>>(inputs: {\n  response: TResult;\n  state: TState;\n  processResult?: (result: unknown, state: TState) => TResult;\n}): TResult {\n  const { processResult, response, state } = inputs;\n  return processResult ? processResult(response, state) : response;\n}\n\n/**\n * Creates a callback to be used to initialize the polling operation state.\n */\nexport function createStateInitializer<\n  TResult,\n  TState extends PollOperationState<TResult>\n>(inputs: {\n  state: ResumablePollOperationState<TResult>;\n  requestPath: string;\n  requestMethod: string;\n  lroResourceLocationConfig?: LroResourceLocationConfig;\n  processResult?: (result: unknown, state: TState) => TResult;\n}): (response: LroResponse<TResult>) => void {\n  const { requestMethod, requestPath, state, lroResourceLocationConfig, processResult } = inputs;\n  return (response: LroResponse<TResult>): void => {\n    const { rawResponse } = response;\n    state.isStarted = true;\n    state.config = inferLroMode({\n      rawResponse,\n      requestPath,\n      requestMethod,\n      lroResourceLocationConfig,\n    });\n    logger.verbose(`LRO: Operation description:`, state.config);\n    /** short circuit before polling */\n    if (\n      shouldStopPolling({\n        rawResponse,\n        state,\n        info: state.config,\n        responseKind: \"Initial\",\n      })\n    ) {\n      state.result = buildResult({\n        response: response.flatResponse,\n        state: state as TState,\n        processResult,\n      });\n      state.isCompleted = true;\n    }\n  };\n}\n\nexport function createGetLroStatusFromResponse<\n  TResult,\n  TState extends PollOperationState<TResult>\n>(inputs: {\n  lro: LongRunningOperation<TResult>;\n  state: TState;\n  info: LroInfo;\n}): (response: LroResponse<TResult>) => LroStatus<TResult> {\n  const { lro, state, info } = inputs;\n  const location = info.resourceLocation;\n  return (response: LroResponse<TResult>): LroStatus<TResult> => {\n    const isTerminalStatus = shouldStopPolling({\n      info,\n      rawResponse: response.rawResponse,\n      state,\n    });\n    return {\n      ...response,\n      done: isTerminalStatus && !location,\n      next: !(isTerminalStatus && location)\n        ? undefined\n        : () =>\n            lro.sendPollRequest(location).then((res) => ({\n              ...res,\n              done: true,\n            })),\n    };\n  };\n}\n"]}